   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"simpleserial-glitch.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.glitch_loop,"ax",%progbits
  16              		.align	1
  17              		.global	glitch_loop
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	glitch_loop:
  25              	.LVL0:
  26              	.LFB0:
  27              		.file 1 "simpleserial-glitch.c"
   1:simpleserial-glitch.c **** /*
   2:simpleserial-glitch.c ****     This file is part of the ChipWhisperer Example Targets
   3:simpleserial-glitch.c ****     Copyright (C) 2012-2020 NewAE Technology Inc.
   4:simpleserial-glitch.c **** 
   5:simpleserial-glitch.c ****     This program is free software: you can redistribute it and/or modify
   6:simpleserial-glitch.c ****     it under the terms of the GNU General Public License as published by
   7:simpleserial-glitch.c ****     the Free Software Foundation, either version 3 of the License, or
   8:simpleserial-glitch.c ****     (at your option) any later version.
   9:simpleserial-glitch.c **** 
  10:simpleserial-glitch.c ****     This program is distributed in the hope that it will be useful,
  11:simpleserial-glitch.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:simpleserial-glitch.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:simpleserial-glitch.c ****     GNU General Public License for more details.
  14:simpleserial-glitch.c **** 
  15:simpleserial-glitch.c ****     You should have received a copy of the GNU General Public License
  16:simpleserial-glitch.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:simpleserial-glitch.c **** */
  18:simpleserial-glitch.c **** 
  19:simpleserial-glitch.c **** #include "hal.h"
  20:simpleserial-glitch.c **** #include <stdint.h>
  21:simpleserial-glitch.c **** #include <stdlib.h>
  22:simpleserial-glitch.c **** 
  23:simpleserial-glitch.c **** #include "simpleserial.h"
  24:simpleserial-glitch.c **** 
  25:simpleserial-glitch.c **** //uint8_t infinite_loop(uint8_t* in);
  26:simpleserial-glitch.c **** //uint8_t glitch_loop(uint8_t* in);
  27:simpleserial-glitch.c **** //uint8_t password(uint8_t* pw);
  28:simpleserial-glitch.c **** 
  29:simpleserial-glitch.c **** #if SS_VER == SS_VER_2_1
  30:simpleserial-glitch.c **** uint8_t glitch_loop(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* in)
  31:simpleserial-glitch.c **** #else
  32:simpleserial-glitch.c **** uint8_t glitch_loop(uint8_t* in, uint8_t len)
  33:simpleserial-glitch.c **** #endif
  34:simpleserial-glitch.c **** {
  28              		.loc 1 34 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  35:simpleserial-glitch.c ****     volatile uint16_t i, j;
  32              		.loc 1 35 5 view .LVU1
  36:simpleserial-glitch.c ****     volatile uint32_t cnt;
  33              		.loc 1 36 5 view .LVU2
  37:simpleserial-glitch.c ****     cnt = 0;
  34              		.loc 1 37 5 view .LVU3
  34:simpleserial-glitch.c ****     volatile uint16_t i, j;
  35              		.loc 1 34 1 is_stmt 0 view .LVU4
  36 0000 13B5     		push	{r0, r1, r4, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 16
  39              		.cfi_offset 0, -16
  40              		.cfi_offset 1, -12
  41              		.cfi_offset 4, -8
  42              		.cfi_offset 14, -4
  43              		.loc 1 37 9 view .LVU5
  44 0002 0024     		movs	r4, #0
  45 0004 0194     		str	r4, [sp, #4]
  38:simpleserial-glitch.c ****     trigger_high();
  46              		.loc 1 38 5 is_stmt 1 view .LVU6
  47 0006 FFF7FEFF 		bl	trigger_high
  48              	.LVL1:
  39:simpleserial-glitch.c ****     for(i=0; i<50; i++){
  49              		.loc 1 39 5 view .LVU7
  50              		.loc 1 39 10 is_stmt 0 view .LVU8
  51 000a 6B46     		mov	r3, sp
  52 000c 1C80     		strh	r4, [r3]
  40:simpleserial-glitch.c ****         for(j=0; j<50; j++){
  53              		.loc 1 40 14 view .LVU9
  54 000e 9A1C     		adds	r2, r3, #2
  55              	.L2:
  39:simpleserial-glitch.c ****     for(i=0; i<50; i++){
  56              		.loc 1 39 14 is_stmt 1 discriminator 1 view .LVU10
  39:simpleserial-glitch.c ****     for(i=0; i<50; i++){
  57              		.loc 1 39 15 is_stmt 0 discriminator 1 view .LVU11
  58 0010 6B46     		mov	r3, sp
  59 0012 1B88     		ldrh	r3, [r3]
  39:simpleserial-glitch.c ****     for(i=0; i<50; i++){
  60              		.loc 1 39 5 discriminator 1 view .LVU12
  61 0014 312B     		cmp	r3, #49
  62 0016 0DD9     		bls	.L5
  41:simpleserial-glitch.c ****             cnt++;
  42:simpleserial-glitch.c ****         }
  43:simpleserial-glitch.c ****     }
  44:simpleserial-glitch.c ****     trigger_low();
  63              		.loc 1 44 5 is_stmt 1 view .LVU13
  45:simpleserial-glitch.c ****     simpleserial_put('r', 4, (uint8_t*)&cnt);
  46:simpleserial-glitch.c **** #if SS_VER == SS_VER_2_1
  47:simpleserial-glitch.c ****     return (cnt != 2500) ? 0x10 : 0x00;
  48:simpleserial-glitch.c **** #else
  49:simpleserial-glitch.c ****     return (cnt != 2500);
  50:simpleserial-glitch.c **** #endif
  51:simpleserial-glitch.c **** }
  64              		.loc 1 51 1 is_stmt 0 view .LVU14
  65              		@ sp needed
  44:simpleserial-glitch.c ****     simpleserial_put('r', 4, (uint8_t*)&cnt);
  66              		.loc 1 44 5 view .LVU15
  67 0018 FFF7FEFF 		bl	trigger_low
  68              	.LVL2:
  45:simpleserial-glitch.c ****     simpleserial_put('r', 4, (uint8_t*)&cnt);
  69              		.loc 1 45 5 is_stmt 1 view .LVU16
  70 001c 0421     		movs	r1, #4
  71 001e 7220     		movs	r0, #114
  72 0020 01AA     		add	r2, sp, #4
  73 0022 FFF7FEFF 		bl	simpleserial_put
  74              	.LVL3:
  47:simpleserial-glitch.c **** #else
  75              		.loc 1 47 5 view .LVU17
  47:simpleserial-glitch.c **** #else
  76              		.loc 1 47 33 is_stmt 0 view .LVU18
  77 0026 0D4B     		ldr	r3, .L8
  47:simpleserial-glitch.c **** #else
  78              		.loc 1 47 17 view .LVU19
  79 0028 0198     		ldr	r0, [sp, #4]
  47:simpleserial-glitch.c **** #else
  80              		.loc 1 47 33 view .LVU20
  81 002a C018     		adds	r0, r0, r3
  82 002c 431E     		subs	r3, r0, #1
  83 002e 9841     		sbcs	r0, r0, r3
  84 0030 0001     		lsls	r0, r0, #4
  85              		.loc 1 51 1 view .LVU21
  86 0032 16BD     		pop	{r1, r2, r4, pc}
  87              	.L5:
  40:simpleserial-glitch.c ****             cnt++;
  88              		.loc 1 40 9 is_stmt 1 view .LVU22
  40:simpleserial-glitch.c ****             cnt++;
  89              		.loc 1 40 14 is_stmt 0 view .LVU23
  90 0034 1480     		strh	r4, [r2]
  91              	.L3:
  40:simpleserial-glitch.c ****             cnt++;
  92              		.loc 1 40 18 is_stmt 1 discriminator 1 view .LVU24
  40:simpleserial-glitch.c ****             cnt++;
  93              		.loc 1 40 19 is_stmt 0 discriminator 1 view .LVU25
  94 0036 1388     		ldrh	r3, [r2]
  40:simpleserial-glitch.c ****             cnt++;
  95              		.loc 1 40 9 discriminator 1 view .LVU26
  96 0038 312B     		cmp	r3, #49
  97 003a 06D9     		bls	.L4
  39:simpleserial-glitch.c ****         for(j=0; j<50; j++){
  98              		.loc 1 39 20 is_stmt 1 discriminator 2 view .LVU27
  39:simpleserial-glitch.c ****         for(j=0; j<50; j++){
  99              		.loc 1 39 21 is_stmt 0 discriminator 2 view .LVU28
 100 003c 6B46     		mov	r3, sp
 101 003e 6946     		mov	r1, sp
 102 0040 1B88     		ldrh	r3, [r3]
 103 0042 0133     		adds	r3, r3, #1
 104 0044 9BB2     		uxth	r3, r3
 105 0046 0B80     		strh	r3, [r1]
 106 0048 E2E7     		b	.L2
 107              	.L4:
  41:simpleserial-glitch.c ****         }
 108              		.loc 1 41 13 is_stmt 1 discriminator 3 view .LVU29
  41:simpleserial-glitch.c ****         }
 109              		.loc 1 41 16 is_stmt 0 discriminator 3 view .LVU30
 110 004a 019B     		ldr	r3, [sp, #4]
 111 004c 0133     		adds	r3, r3, #1
 112 004e 0193     		str	r3, [sp, #4]
  40:simpleserial-glitch.c ****             cnt++;
 113              		.loc 1 40 24 is_stmt 1 discriminator 3 view .LVU31
  40:simpleserial-glitch.c ****             cnt++;
 114              		.loc 1 40 25 is_stmt 0 discriminator 3 view .LVU32
 115 0050 1388     		ldrh	r3, [r2]
 116 0052 0133     		adds	r3, r3, #1
 117 0054 9BB2     		uxth	r3, r3
 118 0056 1380     		strh	r3, [r2]
 119 0058 EDE7     		b	.L3
 120              	.L9:
 121 005a C046     		.align	2
 122              	.L8:
 123 005c 3CF6FFFF 		.word	-2500
 124              		.cfi_endproc
 125              	.LFE0:
 127              		.section	.text.glitch_comparison,"ax",%progbits
 128              		.align	1
 129              		.global	glitch_comparison
 130              		.syntax unified
 131              		.code	16
 132              		.thumb_func
 133              		.fpu softvfp
 135              	glitch_comparison:
 136              	.LVL4:
 137              	.LFB1:
  52:simpleserial-glitch.c **** 
  53:simpleserial-glitch.c **** #if SS_VER == SS_VER_2_1
  54:simpleserial-glitch.c **** uint8_t glitch_comparison(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* in)
  55:simpleserial-glitch.c **** #else
  56:simpleserial-glitch.c **** uint8_t glitch_comparison(uint8_t* in, uint8_t len)
  57:simpleserial-glitch.c **** #endif
  58:simpleserial-glitch.c **** {
 138              		.loc 1 58 1 is_stmt 1 view -0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 8
 141              		@ frame_needed = 0, uses_anonymous_args = 0
  59:simpleserial-glitch.c ****     uint8_t ok = 5;
 142              		.loc 1 59 5 view .LVU34
  58:simpleserial-glitch.c ****     uint8_t ok = 5;
 143              		.loc 1 58 1 is_stmt 0 view .LVU35
 144 0000 13B5     		push	{r0, r1, r4, lr}
 145              	.LCFI1:
 146              		.cfi_def_cfa_offset 16
 147              		.cfi_offset 0, -16
 148              		.cfi_offset 1, -12
 149              		.cfi_offset 4, -8
 150              		.cfi_offset 14, -4
  58:simpleserial-glitch.c ****     uint8_t ok = 5;
 151              		.loc 1 58 1 view .LVU36
 152 0002 1C00     		movs	r4, r3
  60:simpleserial-glitch.c ****     trigger_high();
  61:simpleserial-glitch.c ****     if (*in == 0xA2){
  62:simpleserial-glitch.c ****         ok = 1;
  63:simpleserial-glitch.c ****     } else {
  64:simpleserial-glitch.c ****         ok = 0;
  65:simpleserial-glitch.c ****     }
  66:simpleserial-glitch.c ****     trigger_low();
  67:simpleserial-glitch.c ****     simpleserial_put('r', 1, (uint8_t*)&ok);
  68:simpleserial-glitch.c ****     return 0x00;
  69:simpleserial-glitch.c **** }
 153              		.loc 1 69 1 view .LVU37
 154              		@ sp needed
  59:simpleserial-glitch.c ****     trigger_high();
 155              		.loc 1 59 13 view .LVU38
 156 0004 6A46     		mov	r2, sp
 157              	.LVL5:
  59:simpleserial-glitch.c ****     trigger_high();
 158              		.loc 1 59 13 view .LVU39
 159 0006 0523     		movs	r3, #5
 160              	.LVL6:
  59:simpleserial-glitch.c ****     trigger_high();
 161              		.loc 1 59 13 view .LVU40
 162 0008 D371     		strb	r3, [r2, #7]
  60:simpleserial-glitch.c ****     trigger_high();
 163              		.loc 1 60 5 is_stmt 1 view .LVU41
 164 000a FFF7FEFF 		bl	trigger_high
 165              	.LVL7:
  61:simpleserial-glitch.c ****         ok = 1;
 166              		.loc 1 61 5 view .LVU42
  61:simpleserial-glitch.c ****         ok = 1;
 167              		.loc 1 61 8 is_stmt 0 view .LVU43
 168 000e 2378     		ldrb	r3, [r4]
 169 0010 A23B     		subs	r3, r3, #162
 170 0012 5A42     		rsbs	r2, r3, #0
 171 0014 5341     		adcs	r3, r3, r2
 172 0016 6A46     		mov	r2, sp
 173 0018 D371     		strb	r3, [r2, #7]
  66:simpleserial-glitch.c ****     simpleserial_put('r', 1, (uint8_t*)&ok);
 174              		.loc 1 66 5 is_stmt 1 view .LVU44
 175 001a FFF7FEFF 		bl	trigger_low
 176              	.LVL8:
  67:simpleserial-glitch.c ****     return 0x00;
 177              		.loc 1 67 5 view .LVU45
 178 001e 6B46     		mov	r3, sp
 179 0020 0121     		movs	r1, #1
 180 0022 7220     		movs	r0, #114
 181 0024 DA1D     		adds	r2, r3, #7
 182 0026 FFF7FEFF 		bl	simpleserial_put
 183              	.LVL9:
  68:simpleserial-glitch.c **** }
 184              		.loc 1 68 5 view .LVU46
 185              		.loc 1 69 1 is_stmt 0 view .LVU47
 186 002a 0020     		movs	r0, #0
 187              	.LVL10:
 188              		.loc 1 69 1 view .LVU48
 189 002c 16BD     		pop	{r1, r2, r4, pc}
 190              		.cfi_endproc
 191              	.LFE1:
 193              		.section	.rodata.str1.1,"aMS",%progbits,1
 194              	.LC0:
 195 0000 746F7563 		.ascii	"touch\000"
 195      6800
 196              		.section	.text.password,"ax",%progbits
 197              		.align	1
 198              		.global	password
 199              		.syntax unified
 200              		.code	16
 201              		.thumb_func
 202              		.fpu softvfp
 204              	password:
 205              	.LVL11:
 206              	.LFB2:
  70:simpleserial-glitch.c **** 
  71:simpleserial-glitch.c **** #if SS_VER == SS_VER_2_1
  72:simpleserial-glitch.c **** uint8_t password(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* pw)
  73:simpleserial-glitch.c **** #else
  74:simpleserial-glitch.c **** uint8_t password(uint8_t* pw, uint8_t len)
  75:simpleserial-glitch.c **** #endif
  76:simpleserial-glitch.c **** {
 207              		.loc 1 76 1 is_stmt 1 view -0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 16
 210              		@ frame_needed = 0, uses_anonymous_args = 0
  77:simpleserial-glitch.c ****     char passwd[] = "touch";
 211              		.loc 1 77 5 view .LVU50
  76:simpleserial-glitch.c ****     char passwd[] = "touch";
 212              		.loc 1 76 1 is_stmt 0 view .LVU51
 213 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 214              	.LCFI2:
 215              		.cfi_def_cfa_offset 20
 216              		.cfi_offset 4, -20
 217              		.cfi_offset 5, -16
 218              		.cfi_offset 6, -12
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 85B0     		sub	sp, sp, #20
 222              	.LCFI3:
 223              		.cfi_def_cfa_offset 40
 224              		.loc 1 77 10 view .LVU52
 225 0004 02AE     		add	r6, sp, #8
 226 0006 0622     		movs	r2, #6
 227              	.LVL12:
 228              		.loc 1 77 10 view .LVU53
 229 0008 1249     		ldr	r1, .L19
 230              	.LVL13:
 231              		.loc 1 77 10 view .LVU54
 232 000a 3000     		movs	r0, r6
 233              	.LVL14:
  76:simpleserial-glitch.c ****     char passwd[] = "touch";
 234              		.loc 1 76 1 view .LVU55
 235 000c 1D00     		movs	r5, r3
 236              		.loc 1 77 10 view .LVU56
 237 000e FFF7FEFF 		bl	memcpy
 238              	.LVL15:
  78:simpleserial-glitch.c ****     char passok = 1;
 239              		.loc 1 78 5 is_stmt 1 view .LVU57
 240              		.loc 1 78 10 is_stmt 0 view .LVU58
 241 0012 6B46     		mov	r3, sp
 242 0014 0127     		movs	r7, #1
 243 0016 DC1D     		adds	r4, r3, #7
 244 0018 2770     		strb	r7, [r4]
  79:simpleserial-glitch.c ****     int cnt;
 245              		.loc 1 79 5 is_stmt 1 view .LVU59
  80:simpleserial-glitch.c **** 
  81:simpleserial-glitch.c ****     trigger_high();
 246              		.loc 1 81 5 view .LVU60
 247 001a FFF7FEFF 		bl	trigger_high
 248              	.LVL16:
  82:simpleserial-glitch.c **** 
  83:simpleserial-glitch.c ****     //Simple test - doesn't check for too-long password!
  84:simpleserial-glitch.c ****     for(cnt = 0; cnt < 5; cnt++){
 249              		.loc 1 84 5 view .LVU61
 250              		.loc 1 84 18 view .LVU62
  81:simpleserial-glitch.c **** 
 251              		.loc 1 81 5 is_stmt 0 view .LVU63
 252 001e 0022     		movs	r2, #0
 253              		.loc 1 84 13 view .LVU64
 254 0020 1300     		movs	r3, r2
 255 0022 2178     		ldrb	r1, [r4]
 256              	.LVL17:
 257              	.L13:
  85:simpleserial-glitch.c ****         if (pw[cnt] != passwd[cnt]){
 258              		.loc 1 85 9 is_stmt 1 view .LVU65
 259              		.loc 1 85 12 is_stmt 0 view .LVU66
 260 0024 E85C     		ldrb	r0, [r5, r3]
 261 0026 8446     		mov	ip, r0
 262 0028 F05C     		ldrb	r0, [r6, r3]
 263 002a 8445     		cmp	ip, r0
 264 002c 01D0     		beq	.L12
 265 002e 3A00     		movs	r2, r7
  86:simpleserial-glitch.c ****             passok = 0;
 266              		.loc 1 86 20 view .LVU67
 267 0030 0021     		movs	r1, #0
 268              	.L12:
  84:simpleserial-glitch.c ****         if (pw[cnt] != passwd[cnt]){
 269              		.loc 1 84 27 is_stmt 1 discriminator 2 view .LVU68
  84:simpleserial-glitch.c ****         if (pw[cnt] != passwd[cnt]){
 270              		.loc 1 84 30 is_stmt 0 discriminator 2 view .LVU69
 271 0032 0133     		adds	r3, r3, #1
 272              	.LVL18:
  84:simpleserial-glitch.c ****         if (pw[cnt] != passwd[cnt]){
 273              		.loc 1 84 18 is_stmt 1 discriminator 2 view .LVU70
  84:simpleserial-glitch.c ****         if (pw[cnt] != passwd[cnt]){
 274              		.loc 1 84 5 is_stmt 0 discriminator 2 view .LVU71
 275 0034 052B     		cmp	r3, #5
 276 0036 F5D1     		bne	.L13
 277 0038 002A     		cmp	r2, #0
 278 003a 00D0     		beq	.L14
 279 003c 2170     		strb	r1, [r4]
 280              	.L14:
  87:simpleserial-glitch.c ****         }
  88:simpleserial-glitch.c ****     }
  89:simpleserial-glitch.c **** 
  90:simpleserial-glitch.c ****     trigger_low();
 281              		.loc 1 90 5 is_stmt 1 view .LVU72
 282 003e FFF7FEFF 		bl	trigger_low
 283              	.LVL19:
  91:simpleserial-glitch.c **** 
  92:simpleserial-glitch.c ****     simpleserial_put('r', 1, (uint8_t*)&passok);
 284              		.loc 1 92 5 view .LVU73
 285 0042 2200     		movs	r2, r4
 286 0044 0121     		movs	r1, #1
 287 0046 7220     		movs	r0, #114
 288 0048 FFF7FEFF 		bl	simpleserial_put
 289              	.LVL20:
  93:simpleserial-glitch.c ****     return 0x00;
 290              		.loc 1 93 5 view .LVU74
  94:simpleserial-glitch.c **** }
 291              		.loc 1 94 1 is_stmt 0 view .LVU75
 292 004c 0020     		movs	r0, #0
 293 004e 05B0     		add	sp, sp, #20
 294              		@ sp needed
 295              	.LVL21:
 296              		.loc 1 94 1 view .LVU76
 297 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
 298              	.L20:
 299 0052 C046     		.align	2
 300              	.L19:
 301 0054 00000000 		.word	.LC0
 302              		.cfi_endproc
 303              	.LFE2:
 305              		.section	.text.infinite_loop,"ax",%progbits
 306              		.align	1
 307              		.global	infinite_loop
 308              		.syntax unified
 309              		.code	16
 310              		.thumb_func
 311              		.fpu softvfp
 313              	infinite_loop:
 314              	.LVL22:
 315              	.LFB3:
  95:simpleserial-glitch.c **** 
  96:simpleserial-glitch.c **** #if SS_VER == SS_VER_2_1
  97:simpleserial-glitch.c **** uint8_t infinite_loop(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* in)
  98:simpleserial-glitch.c **** #else
  99:simpleserial-glitch.c **** uint8_t infinite_loop(uint8_t* in, uint8_t len)
 100:simpleserial-glitch.c **** #endif
 101:simpleserial-glitch.c **** {
 316              		.loc 1 101 1 is_stmt 1 view -0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 8
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 102:simpleserial-glitch.c ****     led_ok(1);
 320              		.loc 1 102 14 view .LVU78
 103:simpleserial-glitch.c ****     led_error(0);
 321              		.loc 1 103 17 view .LVU79
 104:simpleserial-glitch.c **** 
 105:simpleserial-glitch.c ****     //Some fake variable
 106:simpleserial-glitch.c ****     volatile uint8_t a = 0;
 322              		.loc 1 106 5 view .LVU80
 101:simpleserial-glitch.c ****     led_ok(1);
 323              		.loc 1 101 1 is_stmt 0 view .LVU81
 324 0000 13B5     		push	{r0, r1, r4, lr}
 325              	.LCFI4:
 326              		.cfi_def_cfa_offset 16
 327              		.cfi_offset 0, -16
 328              		.cfi_offset 1, -12
 329              		.cfi_offset 4, -8
 330              		.cfi_offset 14, -4
 331              		.loc 1 106 22 view .LVU82
 332 0002 6B46     		mov	r3, sp
 333              	.LVL23:
 334              		.loc 1 106 22 view .LVU83
 335 0004 DC1D     		adds	r4, r3, #7
 336 0006 0023     		movs	r3, #0
 337 0008 2370     		strb	r3, [r4]
 107:simpleserial-glitch.c **** 
 108:simpleserial-glitch.c ****     //External trigger logic
 109:simpleserial-glitch.c ****     trigger_high();
 338              		.loc 1 109 5 is_stmt 1 view .LVU84
 339 000a FFF7FEFF 		bl	trigger_high
 340              	.LVL24:
 110:simpleserial-glitch.c ****     trigger_low();
 341              		.loc 1 110 5 view .LVU85
 342 000e FFF7FEFF 		bl	trigger_low
 343              	.LVL25:
 111:simpleserial-glitch.c **** 
 112:simpleserial-glitch.c ****     //Should be an infinite loop
 113:simpleserial-glitch.c ****     while(a != 2){
 344              		.loc 1 113 5 view .LVU86
 345              	.L22:
 114:simpleserial-glitch.c ****     ;
 346              		.loc 1 114 5 discriminator 1 view .LVU87
 113:simpleserial-glitch.c ****     ;
 347              		.loc 1 113 10 discriminator 1 view .LVU88
 113:simpleserial-glitch.c ****     ;
 348              		.loc 1 113 13 is_stmt 0 discriminator 1 view .LVU89
 349 0012 2378     		ldrb	r3, [r4]
 113:simpleserial-glitch.c ****     ;
 350              		.loc 1 113 10 discriminator 1 view .LVU90
 351 0014 022B     		cmp	r3, #2
 352 0016 FCD1     		bne	.L22
 115:simpleserial-glitch.c ****     }
 116:simpleserial-glitch.c **** 
 117:simpleserial-glitch.c ****     led_error(1);
 353              		.loc 1 117 17 is_stmt 1 view .LVU91
 118:simpleserial-glitch.c ****     led_error(1);
 354              		.loc 1 118 17 view .LVU92
 119:simpleserial-glitch.c ****     led_error(1);
 355              		.loc 1 119 17 view .LVU93
 120:simpleserial-glitch.c ****     led_error(1);
 356              		.loc 1 120 17 view .LVU94
 121:simpleserial-glitch.c ****     led_error(1);
 357              		.loc 1 121 17 view .LVU95
 122:simpleserial-glitch.c ****     led_error(1);
 358              		.loc 1 122 17 view .LVU96
 123:simpleserial-glitch.c ****     led_error(1);
 359              		.loc 1 123 17 view .LVU97
 124:simpleserial-glitch.c ****     led_error(1);
 360              		.loc 1 124 17 view .LVU98
 125:simpleserial-glitch.c ****     led_error(1);
 361              		.loc 1 125 17 view .LVU99
 126:simpleserial-glitch.c **** 
 127:simpleserial-glitch.c ****     putch('r');
 362              		.loc 1 127 5 view .LVU100
 128:simpleserial-glitch.c ****     putch('B');
 129:simpleserial-glitch.c ****     putch('R');
 130:simpleserial-glitch.c ****     putch('E');
 131:simpleserial-glitch.c ****     putch('A');
 132:simpleserial-glitch.c ****     putch('K');
 133:simpleserial-glitch.c ****     putch('O');
 134:simpleserial-glitch.c ****     putch('U');
 135:simpleserial-glitch.c ****     putch('T');
 136:simpleserial-glitch.c ****     putch('\n');
 137:simpleserial-glitch.c **** 
 138:simpleserial-glitch.c ****     led_error(1);
 139:simpleserial-glitch.c ****     led_error(1);
 140:simpleserial-glitch.c ****     led_error(1);
 141:simpleserial-glitch.c ****     led_error(1);
 142:simpleserial-glitch.c ****     led_error(1);
 143:simpleserial-glitch.c ****     led_error(1);
 144:simpleserial-glitch.c ****     led_error(1);
 145:simpleserial-glitch.c ****     led_error(1);
 146:simpleserial-glitch.c **** 
 147:simpleserial-glitch.c ****     return 0;
 148:simpleserial-glitch.c **** }
 363              		.loc 1 148 1 is_stmt 0 view .LVU101
 364              		@ sp needed
 127:simpleserial-glitch.c ****     putch('B');
 365              		.loc 1 127 5 view .LVU102
 366 0018 7220     		movs	r0, #114
 367 001a FFF7FEFF 		bl	putch
 368              	.LVL26:
 128:simpleserial-glitch.c ****     putch('B');
 369              		.loc 1 128 5 is_stmt 1 view .LVU103
 370 001e 4220     		movs	r0, #66
 371 0020 FFF7FEFF 		bl	putch
 372              	.LVL27:
 129:simpleserial-glitch.c ****     putch('E');
 373              		.loc 1 129 5 view .LVU104
 374 0024 5220     		movs	r0, #82
 375 0026 FFF7FEFF 		bl	putch
 376              	.LVL28:
 130:simpleserial-glitch.c ****     putch('A');
 377              		.loc 1 130 5 view .LVU105
 378 002a 4520     		movs	r0, #69
 379 002c FFF7FEFF 		bl	putch
 380              	.LVL29:
 131:simpleserial-glitch.c ****     putch('K');
 381              		.loc 1 131 5 view .LVU106
 382 0030 4120     		movs	r0, #65
 383 0032 FFF7FEFF 		bl	putch
 384              	.LVL30:
 132:simpleserial-glitch.c ****     putch('O');
 385              		.loc 1 132 5 view .LVU107
 386 0036 4B20     		movs	r0, #75
 387 0038 FFF7FEFF 		bl	putch
 388              	.LVL31:
 133:simpleserial-glitch.c ****     putch('U');
 389              		.loc 1 133 5 view .LVU108
 390 003c 4F20     		movs	r0, #79
 391 003e FFF7FEFF 		bl	putch
 392              	.LVL32:
 134:simpleserial-glitch.c ****     putch('T');
 393              		.loc 1 134 5 view .LVU109
 394 0042 5520     		movs	r0, #85
 395 0044 FFF7FEFF 		bl	putch
 396              	.LVL33:
 135:simpleserial-glitch.c ****     putch('\n');
 397              		.loc 1 135 5 view .LVU110
 398 0048 5420     		movs	r0, #84
 399 004a FFF7FEFF 		bl	putch
 400              	.LVL34:
 136:simpleserial-glitch.c **** 
 401              		.loc 1 136 5 view .LVU111
 402 004e 0A20     		movs	r0, #10
 403 0050 FFF7FEFF 		bl	putch
 404              	.LVL35:
 138:simpleserial-glitch.c ****     led_error(1);
 405              		.loc 1 138 17 view .LVU112
 139:simpleserial-glitch.c ****     led_error(1);
 406              		.loc 1 139 17 view .LVU113
 140:simpleserial-glitch.c ****     led_error(1);
 407              		.loc 1 140 17 view .LVU114
 141:simpleserial-glitch.c ****     led_error(1);
 408              		.loc 1 141 17 view .LVU115
 142:simpleserial-glitch.c ****     led_error(1);
 409              		.loc 1 142 17 view .LVU116
 143:simpleserial-glitch.c ****     led_error(1);
 410              		.loc 1 143 17 view .LVU117
 144:simpleserial-glitch.c ****     led_error(1);
 411              		.loc 1 144 17 view .LVU118
 145:simpleserial-glitch.c **** 
 412              		.loc 1 145 17 view .LVU119
 147:simpleserial-glitch.c **** }
 413              		.loc 1 147 5 view .LVU120
 414              		.loc 1 148 1 is_stmt 0 view .LVU121
 415 0054 0020     		movs	r0, #0
 416 0056 16BD     		pop	{r1, r2, r4, pc}
 417              		.cfi_endproc
 418              	.LFE3:
 420              		.section	.text.startup.main,"ax",%progbits
 421              		.align	1
 422              		.global	main
 423              		.syntax unified
 424              		.code	16
 425              		.thumb_func
 426              		.fpu softvfp
 428              	main:
 429              	.LFB4:
 149:simpleserial-glitch.c **** 
 150:simpleserial-glitch.c **** int main(void)
 151:simpleserial-glitch.c **** {
 430              		.loc 1 151 1 is_stmt 1 view -0
 431              		.cfi_startproc
 432              		@ Volatile: function does not return.
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 152:simpleserial-glitch.c ****     platform_init();
 435              		.loc 1 152 5 view .LVU123
 151:simpleserial-glitch.c ****     platform_init();
 436              		.loc 1 151 1 is_stmt 0 view .LVU124
 437 0000 10B5     		push	{r4, lr}
 438              	.LCFI5:
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 4, -8
 441              		.cfi_offset 14, -4
 442              		.loc 1 152 5 view .LVU125
 443 0002 FFF7FEFF 		bl	platform_init
 444              	.LVL36:
 153:simpleserial-glitch.c ****     init_uart();
 445              		.loc 1 153 5 is_stmt 1 view .LVU126
 446 0006 FFF7FEFF 		bl	init_uart
 447              	.LVL37:
 154:simpleserial-glitch.c ****     trigger_setup();
 448              		.loc 1 154 5 view .LVU127
 449 000a FFF7FEFF 		bl	trigger_setup
 450              	.LVL38:
 155:simpleserial-glitch.c **** 
 156:simpleserial-glitch.c ****     /* Device reset detected */
 157:simpleserial-glitch.c ****     putch('r');
 451              		.loc 1 157 5 view .LVU128
 452 000e 7220     		movs	r0, #114
 453 0010 FFF7FEFF 		bl	putch
 454              	.LVL39:
 158:simpleserial-glitch.c ****     putch('R');
 455              		.loc 1 158 5 view .LVU129
 456 0014 5220     		movs	r0, #82
 457 0016 FFF7FEFF 		bl	putch
 458              	.LVL40:
 159:simpleserial-glitch.c ****     putch('E');
 459              		.loc 1 159 5 view .LVU130
 460 001a 4520     		movs	r0, #69
 461 001c FFF7FEFF 		bl	putch
 462              	.LVL41:
 160:simpleserial-glitch.c ****     putch('S');
 463              		.loc 1 160 5 view .LVU131
 464 0020 5320     		movs	r0, #83
 465 0022 FFF7FEFF 		bl	putch
 466              	.LVL42:
 161:simpleserial-glitch.c ****     putch('E');
 467              		.loc 1 161 5 view .LVU132
 468 0026 4520     		movs	r0, #69
 469 0028 FFF7FEFF 		bl	putch
 470              	.LVL43:
 162:simpleserial-glitch.c ****     putch('T');
 471              		.loc 1 162 5 view .LVU133
 472 002c 5420     		movs	r0, #84
 473 002e FFF7FEFF 		bl	putch
 474              	.LVL44:
 163:simpleserial-glitch.c ****     putch(' ');
 475              		.loc 1 163 5 view .LVU134
 476 0032 2020     		movs	r0, #32
 477 0034 FFF7FEFF 		bl	putch
 478              	.LVL45:
 164:simpleserial-glitch.c ****     putch(' ');
 479              		.loc 1 164 5 view .LVU135
 480 0038 2020     		movs	r0, #32
 481 003a FFF7FEFF 		bl	putch
 482              	.LVL46:
 165:simpleserial-glitch.c ****     putch(' ');
 483              		.loc 1 165 5 view .LVU136
 484 003e 2020     		movs	r0, #32
 485 0040 FFF7FEFF 		bl	putch
 486              	.LVL47:
 166:simpleserial-glitch.c ****     putch('\n');
 487              		.loc 1 166 5 view .LVU137
 488 0044 0A20     		movs	r0, #10
 489 0046 FFF7FEFF 		bl	putch
 490              	.LVL48:
 167:simpleserial-glitch.c **** 
 168:simpleserial-glitch.c ****     simpleserial_init();
 491              		.loc 1 168 5 view .LVU138
 492 004a FFF7FEFF 		bl	simpleserial_init
 493              	.LVL49:
 169:simpleserial-glitch.c ****     simpleserial_addcmd('g', 0, glitch_loop);
 494              		.loc 1 169 5 view .LVU139
 495 004e 0021     		movs	r1, #0
 496 0050 0A4A     		ldr	r2, .L26
 497 0052 6720     		movs	r0, #103
 498 0054 FFF7FEFF 		bl	simpleserial_addcmd
 499              	.LVL50:
 170:simpleserial-glitch.c ****     simpleserial_addcmd('c', 1, glitch_comparison);
 500              		.loc 1 170 5 view .LVU140
 501 0058 0121     		movs	r1, #1
 502 005a 094A     		ldr	r2, .L26+4
 503 005c 6320     		movs	r0, #99
 504 005e FFF7FEFF 		bl	simpleserial_addcmd
 505              	.LVL51:
 171:simpleserial-glitch.c ****     #if SS_VER == SS_VER_2_1
 172:simpleserial-glitch.c ****     simpleserial_addcmd(0x01, 5, password);
 506              		.loc 1 172 5 view .LVU141
 507 0062 0521     		movs	r1, #5
 508 0064 074A     		ldr	r2, .L26+8
 509 0066 0120     		movs	r0, #1
 510 0068 FFF7FEFF 		bl	simpleserial_addcmd
 511              	.LVL52:
 173:simpleserial-glitch.c ****     #else
 174:simpleserial-glitch.c ****     simpleserial_addcmd('p', 5, password);
 175:simpleserial-glitch.c ****     #endif
 176:simpleserial-glitch.c ****     simpleserial_addcmd('i', 0, infinite_loop);
 512              		.loc 1 176 5 view .LVU142
 513 006c 0021     		movs	r1, #0
 514 006e 6920     		movs	r0, #105
 515 0070 054A     		ldr	r2, .L26+12
 516 0072 FFF7FEFF 		bl	simpleserial_addcmd
 517              	.LVL53:
 518              	.L25:
 177:simpleserial-glitch.c ****     while(1)
 519              		.loc 1 177 5 discriminator 1 view .LVU143
 178:simpleserial-glitch.c ****         simpleserial_get();
 520              		.loc 1 178 9 discriminator 1 view .LVU144
 521 0076 FFF7FEFF 		bl	simpleserial_get
 522              	.LVL54:
 177:simpleserial-glitch.c ****     while(1)
 523              		.loc 1 177 10 discriminator 1 view .LVU145
 524 007a FCE7     		b	.L25
 525              	.L27:
 526              		.align	2
 527              	.L26:
 528 007c 00000000 		.word	glitch_loop
 529 0080 00000000 		.word	glitch_comparison
 530 0084 00000000 		.word	password
 531 0088 00000000 		.word	infinite_loop
 532              		.cfi_endproc
 533              	.LFE4:
 535              		.text
 536              	.Letext0:
 537              		.file 2 "c:\\progra~1\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\machine\\_def
 538              		.file 3 "c:\\progra~1\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\_stdint.
 539              		.file 4 ".././hal/hal.h"
 540              		.file 5 ".././hal/stm32f0/stm32f0_hal.h"
 541              		.file 6 ".././simpleserial/simpleserial.h"
 542              		.file 7 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 simpleserial-glitch.c
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:16     .text.glitch_loop:00000000 $t
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:24     .text.glitch_loop:00000000 glitch_loop
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:123    .text.glitch_loop:0000005c $d
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:128    .text.glitch_comparison:00000000 $t
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:135    .text.glitch_comparison:00000000 glitch_comparison
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:197    .text.password:00000000 $t
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:204    .text.password:00000000 password
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:301    .text.password:00000054 $d
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:306    .text.infinite_loop:00000000 $t
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:313    .text.infinite_loop:00000000 infinite_loop
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:421    .text.startup.main:00000000 $t
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:428    .text.startup.main:00000000 main
C:\Users\mjzeec\AppData\Local\Temp\ccgshjcQ.s:528    .text.startup.main:0000007c $d

UNDEFINED SYMBOLS
trigger_high
trigger_low
simpleserial_put
memcpy
putch
platform_init
init_uart
trigger_setup
simpleserial_init
simpleserial_addcmd
simpleserial_get
