
basic-passwdcheck-CWNANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800109c  0800109c  0001109c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011bc  080011bc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080011bc  080011bc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011bc  080011bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011bc  080011bc  000111bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011c0  080011c0  000111c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080011c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000004  080011c8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000094  080011c8  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028cd  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000712  00000000  00000000  000228f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000015ce  00000000  00000000  0002300b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  000245d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000248  00000000  00000000  000246f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000019ff  00000000  00000000  00024939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000c7e  00000000  00000000  00026338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  00026fb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000384  00000000  00000000  00027004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00027388  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000052  00000000  00000000  000274cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c06      	ldr	r4, [pc, #24]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d107      	bne.n	80001a2 <__do_global_dtors_aux+0x1a>
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <__do_global_dtors_aux+0x16>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x24>)
 800019a:	e000      	b.n	800019e <__do_global_dtors_aux+0x16>
 800019c:	bf00      	nop
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001084 	.word	0x08001084

080001b0 <frame_dummy>:
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <frame_dummy+0x14>)
 80001b2:	b510      	push	{r4, lr}
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <frame_dummy+0x10>
 80001b8:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	4804      	ldr	r0, [pc, #16]	; (80001cc <frame_dummy+0x1c>)
 80001bc:	e000      	b.n	80001c0 <frame_dummy+0x10>
 80001be:	bf00      	nop
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	46c0      	nop			; (mov r8, r8)
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000008 	.word	0x20000008
 80001cc:	08001084 	.word	0x08001084

080001d0 <__gnu_thumb1_case_uqi>:
 80001d0:	b402      	push	{r1}
 80001d2:	4671      	mov	r1, lr
 80001d4:	0849      	lsrs	r1, r1, #1
 80001d6:	0049      	lsls	r1, r1, #1
 80001d8:	5c09      	ldrb	r1, [r1, r0]
 80001da:	0049      	lsls	r1, r1, #1
 80001dc:	448e      	add	lr, r1
 80001de:	bc02      	pop	{r1}
 80001e0:	4770      	bx	lr
 80001e2:	46c0      	nop			; (mov r8, r8)

080001e4 <__udivsi3>:
 80001e4:	2200      	movs	r2, #0
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d374      	bcc.n	80002d6 <__udivsi3+0xf2>
 80001ec:	0903      	lsrs	r3, r0, #4
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d35f      	bcc.n	80002b2 <__udivsi3+0xce>
 80001f2:	0a03      	lsrs	r3, r0, #8
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d344      	bcc.n	8000282 <__udivsi3+0x9e>
 80001f8:	0b03      	lsrs	r3, r0, #12
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d328      	bcc.n	8000250 <__udivsi3+0x6c>
 80001fe:	0c03      	lsrs	r3, r0, #16
 8000200:	428b      	cmp	r3, r1
 8000202:	d30d      	bcc.n	8000220 <__udivsi3+0x3c>
 8000204:	22ff      	movs	r2, #255	; 0xff
 8000206:	0209      	lsls	r1, r1, #8
 8000208:	ba12      	rev	r2, r2
 800020a:	0c03      	lsrs	r3, r0, #16
 800020c:	428b      	cmp	r3, r1
 800020e:	d302      	bcc.n	8000216 <__udivsi3+0x32>
 8000210:	1212      	asrs	r2, r2, #8
 8000212:	0209      	lsls	r1, r1, #8
 8000214:	d065      	beq.n	80002e2 <__udivsi3+0xfe>
 8000216:	0b03      	lsrs	r3, r0, #12
 8000218:	428b      	cmp	r3, r1
 800021a:	d319      	bcc.n	8000250 <__udivsi3+0x6c>
 800021c:	e000      	b.n	8000220 <__udivsi3+0x3c>
 800021e:	0a09      	lsrs	r1, r1, #8
 8000220:	0bc3      	lsrs	r3, r0, #15
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x46>
 8000226:	03cb      	lsls	r3, r1, #15
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	0b83      	lsrs	r3, r0, #14
 800022e:	428b      	cmp	r3, r1
 8000230:	d301      	bcc.n	8000236 <__udivsi3+0x52>
 8000232:	038b      	lsls	r3, r1, #14
 8000234:	1ac0      	subs	r0, r0, r3
 8000236:	4152      	adcs	r2, r2
 8000238:	0b43      	lsrs	r3, r0, #13
 800023a:	428b      	cmp	r3, r1
 800023c:	d301      	bcc.n	8000242 <__udivsi3+0x5e>
 800023e:	034b      	lsls	r3, r1, #13
 8000240:	1ac0      	subs	r0, r0, r3
 8000242:	4152      	adcs	r2, r2
 8000244:	0b03      	lsrs	r3, r0, #12
 8000246:	428b      	cmp	r3, r1
 8000248:	d301      	bcc.n	800024e <__udivsi3+0x6a>
 800024a:	030b      	lsls	r3, r1, #12
 800024c:	1ac0      	subs	r0, r0, r3
 800024e:	4152      	adcs	r2, r2
 8000250:	0ac3      	lsrs	r3, r0, #11
 8000252:	428b      	cmp	r3, r1
 8000254:	d301      	bcc.n	800025a <__udivsi3+0x76>
 8000256:	02cb      	lsls	r3, r1, #11
 8000258:	1ac0      	subs	r0, r0, r3
 800025a:	4152      	adcs	r2, r2
 800025c:	0a83      	lsrs	r3, r0, #10
 800025e:	428b      	cmp	r3, r1
 8000260:	d301      	bcc.n	8000266 <__udivsi3+0x82>
 8000262:	028b      	lsls	r3, r1, #10
 8000264:	1ac0      	subs	r0, r0, r3
 8000266:	4152      	adcs	r2, r2
 8000268:	0a43      	lsrs	r3, r0, #9
 800026a:	428b      	cmp	r3, r1
 800026c:	d301      	bcc.n	8000272 <__udivsi3+0x8e>
 800026e:	024b      	lsls	r3, r1, #9
 8000270:	1ac0      	subs	r0, r0, r3
 8000272:	4152      	adcs	r2, r2
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d301      	bcc.n	800027e <__udivsi3+0x9a>
 800027a:	020b      	lsls	r3, r1, #8
 800027c:	1ac0      	subs	r0, r0, r3
 800027e:	4152      	adcs	r2, r2
 8000280:	d2cd      	bcs.n	800021e <__udivsi3+0x3a>
 8000282:	09c3      	lsrs	r3, r0, #7
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__udivsi3+0xa8>
 8000288:	01cb      	lsls	r3, r1, #7
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0983      	lsrs	r3, r0, #6
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__udivsi3+0xb4>
 8000294:	018b      	lsls	r3, r1, #6
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0943      	lsrs	r3, r0, #5
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__udivsi3+0xc0>
 80002a0:	014b      	lsls	r3, r1, #5
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0903      	lsrs	r3, r0, #4
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__udivsi3+0xcc>
 80002ac:	010b      	lsls	r3, r1, #4
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	08c3      	lsrs	r3, r0, #3
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__udivsi3+0xd8>
 80002b8:	00cb      	lsls	r3, r1, #3
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0883      	lsrs	r3, r0, #2
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__udivsi3+0xe4>
 80002c4:	008b      	lsls	r3, r1, #2
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0843      	lsrs	r3, r0, #1
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__udivsi3+0xf0>
 80002d0:	004b      	lsls	r3, r1, #1
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	1a41      	subs	r1, r0, r1
 80002d8:	d200      	bcs.n	80002dc <__udivsi3+0xf8>
 80002da:	4601      	mov	r1, r0
 80002dc:	4152      	adcs	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	4770      	bx	lr
 80002e2:	e7ff      	b.n	80002e4 <__udivsi3+0x100>
 80002e4:	b501      	push	{r0, lr}
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 f806 	bl	80002f8 <__aeabi_idiv0>
 80002ec:	bd02      	pop	{r1, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)

080002f0 <__aeabi_uidivmod>:
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d0f7      	beq.n	80002e4 <__udivsi3+0x100>
 80002f4:	e776      	b.n	80001e4 <__udivsi3>
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_idiv0>:
 80002f8:	4770      	bx	lr
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <delay_2_ms>:
  } while (*++c);
}

static void delay_2_ms()
{
  for (volatile unsigned int i=0; i < 0xfff; i++ ){
 80002fc:	2300      	movs	r3, #0
{
 80002fe:	b082      	sub	sp, #8
  for (volatile unsigned int i=0; i < 0xfff; i++ ){
 8000300:	4a05      	ldr	r2, [pc, #20]	; (8000318 <delay_2_ms+0x1c>)
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	9b01      	ldr	r3, [sp, #4]
 8000306:	4293      	cmp	r3, r2
 8000308:	d901      	bls.n	800030e <delay_2_ms+0x12>
    ;
  }
}
 800030a:	b002      	add	sp, #8
 800030c:	4770      	bx	lr
  for (volatile unsigned int i=0; i < 0xfff; i++ ){
 800030e:	9b01      	ldr	r3, [sp, #4]
 8000310:	3301      	adds	r3, #1
 8000312:	9301      	str	r3, [sp, #4]
 8000314:	e7f6      	b.n	8000304 <delay_2_ms+0x8>
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	00000ffe 	.word	0x00000ffe

0800031c <my_puts>:
{
 800031c:	b510      	push	{r4, lr}
 800031e:	0004      	movs	r4, r0
    putch(*c);
 8000320:	7820      	ldrb	r0, [r4, #0]
  } while (*++c);
 8000322:	3401      	adds	r4, #1
    putch(*c);
 8000324:	f000 f95a 	bl	80005dc <putch>
  } while (*++c);
 8000328:	7823      	ldrb	r3, [r4, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d1f8      	bne.n	8000320 <my_puts+0x4>
}
 800032e:	bd10      	pop	{r4, pc}

08000330 <my_read>:

void my_read(char *buf, int len)
{
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	0004      	movs	r4, r0
 8000334:	000e      	movs	r6, r1
  for(int i = 0; i < len; i++) {
 8000336:	0005      	movs	r5, r0
 8000338:	1b2b      	subs	r3, r5, r4
 800033a:	429e      	cmp	r6, r3
 800033c:	dc04      	bgt.n	8000348 <my_read+0x18>
    if (buf[i] == '\n') {
      buf[i] = '\0';
      return;
    }
  }
  buf[len - 1] = '\0';
 800033e:	2300      	movs	r3, #0
 8000340:	19a4      	adds	r4, r4, r6
 8000342:	3c01      	subs	r4, #1
 8000344:	7023      	strb	r3, [r4, #0]
 8000346:	e00a      	b.n	800035e <my_read+0x2e>
    while (buf[i] = getch(), buf[i] == '\0');
 8000348:	f000 f930 	bl	80005ac <getch>
 800034c:	002f      	movs	r7, r5
 800034e:	7028      	strb	r0, [r5, #0]
 8000350:	2800      	cmp	r0, #0
 8000352:	d0f9      	beq.n	8000348 <my_read+0x18>
    if (buf[i] == '\n') {
 8000354:	3501      	adds	r5, #1
 8000356:	280a      	cmp	r0, #10
 8000358:	d1ee      	bne.n	8000338 <my_read+0x8>
      buf[i] = '\0';
 800035a:	2300      	movs	r3, #0
 800035c:	703b      	strb	r3, [r7, #0]
}
 800035e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000360 <main>:

int main(void)
  {
 8000360:	b530      	push	{r4, r5, lr}
 8000362:	b08d      	sub	sp, #52	; 0x34
    platform_init();
  init_uart();
  trigger_setup();

    char passwd[32];
    char correct_passwd[] = "h0px3";
 8000364:	ac02      	add	r4, sp, #8
    platform_init();
 8000366:	f000 f865 	bl	8000434 <platform_init>
  init_uart();
 800036a:	f000 f88f 	bl	800048c <init_uart>
  trigger_setup();
 800036e:	f000 f8cd 	bl	800050c <trigger_setup>
    char correct_passwd[] = "h0px3";
 8000372:	2206      	movs	r2, #6
 8000374:	4924      	ldr	r1, [pc, #144]	; (8000408 <main+0xa8>)
 8000376:	0020      	movs	r0, r4
 8000378:	f000 fe7a 	bl	8001070 <memcpy>

  while(1){

        my_puts("*****Safe-o-matic 3000 Booting...\n");
 800037c:	4823      	ldr	r0, [pc, #140]	; (800040c <main+0xac>)
 800037e:	f7ff ffcd 	bl	800031c <my_puts>
        //Print some fancy-sounding stuff so that attackers
        //will get scared and leave us alone
        my_puts("Aligning bits........[DONE]\n");
 8000382:	4823      	ldr	r0, [pc, #140]	; (8000410 <main+0xb0>)
 8000384:	f7ff ffca 	bl	800031c <my_puts>
        delay_2_ms();
 8000388:	f7ff ffb8 	bl	80002fc <delay_2_ms>
        my_puts("Checking Cesium RNG..[DONE]\n");
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <main+0xb4>)
 800038e:	f7ff ffc5 	bl	800031c <my_puts>
        delay_2_ms();
 8000392:	f7ff ffb3 	bl	80002fc <delay_2_ms>
        my_puts("Masquerading flash...[DONE]\n");
 8000396:	4820      	ldr	r0, [pc, #128]	; (8000418 <main+0xb8>)
 8000398:	f7ff ffc0 	bl	800031c <my_puts>
        delay_2_ms();
 800039c:	f7ff ffae 	bl	80002fc <delay_2_ms>
        my_puts("Decrypting database..[DONE]\n");
 80003a0:	481e      	ldr	r0, [pc, #120]	; (800041c <main+0xbc>)
 80003a2:	f7ff ffbb 	bl	800031c <my_puts>
        delay_2_ms();
 80003a6:	f7ff ffa9 	bl	80002fc <delay_2_ms>
        my_puts("\n\n");
 80003aa:	481d      	ldr	r0, [pc, #116]	; (8000420 <main+0xc0>)
 80003ac:	f7ff ffb6 	bl	800031c <my_puts>

        //Give them one last warning
        my_puts("WARNING: UNAUTHORIZED ACCESS WILL BE PUNISHED\n");
 80003b0:	481c      	ldr	r0, [pc, #112]	; (8000424 <main+0xc4>)
 80003b2:	f7ff ffb3 	bl	800031c <my_puts>

        trigger_low();

        //Get password
        my_puts("Please enter password to continue: ");
        my_read(passwd, 32);
 80003b6:	ad04      	add	r5, sp, #16
        trigger_low();
 80003b8:	f000 f8f0 	bl	800059c <trigger_low>
        my_puts("Please enter password to continue: ");
 80003bc:	481a      	ldr	r0, [pc, #104]	; (8000428 <main+0xc8>)
 80003be:	f7ff ffad 	bl	800031c <my_puts>
        my_read(passwd, 32);
 80003c2:	2120      	movs	r1, #32
 80003c4:	0028      	movs	r0, r5
 80003c6:	f7ff ffb3 	bl	8000330 <my_read>

        uint8_t passbad = 0;

        trigger_high();
 80003ca:	f000 f8df 	bl	800058c <trigger_high>
 80003ce:	2300      	movs	r3, #0

        for(uint8_t i = 0; i < sizeof(correct_passwd); i++){
            if (correct_passwd[i] != passwd[i]){
 80003d0:	5ce1      	ldrb	r1, [r4, r3]
 80003d2:	5cea      	ldrb	r2, [r5, r3]
 80003d4:	4291      	cmp	r1, r2
 80003d6:	d114      	bne.n	8000402 <main+0xa2>
        for(uint8_t i = 0; i < sizeof(correct_passwd); i++){
 80003d8:	3301      	adds	r3, #1
 80003da:	2b06      	cmp	r3, #6
 80003dc:	d1f8      	bne.n	80003d0 <main+0x70>
            delay_2_ms();
            delay_2_ms();
            my_puts("PASSWORD FAIL\n");
            led_error(1);
        } else {
            my_puts("Access granted, Welcome!\n");
 80003de:	4813      	ldr	r0, [pc, #76]	; (800042c <main+0xcc>)
 80003e0:	f7ff ff9c 	bl	800031c <my_puts>
 80003e4:	e00c      	b.n	8000400 <main+0xa0>
            for(volatile int i = 0; i < wait; i++){
 80003e6:	9b01      	ldr	r3, [sp, #4]
 80003e8:	3301      	adds	r3, #1
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	9b01      	ldr	r3, [sp, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	ddf9      	ble.n	80003e6 <main+0x86>
            delay_2_ms();
 80003f2:	f7ff ff83 	bl	80002fc <delay_2_ms>
            delay_2_ms();
 80003f6:	f7ff ff81 	bl	80002fc <delay_2_ms>
            my_puts("PASSWORD FAIL\n");
 80003fa:	480d      	ldr	r0, [pc, #52]	; (8000430 <main+0xd0>)
 80003fc:	f7ff ff8e 	bl	800031c <my_puts>
            led_ok(1);
        }

        //All done;
        while(1);
 8000400:	e7fe      	b.n	8000400 <main+0xa0>
            for(volatile int i = 0; i < wait; i++){
 8000402:	2300      	movs	r3, #0
 8000404:	e7f1      	b.n	80003ea <main+0x8a>
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	080011b5 	.word	0x080011b5
 800040c:	0800109f 	.word	0x0800109f
 8000410:	080010c2 	.word	0x080010c2
 8000414:	080010df 	.word	0x080010df
 8000418:	080010fc 	.word	0x080010fc
 800041c:	08001119 	.word	0x08001119
 8000420:	08001136 	.word	0x08001136
 8000424:	08001139 	.word	0x08001139
 8000428:	08001168 	.word	0x08001168
 800042c:	0800119b 	.word	0x0800119b
 8000430:	0800118c 	.word	0x0800118c

08000434 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_2;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000436:	2790      	movs	r7, #144	; 0x90
	GpioInit.Pull      = GPIO_NOPULL;
 8000438:	2400      	movs	r4, #0
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800043a:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800043c:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_2;
 800043e:	2304      	movs	r3, #4
{
 8000440:	b097      	sub	sp, #92	; 0x5c
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000442:	05ff      	lsls	r7, r7, #23
 8000444:	0038      	movs	r0, r7
 8000446:	a905      	add	r1, sp, #20
	GpioInit.Pin       = GPIO_PIN_2;
 8000448:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800044a:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 800044c:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800044e:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000450:	f000 fb46 	bl	8000ae0 <HAL_GPIO_Init>
    
	GpioInit.Pin       = GPIO_PIN_4;
 8000454:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000456:	a905      	add	r1, sp, #20
 8000458:	0038      	movs	r0, r7
	GpioInit.Pin       = GPIO_PIN_4;
 800045a:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800045c:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 800045e:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000460:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000462:	f000 fb3d 	bl	8000ae0 <HAL_GPIO_Init>
  uint32_t flash_latency = 0;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000466:	2305      	movs	r3, #5
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000468:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800046a:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 800046c:	960a      	str	r6, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 800046e:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000470:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000472:	f000 f8c9 	bl	8000608 <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000476:	2307      	movs	r3, #7
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000478:	0021      	movs	r1, r4
 800047a:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800047c:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800047e:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000480:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000482:	9404      	str	r4, [sp, #16]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000484:	f000 faa2 	bl	80009cc <HAL_RCC_ClockConfig>
#endif
}
 8000488:	b017      	add	sp, #92	; 0x5c
 800048a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800048c <init_uart>:

void init_uart(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	2180      	movs	r1, #128	; 0x80
{
 800048e:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4c1b      	ldr	r4, [pc, #108]	; (8000500 <init_uart+0x74>)
 8000492:	0289      	lsls	r1, r1, #10
 8000494:	6962      	ldr	r2, [r4, #20]
{
 8000496:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	430a      	orrs	r2, r1
 800049a:	6162      	str	r2, [r4, #20]
 800049c:	6963      	ldr	r3, [r4, #20]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	GpioInit.Alternate = GPIO_AF1_USART1;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800049e:	2090      	movs	r0, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	400b      	ands	r3, r1
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	9b01      	ldr	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80004a6:	23c0      	movs	r3, #192	; 0xc0
 80004a8:	00db      	lsls	r3, r3, #3
	GpioInit.Pull      = GPIO_PULLUP;
 80004aa:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80004ac:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80004ae:	9303      	str	r3, [sp, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 80004b0:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80004b2:	a903      	add	r1, sp, #12
 80004b4:	05c0      	lsls	r0, r0, #23
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 80004b6:	9304      	str	r3, [sp, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 80004b8:	9505      	str	r5, [sp, #20]
	GpioInit.Alternate = GPIO_AF1_USART1;
 80004ba:	9507      	str	r5, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80004bc:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80004be:	f000 fb0f 	bl	8000ae0 <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 80004c2:	2180      	movs	r1, #128	; 0x80
 80004c4:	69a2      	ldr	r2, [r4, #24]
 80004c6:	01c9      	lsls	r1, r1, #7
 80004c8:	430a      	orrs	r2, r1
 80004ca:	61a2      	str	r2, [r4, #24]
 80004cc:	69a3      	ldr	r3, [r4, #24]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
	UartHandle.Instance        = USART1;
 80004ce:	480d      	ldr	r0, [pc, #52]	; (8000504 <init_uart+0x78>)
	__HAL_RCC_USART1_CLK_ENABLE();
 80004d0:	400b      	ands	r3, r1
 80004d2:	9302      	str	r3, [sp, #8]
 80004d4:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80004d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80004d8:	43b3      	bics	r3, r6
 80004da:	431d      	orrs	r5, r3
	UartHandle.Instance        = USART1;
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <init_uart+0x7c>)
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80004de:	6325      	str	r5, [r4, #48]	; 0x30
	UartHandle.Instance        = USART1;
 80004e0:	6003      	str	r3, [r0, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 80004e2:	23e1      	movs	r3, #225	; 0xe1
 80004e4:	029b      	lsls	r3, r3, #10
 80004e6:	6043      	str	r3, [r0, #4]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80004e8:	2300      	movs	r3, #0
 80004ea:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80004ec:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80004ee:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80004f0:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80004f2:	330c      	adds	r3, #12
 80004f4:	6143      	str	r3, [r0, #20]
	HAL_UART_Init(&UartHandle);
 80004f6:	f000 fc5d 	bl	8000db4 <HAL_UART_Init>
}
 80004fa:	b008      	add	sp, #32
 80004fc:	bd70      	pop	{r4, r5, r6, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40021000 	.word	0x40021000
 8000504:	20000020 	.word	0x20000020
 8000508:	40013800 	.word	0x40013800

0800050c <trigger_setup>:

void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	2080      	movs	r0, #128	; 0x80
 800050e:	4a1e      	ldr	r2, [pc, #120]	; (8000588 <trigger_setup+0x7c>)
{
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	6951      	ldr	r1, [r2, #20]
 8000514:	0280      	lsls	r0, r0, #10
 8000516:	4301      	orrs	r1, r0
 8000518:	6151      	str	r1, [r2, #20]
 800051a:	6953      	ldr	r3, [r2, #20]
{
 800051c:	b087      	sub	sp, #28
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4003      	ands	r3, r0
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_7;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000520:	2490      	movs	r4, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	9300      	str	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000524:	2501      	movs	r5, #1
	GpioInit.Pull      = GPIO_NOPULL;
 8000526:	2600      	movs	r6, #0
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000528:	2703      	movs	r7, #3
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Pin       = GPIO_PIN_7;
 800052c:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800052e:	05e4      	lsls	r4, r4, #23
 8000530:	0020      	movs	r0, r4
 8000532:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_7;
 8000534:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000536:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8000538:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800053a:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800053c:	f000 fad0 	bl	8000ae0 <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_4;
 8000540:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000542:	0020      	movs	r0, r4
 8000544:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_4;
 8000546:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000548:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 800054a:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800054c:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800054e:	f000 fac7 	bl	8000ae0 <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_2;
 8000552:	2304      	movs	r3, #4
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000554:	0020      	movs	r0, r4
 8000556:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_2;
 8000558:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800055a:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 800055c:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800055e:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000560:	f000 fabe 	bl	8000ae0 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000564:	0032      	movs	r2, r6
 8000566:	0020      	movs	r0, r4
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	f000 fb6b 	bl	8000c44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 800056e:	002a      	movs	r2, r5
 8000570:	0020      	movs	r0, r4
 8000572:	2110      	movs	r1, #16
 8000574:	f000 fb66 	bl	8000c44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000578:	002a      	movs	r2, r5
 800057a:	2104      	movs	r1, #4
 800057c:	0020      	movs	r0, r4
 800057e:	f000 fb61 	bl	8000c44 <HAL_GPIO_WritePin>
}
 8000582:	b007      	add	sp, #28
 8000584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	40021000 	.word	0x40021000

0800058c <trigger_high>:

void trigger_high(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800058c:	2090      	movs	r0, #144	; 0x90
{
 800058e:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	05c0      	lsls	r0, r0, #23
 8000596:	f000 fb55 	bl	8000c44 <HAL_GPIO_WritePin>
}
 800059a:	bd10      	pop	{r4, pc}

0800059c <trigger_low>:

void trigger_low(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800059c:	2090      	movs	r0, #144	; 0x90
{
 800059e:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	05c0      	lsls	r0, r0, #23
 80005a6:	f000 fb4d 	bl	8000c44 <HAL_GPIO_WritePin>
}   
 80005aa:	bd10      	pop	{r4, pc}

080005ac <getch>:

char getch(void)
{
 80005ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t d;
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80005ae:	2508      	movs	r5, #8
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
 80005b0:	466b      	mov	r3, sp
 80005b2:	1ddc      	adds	r4, r3, #7
 80005b4:	2201      	movs	r2, #1
 80005b6:	2332      	movs	r3, #50	; 0x32
 80005b8:	0021      	movs	r1, r4
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <getch+0x28>)
 80005bc:	f000 fc2c 	bl	8000e18 <HAL_UART_Receive>
 80005c0:	2800      	cmp	r0, #0
 80005c2:	d101      	bne.n	80005c8 <getch+0x1c>
	return d;
 80005c4:	7820      	ldrb	r0, [r4, #0]
}
 80005c6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80005c8:	4a03      	ldr	r2, [pc, #12]	; (80005d8 <getch+0x2c>)
 80005ca:	6a13      	ldr	r3, [r2, #32]
 80005cc:	432b      	orrs	r3, r5
 80005ce:	6213      	str	r3, [r2, #32]
 80005d0:	e7ee      	b.n	80005b0 <getch+0x4>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	20000020 	.word	0x20000020
 80005d8:	40013800 	.word	0x40013800

080005dc <putch>:

void putch(char c)
{
 80005dc:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
 80005de:	466b      	mov	r3, sp
 80005e0:	1dd9      	adds	r1, r3, #7
 80005e2:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80005e4:	2201      	movs	r2, #1
 80005e6:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <putch+0x14>)
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <putch+0x18>)
 80005ea:	f000 fc8d 	bl	8000f08 <HAL_UART_Transmit>
}
 80005ee:	bd07      	pop	{r0, r1, r2, pc}
 80005f0:	00001388 	.word	0x00001388
 80005f4:	20000020 	.word	0x20000020

080005f8 <HAL_GetTick>:
#define assert_param(expr) ((void)0U)

uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <HAL_GetTick+0xc>)
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	1c42      	adds	r2, r0, #1
 80005fe:	601a      	str	r2, [r3, #0]
}
 8000600:	4770      	bx	lr
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	20000090 	.word	0x20000090

08000608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800060a:	6803      	ldr	r3, [r0, #0]
{
 800060c:	0004      	movs	r4, r0
 800060e:	b085      	sub	sp, #20
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000610:	07db      	lsls	r3, r3, #31
 8000612:	d42f      	bmi.n	8000674 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000614:	6823      	ldr	r3, [r4, #0]
 8000616:	079b      	lsls	r3, r3, #30
 8000618:	d500      	bpl.n	800061c <HAL_RCC_OscConfig+0x14>
 800061a:	e081      	b.n	8000720 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800061c:	6823      	ldr	r3, [r4, #0]
 800061e:	071b      	lsls	r3, r3, #28
 8000620:	d500      	bpl.n	8000624 <HAL_RCC_OscConfig+0x1c>
 8000622:	e0bc      	b.n	800079e <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000624:	6823      	ldr	r3, [r4, #0]
 8000626:	075b      	lsls	r3, r3, #29
 8000628:	d500      	bpl.n	800062c <HAL_RCC_OscConfig+0x24>
 800062a:	e0df      	b.n	80007ec <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	06db      	lsls	r3, r3, #27
 8000630:	d51a      	bpl.n	8000668 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000632:	6962      	ldr	r2, [r4, #20]
 8000634:	2304      	movs	r3, #4
 8000636:	4db5      	ldr	r5, [pc, #724]	; (800090c <HAL_RCC_OscConfig+0x304>)
 8000638:	2a01      	cmp	r2, #1
 800063a:	d000      	beq.n	800063e <HAL_RCC_OscConfig+0x36>
 800063c:	e14a      	b.n	80008d4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800063e:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000640:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000642:	430b      	orrs	r3, r1
 8000644:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000646:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000648:	431a      	orrs	r2, r3
 800064a:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800064c:	f7ff ffd4 	bl	80005f8 <HAL_GetTick>
 8000650:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000652:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000654:	423b      	tst	r3, r7
 8000656:	d100      	bne.n	800065a <HAL_RCC_OscConfig+0x52>
 8000658:	e135      	b.n	80008c6 <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800065a:	21f8      	movs	r1, #248	; 0xf8
 800065c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800065e:	69a3      	ldr	r3, [r4, #24]
 8000660:	438a      	bics	r2, r1
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	4313      	orrs	r3, r2
 8000666:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000668:	6a21      	ldr	r1, [r4, #32]
 800066a:	2900      	cmp	r1, #0
 800066c:	d000      	beq.n	8000670 <HAL_RCC_OscConfig+0x68>
 800066e:	e159      	b.n	8000924 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000670:	2000      	movs	r0, #0
 8000672:	e013      	b.n	800069c <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000674:	210c      	movs	r1, #12
 8000676:	4da5      	ldr	r5, [pc, #660]	; (800090c <HAL_RCC_OscConfig+0x304>)
 8000678:	686a      	ldr	r2, [r5, #4]
 800067a:	400a      	ands	r2, r1
 800067c:	2a04      	cmp	r2, #4
 800067e:	d006      	beq.n	800068e <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000680:	686b      	ldr	r3, [r5, #4]
 8000682:	400b      	ands	r3, r1
 8000684:	2b08      	cmp	r3, #8
 8000686:	d10b      	bne.n	80006a0 <HAL_RCC_OscConfig+0x98>
 8000688:	686b      	ldr	r3, [r5, #4]
 800068a:	03db      	lsls	r3, r3, #15
 800068c:	d508      	bpl.n	80006a0 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800068e:	682b      	ldr	r3, [r5, #0]
 8000690:	039b      	lsls	r3, r3, #14
 8000692:	d5bf      	bpl.n	8000614 <HAL_RCC_OscConfig+0xc>
 8000694:	6863      	ldr	r3, [r4, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1bc      	bne.n	8000614 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800069a:	2001      	movs	r0, #1
}
 800069c:	b005      	add	sp, #20
 800069e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006a0:	6863      	ldr	r3, [r4, #4]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d113      	bne.n	80006ce <HAL_RCC_OscConfig+0xc6>
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	682a      	ldr	r2, [r5, #0]
 80006aa:	025b      	lsls	r3, r3, #9
 80006ac:	4313      	orrs	r3, r2
 80006ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80006b0:	f7ff ffa2 	bl	80005f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006b4:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80006b6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006b8:	02bf      	lsls	r7, r7, #10
 80006ba:	682b      	ldr	r3, [r5, #0]
 80006bc:	423b      	tst	r3, r7
 80006be:	d1a9      	bne.n	8000614 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006c0:	f7ff ff9a 	bl	80005f8 <HAL_GetTick>
 80006c4:	1b80      	subs	r0, r0, r6
 80006c6:	2864      	cmp	r0, #100	; 0x64
 80006c8:	d9f7      	bls.n	80006ba <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80006ca:	2003      	movs	r0, #3
 80006cc:	e7e6      	b.n	800069c <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d116      	bne.n	8000700 <HAL_RCC_OscConfig+0xf8>
 80006d2:	682b      	ldr	r3, [r5, #0]
 80006d4:	4a8e      	ldr	r2, [pc, #568]	; (8000910 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006d6:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006d8:	4013      	ands	r3, r2
 80006da:	602b      	str	r3, [r5, #0]
 80006dc:	682b      	ldr	r3, [r5, #0]
 80006de:	4a8d      	ldr	r2, [pc, #564]	; (8000914 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006e0:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006e2:	4013      	ands	r3, r2
 80006e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80006e6:	f7ff ff87 	bl	80005f8 <HAL_GetTick>
 80006ea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006ec:	682b      	ldr	r3, [r5, #0]
 80006ee:	423b      	tst	r3, r7
 80006f0:	d100      	bne.n	80006f4 <HAL_RCC_OscConfig+0xec>
 80006f2:	e78f      	b.n	8000614 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006f4:	f7ff ff80 	bl	80005f8 <HAL_GetTick>
 80006f8:	1b80      	subs	r0, r0, r6
 80006fa:	2864      	cmp	r0, #100	; 0x64
 80006fc:	d9f6      	bls.n	80006ec <HAL_RCC_OscConfig+0xe4>
 80006fe:	e7e4      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000700:	2b05      	cmp	r3, #5
 8000702:	d105      	bne.n	8000710 <HAL_RCC_OscConfig+0x108>
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	682a      	ldr	r2, [r5, #0]
 8000708:	02db      	lsls	r3, r3, #11
 800070a:	4313      	orrs	r3, r2
 800070c:	602b      	str	r3, [r5, #0]
 800070e:	e7ca      	b.n	80006a6 <HAL_RCC_OscConfig+0x9e>
 8000710:	682b      	ldr	r3, [r5, #0]
 8000712:	4a7f      	ldr	r2, [pc, #508]	; (8000910 <HAL_RCC_OscConfig+0x308>)
 8000714:	4013      	ands	r3, r2
 8000716:	602b      	str	r3, [r5, #0]
 8000718:	682b      	ldr	r3, [r5, #0]
 800071a:	4a7e      	ldr	r2, [pc, #504]	; (8000914 <HAL_RCC_OscConfig+0x30c>)
 800071c:	4013      	ands	r3, r2
 800071e:	e7c6      	b.n	80006ae <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000720:	220c      	movs	r2, #12
 8000722:	4d7a      	ldr	r5, [pc, #488]	; (800090c <HAL_RCC_OscConfig+0x304>)
 8000724:	686b      	ldr	r3, [r5, #4]
 8000726:	4213      	tst	r3, r2
 8000728:	d006      	beq.n	8000738 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800072a:	686b      	ldr	r3, [r5, #4]
 800072c:	4013      	ands	r3, r2
 800072e:	2b08      	cmp	r3, #8
 8000730:	d110      	bne.n	8000754 <HAL_RCC_OscConfig+0x14c>
 8000732:	686b      	ldr	r3, [r5, #4]
 8000734:	03db      	lsls	r3, r3, #15
 8000736:	d40d      	bmi.n	8000754 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000738:	682b      	ldr	r3, [r5, #0]
 800073a:	079b      	lsls	r3, r3, #30
 800073c:	d502      	bpl.n	8000744 <HAL_RCC_OscConfig+0x13c>
 800073e:	68e3      	ldr	r3, [r4, #12]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d1aa      	bne.n	800069a <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000744:	21f8      	movs	r1, #248	; 0xf8
 8000746:	682a      	ldr	r2, [r5, #0]
 8000748:	6923      	ldr	r3, [r4, #16]
 800074a:	438a      	bics	r2, r1
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	4313      	orrs	r3, r2
 8000750:	602b      	str	r3, [r5, #0]
 8000752:	e763      	b.n	800061c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000754:	68e2      	ldr	r2, [r4, #12]
 8000756:	2301      	movs	r3, #1
 8000758:	2a00      	cmp	r2, #0
 800075a:	d00f      	beq.n	800077c <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 800075c:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800075e:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000760:	4313      	orrs	r3, r2
 8000762:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000764:	f7ff ff48 	bl	80005f8 <HAL_GetTick>
 8000768:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800076a:	682b      	ldr	r3, [r5, #0]
 800076c:	423b      	tst	r3, r7
 800076e:	d1e9      	bne.n	8000744 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000770:	f7ff ff42 	bl	80005f8 <HAL_GetTick>
 8000774:	1b80      	subs	r0, r0, r6
 8000776:	2802      	cmp	r0, #2
 8000778:	d9f7      	bls.n	800076a <HAL_RCC_OscConfig+0x162>
 800077a:	e7a6      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 800077c:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800077e:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000780:	439a      	bics	r2, r3
 8000782:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000784:	f7ff ff38 	bl	80005f8 <HAL_GetTick>
 8000788:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800078a:	682b      	ldr	r3, [r5, #0]
 800078c:	423b      	tst	r3, r7
 800078e:	d100      	bne.n	8000792 <HAL_RCC_OscConfig+0x18a>
 8000790:	e744      	b.n	800061c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000792:	f7ff ff31 	bl	80005f8 <HAL_GetTick>
 8000796:	1b80      	subs	r0, r0, r6
 8000798:	2802      	cmp	r0, #2
 800079a:	d9f6      	bls.n	800078a <HAL_RCC_OscConfig+0x182>
 800079c:	e795      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800079e:	69e2      	ldr	r2, [r4, #28]
 80007a0:	2301      	movs	r3, #1
 80007a2:	4d5a      	ldr	r5, [pc, #360]	; (800090c <HAL_RCC_OscConfig+0x304>)
 80007a4:	2a00      	cmp	r2, #0
 80007a6:	d010      	beq.n	80007ca <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 80007a8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007aa:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80007ac:	4313      	orrs	r3, r2
 80007ae:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80007b0:	f7ff ff22 	bl	80005f8 <HAL_GetTick>
 80007b4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007b8:	423b      	tst	r3, r7
 80007ba:	d000      	beq.n	80007be <HAL_RCC_OscConfig+0x1b6>
 80007bc:	e732      	b.n	8000624 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007be:	f7ff ff1b 	bl	80005f8 <HAL_GetTick>
 80007c2:	1b80      	subs	r0, r0, r6
 80007c4:	2802      	cmp	r0, #2
 80007c6:	d9f6      	bls.n	80007b6 <HAL_RCC_OscConfig+0x1ae>
 80007c8:	e77f      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 80007ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007cc:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80007ce:	439a      	bics	r2, r3
 80007d0:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80007d2:	f7ff ff11 	bl	80005f8 <HAL_GetTick>
 80007d6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007da:	423b      	tst	r3, r7
 80007dc:	d100      	bne.n	80007e0 <HAL_RCC_OscConfig+0x1d8>
 80007de:	e721      	b.n	8000624 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007e0:	f7ff ff0a 	bl	80005f8 <HAL_GetTick>
 80007e4:	1b80      	subs	r0, r0, r6
 80007e6:	2802      	cmp	r0, #2
 80007e8:	d9f6      	bls.n	80007d8 <HAL_RCC_OscConfig+0x1d0>
 80007ea:	e76e      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007ec:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80007ee:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007f0:	4d46      	ldr	r5, [pc, #280]	; (800090c <HAL_RCC_OscConfig+0x304>)
 80007f2:	0552      	lsls	r2, r2, #21
 80007f4:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80007f6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007f8:	4213      	tst	r3, r2
 80007fa:	d108      	bne.n	800080e <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	69eb      	ldr	r3, [r5, #28]
 80007fe:	4313      	orrs	r3, r2
 8000800:	61eb      	str	r3, [r5, #28]
 8000802:	69eb      	ldr	r3, [r5, #28]
 8000804:	4013      	ands	r3, r2
 8000806:	9303      	str	r3, [sp, #12]
 8000808:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800080a:	2301      	movs	r3, #1
 800080c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800080e:	2780      	movs	r7, #128	; 0x80
 8000810:	4e41      	ldr	r6, [pc, #260]	; (8000918 <HAL_RCC_OscConfig+0x310>)
 8000812:	007f      	lsls	r7, r7, #1
 8000814:	6833      	ldr	r3, [r6, #0]
 8000816:	423b      	tst	r3, r7
 8000818:	d006      	beq.n	8000828 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800081a:	68a3      	ldr	r3, [r4, #8]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d113      	bne.n	8000848 <HAL_RCC_OscConfig+0x240>
 8000820:	6a2a      	ldr	r2, [r5, #32]
 8000822:	4313      	orrs	r3, r2
 8000824:	622b      	str	r3, [r5, #32]
 8000826:	e030      	b.n	800088a <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000828:	6833      	ldr	r3, [r6, #0]
 800082a:	433b      	orrs	r3, r7
 800082c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800082e:	f7ff fee3 	bl	80005f8 <HAL_GetTick>
 8000832:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000834:	6833      	ldr	r3, [r6, #0]
 8000836:	423b      	tst	r3, r7
 8000838:	d1ef      	bne.n	800081a <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800083a:	f7ff fedd 	bl	80005f8 <HAL_GetTick>
 800083e:	9b01      	ldr	r3, [sp, #4]
 8000840:	1ac0      	subs	r0, r0, r3
 8000842:	2864      	cmp	r0, #100	; 0x64
 8000844:	d9f6      	bls.n	8000834 <HAL_RCC_OscConfig+0x22c>
 8000846:	e740      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000848:	2201      	movs	r2, #1
 800084a:	2b00      	cmp	r3, #0
 800084c:	d114      	bne.n	8000878 <HAL_RCC_OscConfig+0x270>
 800084e:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000850:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000852:	4393      	bics	r3, r2
 8000854:	622b      	str	r3, [r5, #32]
 8000856:	6a2b      	ldr	r3, [r5, #32]
 8000858:	3203      	adds	r2, #3
 800085a:	4393      	bics	r3, r2
 800085c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800085e:	f7ff fecb 	bl	80005f8 <HAL_GetTick>
 8000862:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000864:	6a2b      	ldr	r3, [r5, #32]
 8000866:	423b      	tst	r3, r7
 8000868:	d016      	beq.n	8000898 <HAL_RCC_OscConfig+0x290>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800086a:	f7ff fec5 	bl	80005f8 <HAL_GetTick>
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <HAL_RCC_OscConfig+0x314>)
 8000870:	1b80      	subs	r0, r0, r6
 8000872:	4298      	cmp	r0, r3
 8000874:	d9f6      	bls.n	8000864 <HAL_RCC_OscConfig+0x25c>
 8000876:	e728      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000878:	2b05      	cmp	r3, #5
 800087a:	d116      	bne.n	80008aa <HAL_RCC_OscConfig+0x2a2>
 800087c:	6a29      	ldr	r1, [r5, #32]
 800087e:	3b01      	subs	r3, #1
 8000880:	430b      	orrs	r3, r1
 8000882:	622b      	str	r3, [r5, #32]
 8000884:	6a2b      	ldr	r3, [r5, #32]
 8000886:	431a      	orrs	r2, r3
 8000888:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 800088a:	f7ff feb5 	bl	80005f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800088e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000890:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000892:	6a2b      	ldr	r3, [r5, #32]
 8000894:	423b      	tst	r3, r7
 8000896:	d00f      	beq.n	80008b8 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8000898:	9b00      	ldr	r3, [sp, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d000      	beq.n	80008a0 <HAL_RCC_OscConfig+0x298>
 800089e:	e6c5      	b.n	800062c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008a0:	69eb      	ldr	r3, [r5, #28]
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <HAL_RCC_OscConfig+0x318>)
 80008a4:	4013      	ands	r3, r2
 80008a6:	61eb      	str	r3, [r5, #28]
 80008a8:	e6c0      	b.n	800062c <HAL_RCC_OscConfig+0x24>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008aa:	6a2b      	ldr	r3, [r5, #32]
 80008ac:	4393      	bics	r3, r2
 80008ae:	2204      	movs	r2, #4
 80008b0:	622b      	str	r3, [r5, #32]
 80008b2:	6a2b      	ldr	r3, [r5, #32]
 80008b4:	4393      	bics	r3, r2
 80008b6:	e7b5      	b.n	8000824 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008b8:	f7ff fe9e 	bl	80005f8 <HAL_GetTick>
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <HAL_RCC_OscConfig+0x314>)
 80008be:	1b80      	subs	r0, r0, r6
 80008c0:	4298      	cmp	r0, r3
 80008c2:	d9e6      	bls.n	8000892 <HAL_RCC_OscConfig+0x28a>
 80008c4:	e701      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80008c6:	f7ff fe97 	bl	80005f8 <HAL_GetTick>
 80008ca:	1b80      	subs	r0, r0, r6
 80008cc:	2802      	cmp	r0, #2
 80008ce:	d800      	bhi.n	80008d2 <HAL_RCC_OscConfig+0x2ca>
 80008d0:	e6bf      	b.n	8000652 <HAL_RCC_OscConfig+0x4a>
 80008d2:	e6fa      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80008d4:	3205      	adds	r2, #5
 80008d6:	d103      	bne.n	80008e0 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 80008d8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80008da:	439a      	bics	r2, r3
 80008dc:	636a      	str	r2, [r5, #52]	; 0x34
 80008de:	e6bc      	b.n	800065a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80008e0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80008e2:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80008e4:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80008e6:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80008e8:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80008ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008ec:	4393      	bics	r3, r2
 80008ee:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80008f0:	f7ff fe82 	bl	80005f8 <HAL_GetTick>
 80008f4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80008f6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008f8:	423b      	tst	r3, r7
 80008fa:	d100      	bne.n	80008fe <HAL_RCC_OscConfig+0x2f6>
 80008fc:	e6b4      	b.n	8000668 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80008fe:	f7ff fe7b 	bl	80005f8 <HAL_GetTick>
 8000902:	1b80      	subs	r0, r0, r6
 8000904:	2802      	cmp	r0, #2
 8000906:	d9f6      	bls.n	80008f6 <HAL_RCC_OscConfig+0x2ee>
 8000908:	e6df      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	40021000 	.word	0x40021000
 8000910:	fffeffff 	.word	0xfffeffff
 8000914:	fffbffff 	.word	0xfffbffff
 8000918:	40007000 	.word	0x40007000
 800091c:	00001388 	.word	0x00001388
 8000920:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000924:	220c      	movs	r2, #12
 8000926:	4d26      	ldr	r5, [pc, #152]	; (80009c0 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000928:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800092a:	686b      	ldr	r3, [r5, #4]
 800092c:	4013      	ands	r3, r2
 800092e:	2b08      	cmp	r3, #8
 8000930:	d100      	bne.n	8000934 <HAL_RCC_OscConfig+0x32c>
 8000932:	e6b3      	b.n	800069c <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000934:	682b      	ldr	r3, [r5, #0]
 8000936:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <HAL_RCC_OscConfig+0x3bc>)
 8000938:	4013      	ands	r3, r2
 800093a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800093c:	2902      	cmp	r1, #2
 800093e:	d12f      	bne.n	80009a0 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000940:	f7ff fe5a 	bl	80005f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000944:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000946:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000948:	04bf      	lsls	r7, r7, #18
 800094a:	682b      	ldr	r3, [r5, #0]
 800094c:	423b      	tst	r3, r7
 800094e:	d121      	bne.n	8000994 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000950:	220f      	movs	r2, #15
 8000952:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000954:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000956:	4393      	bics	r3, r2
 8000958:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800095a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800095c:	4313      	orrs	r3, r2
 800095e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000960:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000962:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000964:	686a      	ldr	r2, [r5, #4]
 8000966:	430b      	orrs	r3, r1
 8000968:	4917      	ldr	r1, [pc, #92]	; (80009c8 <HAL_RCC_OscConfig+0x3c0>)
 800096a:	400a      	ands	r2, r1
 800096c:	4313      	orrs	r3, r2
 800096e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	682a      	ldr	r2, [r5, #0]
 8000974:	045b      	lsls	r3, r3, #17
 8000976:	4313      	orrs	r3, r2
 8000978:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800097a:	f7ff fe3d 	bl	80005f8 <HAL_GetTick>
 800097e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000980:	682b      	ldr	r3, [r5, #0]
 8000982:	4233      	tst	r3, r6
 8000984:	d000      	beq.n	8000988 <HAL_RCC_OscConfig+0x380>
 8000986:	e673      	b.n	8000670 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000988:	f7ff fe36 	bl	80005f8 <HAL_GetTick>
 800098c:	1b00      	subs	r0, r0, r4
 800098e:	2802      	cmp	r0, #2
 8000990:	d9f6      	bls.n	8000980 <HAL_RCC_OscConfig+0x378>
 8000992:	e69a      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000994:	f7ff fe30 	bl	80005f8 <HAL_GetTick>
 8000998:	1b80      	subs	r0, r0, r6
 800099a:	2802      	cmp	r0, #2
 800099c:	d9d5      	bls.n	800094a <HAL_RCC_OscConfig+0x342>
 800099e:	e694      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80009a0:	f7ff fe2a 	bl	80005f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009a4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80009a6:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009a8:	04b6      	lsls	r6, r6, #18
 80009aa:	682b      	ldr	r3, [r5, #0]
 80009ac:	4233      	tst	r3, r6
 80009ae:	d100      	bne.n	80009b2 <HAL_RCC_OscConfig+0x3aa>
 80009b0:	e65e      	b.n	8000670 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b2:	f7ff fe21 	bl	80005f8 <HAL_GetTick>
 80009b6:	1b00      	subs	r0, r0, r4
 80009b8:	2802      	cmp	r0, #2
 80009ba:	d9f6      	bls.n	80009aa <HAL_RCC_OscConfig+0x3a2>
 80009bc:	e685      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40021000 	.word	0x40021000
 80009c4:	feffffff 	.word	0xfeffffff
 80009c8:	ffc2ffff 	.word	0xffc2ffff

080009cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009ce:	2201      	movs	r2, #1
 80009d0:	4d3e      	ldr	r5, [pc, #248]	; (8000acc <HAL_RCC_ClockConfig+0x100>)
{
 80009d2:	0004      	movs	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009d4:	682b      	ldr	r3, [r5, #0]
{
 80009d6:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009d8:	4013      	ands	r3, r2
 80009da:	428b      	cmp	r3, r1
 80009dc:	d312      	bcc.n	8000a04 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009de:	6822      	ldr	r2, [r4, #0]
 80009e0:	0793      	lsls	r3, r2, #30
 80009e2:	d419      	bmi.n	8000a18 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009e4:	07d3      	lsls	r3, r2, #31
 80009e6:	d41f      	bmi.n	8000a28 <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80009e8:	2301      	movs	r3, #1
 80009ea:	682a      	ldr	r2, [r5, #0]
 80009ec:	401a      	ands	r2, r3
 80009ee:	42ba      	cmp	r2, r7
 80009f0:	d85d      	bhi.n	8000aae <HAL_RCC_ClockConfig+0xe2>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	075b      	lsls	r3, r3, #29
 80009f6:	d461      	bmi.n	8000abc <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /* Update the SystemCoreClock global variable */
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
  SystemCoreClock = 7372800;
 80009f8:	22e1      	movs	r2, #225	; 0xe1
 80009fa:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <HAL_RCC_ClockConfig+0x104>)
 80009fc:	03d2      	lsls	r2, r2, #15
  
  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 80009fe:	2000      	movs	r0, #0
  SystemCoreClock = 7372800;
 8000a00:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000a02:	e008      	b.n	8000a16 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a04:	682b      	ldr	r3, [r5, #0]
 8000a06:	4393      	bics	r3, r2
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	602b      	str	r3, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a0c:	682b      	ldr	r3, [r5, #0]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	428b      	cmp	r3, r1
 8000a12:	d0e4      	beq.n	80009de <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000a14:	2001      	movs	r0, #1
}
 8000a16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a18:	20f0      	movs	r0, #240	; 0xf0
 8000a1a:	492e      	ldr	r1, [pc, #184]	; (8000ad4 <HAL_RCC_ClockConfig+0x108>)
 8000a1c:	684b      	ldr	r3, [r1, #4]
 8000a1e:	4383      	bics	r3, r0
 8000a20:	68a0      	ldr	r0, [r4, #8]
 8000a22:	4303      	orrs	r3, r0
 8000a24:	604b      	str	r3, [r1, #4]
 8000a26:	e7dd      	b.n	80009e4 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a28:	4e2a      	ldr	r6, [pc, #168]	; (8000ad4 <HAL_RCC_ClockConfig+0x108>)
 8000a2a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a2c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a2e:	2a01      	cmp	r2, #1
 8000a30:	d11a      	bne.n	8000a68 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a32:	039b      	lsls	r3, r3, #14
 8000a34:	d5ee      	bpl.n	8000a14 <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a36:	2103      	movs	r1, #3
 8000a38:	6873      	ldr	r3, [r6, #4]
 8000a3a:	438b      	bics	r3, r1
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000a40:	f7ff fdda 	bl	80005f8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a44:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000a46:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d115      	bne.n	8000a78 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a4c:	220c      	movs	r2, #12
 8000a4e:	6873      	ldr	r3, [r6, #4]
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d0c8      	beq.n	80009e8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a56:	f7ff fdcf 	bl	80005f8 <HAL_GetTick>
 8000a5a:	9b01      	ldr	r3, [sp, #4]
 8000a5c:	1ac0      	subs	r0, r0, r3
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HAL_RCC_ClockConfig+0x10c>)
 8000a60:	4298      	cmp	r0, r3
 8000a62:	d9f3      	bls.n	8000a4c <HAL_RCC_ClockConfig+0x80>
          return HAL_TIMEOUT;
 8000a64:	2003      	movs	r0, #3
 8000a66:	e7d6      	b.n	8000a16 <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a68:	2a02      	cmp	r2, #2
 8000a6a:	d102      	bne.n	8000a72 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a6c:	019b      	lsls	r3, r3, #6
 8000a6e:	d4e2      	bmi.n	8000a36 <HAL_RCC_ClockConfig+0x6a>
 8000a70:	e7d0      	b.n	8000a14 <HAL_RCC_ClockConfig+0x48>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a72:	079b      	lsls	r3, r3, #30
 8000a74:	d4df      	bmi.n	8000a36 <HAL_RCC_ClockConfig+0x6a>
 8000a76:	e7cd      	b.n	8000a14 <HAL_RCC_ClockConfig+0x48>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d012      	beq.n	8000aa2 <HAL_RCC_ClockConfig+0xd6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	6873      	ldr	r3, [r6, #4]
 8000a80:	4213      	tst	r3, r2
 8000a82:	d0b1      	beq.n	80009e8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a84:	f7ff fdb8 	bl	80005f8 <HAL_GetTick>
 8000a88:	9b01      	ldr	r3, [sp, #4]
 8000a8a:	1ac0      	subs	r0, r0, r3
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_RCC_ClockConfig+0x10c>)
 8000a8e:	4298      	cmp	r0, r3
 8000a90:	d9f4      	bls.n	8000a7c <HAL_RCC_ClockConfig+0xb0>
 8000a92:	e7e7      	b.n	8000a64 <HAL_RCC_ClockConfig+0x98>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a94:	f7ff fdb0 	bl	80005f8 <HAL_GetTick>
 8000a98:	9b01      	ldr	r3, [sp, #4]
 8000a9a:	1ac0      	subs	r0, r0, r3
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_RCC_ClockConfig+0x10c>)
 8000a9e:	4298      	cmp	r0, r3
 8000aa0:	d8e0      	bhi.n	8000a64 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	6873      	ldr	r3, [r6, #4]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2b08      	cmp	r3, #8
 8000aaa:	d1f3      	bne.n	8000a94 <HAL_RCC_ClockConfig+0xc8>
 8000aac:	e79c      	b.n	80009e8 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aae:	682a      	ldr	r2, [r5, #0]
 8000ab0:	439a      	bics	r2, r3
 8000ab2:	602a      	str	r2, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ab4:	682a      	ldr	r2, [r5, #0]
 8000ab6:	421a      	tst	r2, r3
 8000ab8:	d09b      	beq.n	80009f2 <HAL_RCC_ClockConfig+0x26>
 8000aba:	e7ab      	b.n	8000a14 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000abc:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <HAL_RCC_ClockConfig+0x108>)
 8000abe:	4907      	ldr	r1, [pc, #28]	; (8000adc <HAL_RCC_ClockConfig+0x110>)
 8000ac0:	6853      	ldr	r3, [r2, #4]
 8000ac2:	400b      	ands	r3, r1
 8000ac4:	68e1      	ldr	r1, [r4, #12]
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	6053      	str	r3, [r2, #4]
 8000aca:	e795      	b.n	80009f8 <HAL_RCC_ClockConfig+0x2c>
 8000acc:	40022000 	.word	0x40022000
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	00001388 	.word	0x00001388
 8000adc:	fffff8ff 	.word	0xfffff8ff

08000ae0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00U;
 8000ae0:	2300      	movs	r3, #0
{ 
 8000ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae4:	b087      	sub	sp, #28
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ae6:	680a      	ldr	r2, [r1, #0]
 8000ae8:	0014      	movs	r4, r2
 8000aea:	40dc      	lsrs	r4, r3
 8000aec:	d101      	bne.n	8000af2 <HAL_GPIO_Init+0x12>
      }
    }
    
    position++;
  } 
}
 8000aee:	b007      	add	sp, #28
 8000af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000af2:	2601      	movs	r6, #1
 8000af4:	0014      	movs	r4, r2
 8000af6:	409e      	lsls	r6, r3
 8000af8:	4034      	ands	r4, r6
 8000afa:	9402      	str	r4, [sp, #8]
    if(iocurrent)
 8000afc:	4232      	tst	r2, r6
 8000afe:	d100      	bne.n	8000b02 <HAL_GPIO_Init+0x22>
 8000b00:	e092      	b.n	8000c28 <HAL_GPIO_Init+0x148>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000b02:	684a      	ldr	r2, [r1, #4]
 8000b04:	0015      	movs	r5, r2
 8000b06:	9201      	str	r2, [sp, #4]
 8000b08:	2210      	movs	r2, #16
 8000b0a:	4395      	bics	r5, r2
 8000b0c:	9503      	str	r5, [sp, #12]
 8000b0e:	2d02      	cmp	r5, #2
 8000b10:	d10d      	bne.n	8000b2e <HAL_GPIO_Init+0x4e>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000b12:	2407      	movs	r4, #7
 8000b14:	250f      	movs	r5, #15
 8000b16:	401c      	ands	r4, r3
 8000b18:	00a4      	lsls	r4, r4, #2
 8000b1a:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3];
 8000b1c:	08da      	lsrs	r2, r3, #3
 8000b1e:	0092      	lsls	r2, r2, #2
 8000b20:	1882      	adds	r2, r0, r2
 8000b22:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000b24:	43af      	bics	r7, r5
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000b26:	690d      	ldr	r5, [r1, #16]
 8000b28:	40a5      	lsls	r5, r4
 8000b2a:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3U] = temp;
 8000b2c:	6217      	str	r7, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000b2e:	2203      	movs	r2, #3
 8000b30:	005c      	lsls	r4, r3, #1
 8000b32:	40a2      	lsls	r2, r4
 8000b34:	43d5      	mvns	r5, r2
 8000b36:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b38:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000b3a:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000b3c:	4397      	bics	r7, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b3e:	9a01      	ldr	r2, [sp, #4]
 8000b40:	402a      	ands	r2, r5
 8000b42:	40a2      	lsls	r2, r4
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b44:	9d03      	ldr	r5, [sp, #12]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b46:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b48:	3d01      	subs	r5, #1
      GPIOx->MODER = temp;
 8000b4a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b4c:	2d01      	cmp	r5, #1
 8000b4e:	d80f      	bhi.n	8000b70 <HAL_GPIO_Init+0x90>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b50:	4662      	mov	r2, ip
        temp = GPIOx->OSPEEDR; 
 8000b52:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b54:	4015      	ands	r5, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000b56:	68ca      	ldr	r2, [r1, #12]
 8000b58:	40a2      	lsls	r2, r4
 8000b5a:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 8000b5c:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b5e:	6845      	ldr	r5, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b60:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b62:	43b5      	bics	r5, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b64:	2601      	movs	r6, #1
 8000b66:	0912      	lsrs	r2, r2, #4
 8000b68:	4032      	ands	r2, r6
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000b6e:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b70:	4665      	mov	r5, ip
      temp = GPIOx->PUPDR;
 8000b72:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b74:	402a      	ands	r2, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000b76:	688d      	ldr	r5, [r1, #8]
 8000b78:	40a5      	lsls	r5, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000b7a:	2480      	movs	r4, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000b7c:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000b7e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000b80:	9a01      	ldr	r2, [sp, #4]
 8000b82:	0564      	lsls	r4, r4, #21
 8000b84:	4222      	tst	r2, r4
 8000b86:	d04f      	beq.n	8000c28 <HAL_GPIO_Init+0x148>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b88:	2501      	movs	r5, #1
 8000b8a:	4a28      	ldr	r2, [pc, #160]	; (8000c2c <HAL_GPIO_Init+0x14c>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b8c:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	6994      	ldr	r4, [r2, #24]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b90:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	432c      	orrs	r4, r5
 8000b94:	6194      	str	r4, [r2, #24]
 8000b96:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000b98:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	402a      	ands	r2, r5
 8000b9c:	9205      	str	r2, [sp, #20]
 8000b9e:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8000ba0:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <HAL_GPIO_Init+0x150>)
 8000ba2:	00a4      	lsls	r4, r4, #2
 8000ba4:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	3502      	adds	r5, #2
 8000baa:	401d      	ands	r5, r3
 8000bac:	00ad      	lsls	r5, r5, #2
 8000bae:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2];
 8000bb0:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bb2:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	42b8      	cmp	r0, r7
 8000bb8:	d00c      	beq.n	8000bd4 <HAL_GPIO_Init+0xf4>
 8000bba:	4f1e      	ldr	r7, [pc, #120]	; (8000c34 <HAL_GPIO_Init+0x154>)
 8000bbc:	3201      	adds	r2, #1
 8000bbe:	42b8      	cmp	r0, r7
 8000bc0:	d008      	beq.n	8000bd4 <HAL_GPIO_Init+0xf4>
 8000bc2:	4f1d      	ldr	r7, [pc, #116]	; (8000c38 <HAL_GPIO_Init+0x158>)
 8000bc4:	3201      	adds	r2, #1
 8000bc6:	42b8      	cmp	r0, r7
 8000bc8:	d004      	beq.n	8000bd4 <HAL_GPIO_Init+0xf4>
 8000bca:	4f1c      	ldr	r7, [pc, #112]	; (8000c3c <HAL_GPIO_Init+0x15c>)
 8000bcc:	3201      	adds	r2, #1
 8000bce:	42b8      	cmp	r0, r7
 8000bd0:	d000      	beq.n	8000bd4 <HAL_GPIO_Init+0xf4>
 8000bd2:	3202      	adds	r2, #2
 8000bd4:	40aa      	lsls	r2, r5
 8000bd6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bd8:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000bda:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bdc:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8000bde:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 8000be0:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be2:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000be4:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 8000be6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be8:	03ff      	lsls	r7, r7, #15
 8000bea:	d401      	bmi.n	8000bf0 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bec:	0035      	movs	r5, r6
 8000bee:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000bf0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000bf2:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8000bf4:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf6:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000bf8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfa:	03bf      	lsls	r7, r7, #14
 8000bfc:	d401      	bmi.n	8000c02 <HAL_GPIO_Init+0x122>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000bfe:	0035      	movs	r5, r6
 8000c00:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8000c02:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000c04:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 8000c06:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c08:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000c0a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c0c:	02ff      	lsls	r7, r7, #11
 8000c0e:	d401      	bmi.n	8000c14 <HAL_GPIO_Init+0x134>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c10:	0035      	movs	r5, r6
 8000c12:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8000c14:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000c16:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 8000c18:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c1a:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000c1c:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c1e:	02bf      	lsls	r7, r7, #10
 8000c20:	d401      	bmi.n	8000c26 <HAL_GPIO_Init+0x146>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c22:	4025      	ands	r5, r4
 8000c24:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000c26:	60d6      	str	r6, [r2, #12]
    position++;
 8000c28:	3301      	adds	r3, #1
 8000c2a:	e75c      	b.n	8000ae6 <HAL_GPIO_Init+0x6>
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010000 	.word	0x40010000
 8000c34:	48000400 	.word	0x48000400
 8000c38:	48000800 	.word	0x48000800
 8000c3c:	48000c00 	.word	0x48000c00
 8000c40:	40010400 	.word	0x40010400

08000c44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c48:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}										  
 8000c4a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c4c:	6281      	str	r1, [r0, #40]	; 0x28
}										  
 8000c4e:	e7fc      	b.n	8000c4a <HAL_GPIO_WritePin+0x6>

08000c50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c52:	0004      	movs	r4, r0
 8000c54:	000d      	movs	r5, r1
 8000c56:	0017      	movs	r7, r2
 8000c58:	001e      	movs	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000c5a:	6822      	ldr	r2, [r4, #0]
 8000c5c:	69d3      	ldr	r3, [r2, #28]
 8000c5e:	402b      	ands	r3, r5
 8000c60:	1b5b      	subs	r3, r3, r5
 8000c62:	4259      	negs	r1, r3
 8000c64:	414b      	adcs	r3, r1
 8000c66:	42bb      	cmp	r3, r7
 8000c68:	d001      	beq.n	8000c6e <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e018      	b.n	8000ca0 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8000c6e:	9b06      	ldr	r3, [sp, #24]
 8000c70:	3301      	adds	r3, #1
 8000c72:	d0f3      	beq.n	8000c5c <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000c74:	9b06      	ldr	r3, [sp, #24]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d113      	bne.n	8000ca2 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <UART_WaitOnFlagUntilTimeout+0x60>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8000c80:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000c82:	400a      	ands	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	31a3      	adds	r1, #163	; 0xa3
 8000c8a:	31ff      	adds	r1, #255	; 0xff
 8000c8c:	438a      	bics	r2, r1
 8000c8e:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8000c90:	0022      	movs	r2, r4
 8000c92:	2320      	movs	r3, #32
 8000c94:	3269      	adds	r2, #105	; 0x69
 8000c96:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8000c98:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	3468      	adds	r4, #104	; 0x68
 8000c9e:	7023      	strb	r3, [r4, #0]
}
 8000ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ca2:	f7ff fca9 	bl	80005f8 <HAL_GetTick>
 8000ca6:	9b06      	ldr	r3, [sp, #24]
 8000ca8:	1b80      	subs	r0, r0, r6
 8000caa:	4298      	cmp	r0, r3
 8000cac:	d9d5      	bls.n	8000c5a <UART_WaitOnFlagUntilTimeout+0xa>
 8000cae:	e7e4      	b.n	8000c7a <UART_WaitOnFlagUntilTimeout+0x2a>
 8000cb0:	fffffe5f 	.word	0xfffffe5f

08000cb4 <UART_SetConfig>:

  return HAL_OK;
}

HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	b570      	push	{r4, r5, r6, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	691d      	ldr	r5, [r3, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000cbc:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	695d      	ldr	r5, [r3, #20]
 8000cc2:	69c1      	ldr	r1, [r0, #28]
 8000cc4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000cc6:	6820      	ldr	r0, [r4, #0]
 8000cc8:	4d33      	ldr	r5, [pc, #204]	; (8000d98 <UART_SetConfig+0xe4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cca:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ccc:	4028      	ands	r0, r5
 8000cce:	4302      	orrs	r2, r0
 8000cd0:	6022      	str	r2, [r4, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000cd2:	6862      	ldr	r2, [r4, #4]
 8000cd4:	4831      	ldr	r0, [pc, #196]	; (8000d9c <UART_SetConfig+0xe8>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000cd6:	6a1d      	ldr	r5, [r3, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000cd8:	4002      	ands	r2, r0
 8000cda:	68d8      	ldr	r0, [r3, #12]
 8000cdc:	4302      	orrs	r2, r0
 8000cde:	6062      	str	r2, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000ce0:	699a      	ldr	r2, [r3, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000ce2:	68a0      	ldr	r0, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000ce4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000ce6:	4d2e      	ldr	r5, [pc, #184]	; (8000da0 <UART_SetConfig+0xec>)
 8000ce8:	4028      	ands	r0, r5
 8000cea:	4302      	orrs	r2, r0

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000cec:	2003      	movs	r0, #3
 8000cee:	2580      	movs	r5, #128	; 0x80
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000cf0:	60a2      	str	r2, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000cf2:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <UART_SetConfig+0xf0>)
 8000cf4:	022d      	lsls	r5, r5, #8
 8000cf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000cf8:	4002      	ands	r2, r0
 8000cfa:	3a01      	subs	r2, #1
 8000cfc:	2a02      	cmp	r2, #2
 8000cfe:	d843      	bhi.n	8000d88 <UART_SetConfig+0xd4>
 8000d00:	4829      	ldr	r0, [pc, #164]	; (8000da8 <UART_SetConfig+0xf4>)
 8000d02:	5c80      	ldrb	r0, [r0, r2]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d04:	42a9      	cmp	r1, r5
 8000d06:	d120      	bne.n	8000d4a <UART_SetConfig+0x96>
  {
    switch (clocksource)
 8000d08:	2808      	cmp	r0, #8
 8000d0a:	d81b      	bhi.n	8000d44 <UART_SetConfig+0x90>
 8000d0c:	f7ff fa60 	bl	80001d0 <__gnu_thumb1_case_uqi>
 8000d10:	1a051a3e 	.word	0x1a051a3e
 8000d14:	1a1a1a3e 	.word	0x1a1a1a3e
 8000d18:	15          	.byte	0x15
 8000d19:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000d1a:	6859      	ldr	r1, [r3, #4]
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <UART_SetConfig+0xf8>)
 8000d1e:	0848      	lsrs	r0, r1, #1
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000d20:	18c0      	adds	r0, r0, r3
 8000d22:	f7ff fa5f 	bl	80001e4 <__udivsi3>
 8000d26:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8000d28:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	220f      	movs	r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000d2e:	071b      	lsls	r3, r3, #28
    brrtemp = usartdiv & 0xFFF0U;
 8000d30:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000d32:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8000d34:	430b      	orrs	r3, r1
 8000d36:	60e3      	str	r3, [r4, #12]
    }
  }

  return ret;

}
 8000d38:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000d3a:	6859      	ldr	r1, [r3, #4]
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	0848      	lsrs	r0, r1, #1
 8000d40:	025b      	lsls	r3, r3, #9
 8000d42:	e7ed      	b.n	8000d20 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d44:	2001      	movs	r0, #1
 8000d46:	2300      	movs	r3, #0
 8000d48:	e7ef      	b.n	8000d2a <UART_SetConfig+0x76>
    switch (clocksource)
 8000d4a:	2808      	cmp	r0, #8
 8000d4c:	d81a      	bhi.n	8000d84 <UART_SetConfig+0xd0>
 8000d4e:	f7ff fa3f 	bl	80001d0 <__gnu_thumb1_case_uqi>
 8000d52:	190f      	.short	0x190f
 8000d54:	190f1905 	.word	0x190f1905
 8000d58:	1919      	.short	0x1919
 8000d5a:	14          	.byte	0x14
 8000d5b:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000d5c:	6859      	ldr	r1, [r3, #4]
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <UART_SetConfig+0xfc>)
 8000d60:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000d62:	18c0      	adds	r0, r0, r3
 8000d64:	f7ff fa3e 	bl	80001e4 <__udivsi3>
 8000d68:	b280      	uxth	r0, r0
 8000d6a:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000d6c:	2000      	movs	r0, #0
        break;
 8000d6e:	e7e3      	b.n	8000d38 <UART_SetConfig+0x84>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000d70:	6859      	ldr	r1, [r3, #4]
 8000d72:	23e1      	movs	r3, #225	; 0xe1
 8000d74:	0848      	lsrs	r0, r1, #1
 8000d76:	03db      	lsls	r3, r3, #15
 8000d78:	e7f3      	b.n	8000d62 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000d7a:	6859      	ldr	r1, [r3, #4]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	0848      	lsrs	r0, r1, #1
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	e7ee      	b.n	8000d62 <UART_SetConfig+0xae>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d84:	2001      	movs	r0, #1
  return ret;
 8000d86:	e7d7      	b.n	8000d38 <UART_SetConfig+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d88:	42a9      	cmp	r1, r5
 8000d8a:	d1f1      	bne.n	8000d70 <UART_SetConfig+0xbc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000d8c:	6859      	ldr	r1, [r3, #4]
 8000d8e:	23e1      	movs	r3, #225	; 0xe1
 8000d90:	0848      	lsrs	r0, r1, #1
 8000d92:	041b      	lsls	r3, r3, #16
 8000d94:	e7c4      	b.n	8000d20 <UART_SetConfig+0x6c>
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	ffff69f3 	.word	0xffff69f3
 8000d9c:	ffffcfff 	.word	0xffffcfff
 8000da0:	fffff4ff 	.word	0xfffff4ff
 8000da4:	40021000 	.word	0x40021000
 8000da8:	0800109c 	.word	0x0800109c
 8000dac:	01e84800 	.word	0x01e84800
 8000db0:	00f42400 	.word	0x00f42400

08000db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000db8:	d101      	bne.n	8000dbe <HAL_UART_Init+0xa>
  {
    return HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8000dbc:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8000dbe:	0005      	movs	r5, r0
 8000dc0:	3569      	adds	r5, #105	; 0x69
 8000dc2:	782b      	ldrb	r3, [r5, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d102      	bne.n	8000dd0 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8000dca:	0003      	movs	r3, r0
 8000dcc:	3368      	adds	r3, #104	; 0x68
 8000dce:	701a      	strb	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000dd0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000dd2:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8000dd4:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8000dd6:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000dd8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8000dda:	6813      	ldr	r3, [r2, #0]
 8000ddc:	43b3      	bics	r3, r6
 8000dde:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000de0:	f7ff ff68 	bl	8000cb4 <UART_SetConfig>
 8000de4:	42b0      	cmp	r0, r6
 8000de6:	d0e8      	beq.n	8000dba <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	490a      	ldr	r1, [pc, #40]	; (8000e14 <HAL_UART_Init+0x60>)
 8000dec:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000dee:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000df0:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8000df2:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000df4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	438a      	bics	r2, r1
 8000dfa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4316      	orrs	r6, r2
  huart->RxState = HAL_UART_STATE_READY;
 8000e00:	0022      	movs	r2, r4
  __HAL_UART_ENABLE(huart);
 8000e02:	601e      	str	r6, [r3, #0]
  huart->gState  = HAL_UART_STATE_READY;
 8000e04:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e06:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8000e08:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8000e0a:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8000e0c:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8000e0e:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8000e10:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8000e12:	e7d3      	b.n	8000dbc <HAL_UART_Init+0x8>
 8000e14:	fffff7ff 	.word	0xfffff7ff

08000e18 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8000e1e:	0003      	movs	r3, r0
 8000e20:	336a      	adds	r3, #106	; 0x6a
{
 8000e22:	0017      	movs	r7, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8000e24:	781a      	ldrb	r2, [r3, #0]
{
 8000e26:	0004      	movs	r4, r0
 8000e28:	000d      	movs	r5, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000e2a:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8000e2c:	2a20      	cmp	r2, #32
 8000e2e:	d139      	bne.n	8000ea4 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 8000e30:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d036      	beq.n	8000ea4 <HAL_UART_Receive+0x8c>
 8000e36:	2f00      	cmp	r7, #0
 8000e38:	d034      	beq.n	8000ea4 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	68a1      	ldr	r1, [r4, #8]
 8000e3e:	0152      	lsls	r2, r2, #5
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d104      	bne.n	8000e4e <HAL_UART_Receive+0x36>
 8000e44:	6922      	ldr	r2, [r4, #16]
 8000e46:	2a00      	cmp	r2, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8000e4a:	4205      	tst	r5, r0
 8000e4c:	d12a      	bne.n	8000ea4 <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 8000e4e:	0022      	movs	r2, r4
 8000e50:	3268      	adds	r2, #104	; 0x68
 8000e52:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 8000e54:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8000e56:	2901      	cmp	r1, #1
 8000e58:	d024      	beq.n	8000ea4 <HAL_UART_Receive+0x8c>
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	7011      	strb	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e5e:	2200      	movs	r2, #0
 8000e60:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000e62:	3222      	adds	r2, #34	; 0x22
 8000e64:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000e66:	f7ff fbc7 	bl	80005f8 <HAL_GetTick>
    huart->RxXferSize = Size;
 8000e6a:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 8000e70:	3358      	adds	r3, #88	; 0x58
 8000e72:	801f      	strh	r7, [r3, #0]
    huart->RxXferCount = Size;
 8000e74:	805f      	strh	r7, [r3, #2]
    tickstart = HAL_GetTick();
 8000e76:	0006      	movs	r6, r0
    UART_MASK_COMPUTATION(huart);
 8000e78:	0149      	lsls	r1, r1, #5
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	428a      	cmp	r2, r1
 8000e7e:	d115      	bne.n	8000eac <HAL_UART_Receive+0x94>
 8000e80:	6922      	ldr	r2, [r4, #16]
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d110      	bne.n	8000ea8 <HAL_UART_Receive+0x90>
 8000e86:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <HAL_UART_Receive+0xec>)
 8000e88:	801a      	strh	r2, [r3, #0]
    uhMask = huart->Mask;
 8000e8a:	881f      	ldrh	r7, [r3, #0]
    while(huart->RxXferCount > 0U)
 8000e8c:	0022      	movs	r2, r4
 8000e8e:	325a      	adds	r2, #90	; 0x5a
 8000e90:	8813      	ldrh	r3, [r2, #0]
 8000e92:	b298      	uxth	r0, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d110      	bne.n	8000eba <HAL_UART_Receive+0xa2>
    huart->RxState = HAL_UART_STATE_READY;
 8000e98:	0023      	movs	r3, r4
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	336a      	adds	r3, #106	; 0x6a
    __HAL_UNLOCK(huart);
 8000e9e:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8000ea0:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8000ea2:	7020      	strb	r0, [r4, #0]
  }
}
 8000ea4:	b005      	add	sp, #20
 8000ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8000ea8:	22ff      	movs	r2, #255	; 0xff
 8000eaa:	e7ed      	b.n	8000e88 <HAL_UART_Receive+0x70>
 8000eac:	2a00      	cmp	r2, #0
 8000eae:	d1ec      	bne.n	8000e8a <HAL_UART_Receive+0x72>
 8000eb0:	6922      	ldr	r2, [r4, #16]
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d0f8      	beq.n	8000ea8 <HAL_UART_Receive+0x90>
 8000eb6:	227f      	movs	r2, #127	; 0x7f
 8000eb8:	e7e6      	b.n	8000e88 <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 8000eba:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000ebc:	2120      	movs	r1, #32
      huart->RxXferCount--;
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000ec4:	9b03      	ldr	r3, [sp, #12]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	0020      	movs	r0, r4
 8000ecc:	0033      	movs	r3, r6
 8000ece:	f7ff febf 	bl	8000c50 <UART_WaitOnFlagUntilTimeout>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d113      	bne.n	8000efe <HAL_UART_Receive+0xe6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000ed6:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8000ed8:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000eda:	0011      	movs	r1, r2
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	0152      	lsls	r2, r2, #5
 8000ee0:	4291      	cmp	r1, r2
 8000ee2:	d107      	bne.n	8000ef4 <HAL_UART_Receive+0xdc>
 8000ee4:	6922      	ldr	r2, [r4, #16]
 8000ee6:	2a00      	cmp	r2, #0
 8000ee8:	d104      	bne.n	8000ef4 <HAL_UART_Receive+0xdc>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8000eea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000eec:	403b      	ands	r3, r7
 8000eee:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 8000ef0:	3502      	adds	r5, #2
 8000ef2:	e7cb      	b.n	8000e8c <HAL_UART_Receive+0x74>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8000ef4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ef6:	403b      	ands	r3, r7
 8000ef8:	702b      	strb	r3, [r5, #0]
 8000efa:	3501      	adds	r5, #1
 8000efc:	e7c6      	b.n	8000e8c <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8000efe:	2003      	movs	r0, #3
 8000f00:	e7d0      	b.n	8000ea4 <HAL_UART_Receive+0x8c>
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	000001ff 	.word	0x000001ff

08000f08 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8000f0e:	0003      	movs	r3, r0
 8000f10:	3369      	adds	r3, #105	; 0x69
 8000f12:	9302      	str	r3, [sp, #8]
 8000f14:	781b      	ldrb	r3, [r3, #0]
{
 8000f16:	0004      	movs	r4, r0
 8000f18:	000d      	movs	r5, r1
 8000f1a:	0016      	movs	r6, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000f1c:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8000f1e:	2b20      	cmp	r3, #32
 8000f20:	d148      	bne.n	8000fb4 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8000f22:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8000f24:	2900      	cmp	r1, #0
 8000f26:	d045      	beq.n	8000fb4 <HAL_UART_Transmit+0xac>
 8000f28:	2a00      	cmp	r2, #0
 8000f2a:	d043      	beq.n	8000fb4 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	68a2      	ldr	r2, [r4, #8]
 8000f30:	015b      	lsls	r3, r3, #5
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d104      	bne.n	8000f40 <HAL_UART_Transmit+0x38>
 8000f36:	6923      	ldr	r3, [r4, #16]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <HAL_UART_Transmit+0x38>
      if((((uint32_t)pData)&1U) != 0U)
 8000f3c:	4201      	tst	r1, r0
 8000f3e:	d139      	bne.n	8000fb4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000f40:	0023      	movs	r3, r4
 8000f42:	3368      	adds	r3, #104	; 0x68
 8000f44:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8000f46:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8000f48:	2a01      	cmp	r2, #1
 8000f4a:	d033      	beq.n	8000fb4 <HAL_UART_Transmit+0xac>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f50:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f52:	9a02      	ldr	r2, [sp, #8]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f54:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f56:	3321      	adds	r3, #33	; 0x21
 8000f58:	7013      	strb	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000f5a:	f7ff fb4d 	bl	80005f8 <HAL_GetTick>
    huart->TxXferSize = Size;
 8000f5e:	0023      	movs	r3, r4
 8000f60:	3350      	adds	r3, #80	; 0x50
 8000f62:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8000f64:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f66:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8000f68:	0007      	movs	r7, r0
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f6a:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8000f6c:	0021      	movs	r1, r4
 8000f6e:	3152      	adds	r1, #82	; 0x52
 8000f70:	880b      	ldrh	r3, [r1, #0]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10e      	bne.n	8000f96 <HAL_UART_Transmit+0x8e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f78:	9b03      	ldr	r3, [sp, #12]
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	0020      	movs	r0, r4
 8000f80:	003b      	movs	r3, r7
 8000f82:	f7ff fe65 	bl	8000c50 <UART_WaitOnFlagUntilTimeout>
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d113      	bne.n	8000fb2 <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	9a02      	ldr	r2, [sp, #8]
    __HAL_UNLOCK(huart);
 8000f8e:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8000f90:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 8000f92:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000f94:	e00e      	b.n	8000fb4 <HAL_UART_Transmit+0xac>
      huart->TxXferCount--;
 8000f96:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f98:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000fa0:	9b03      	ldr	r3, [sp, #12]
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	0020      	movs	r0, r4
 8000fa8:	003b      	movs	r3, r7
 8000faa:	f7ff fe51 	bl	8000c50 <UART_WaitOnFlagUntilTimeout>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	d002      	beq.n	8000fb8 <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 8000fb2:	2003      	movs	r0, #3
  }
}
 8000fb4:	b005      	add	sp, #20
 8000fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000fb8:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8000fba:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000fbc:	42b3      	cmp	r3, r6
 8000fbe:	d108      	bne.n	8000fd2 <HAL_UART_Transmit+0xca>
 8000fc0:	6923      	ldr	r3, [r4, #16]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d105      	bne.n	8000fd2 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8000fc6:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 8000fc8:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	0ddb      	lsrs	r3, r3, #23
 8000fce:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8000fd0:	e7cc      	b.n	8000f6c <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8000fd2:	782b      	ldrb	r3, [r5, #0]
 8000fd4:	3501      	adds	r5, #1
 8000fd6:	8513      	strh	r3, [r2, #40]	; 0x28
 8000fd8:	e7c8      	b.n	8000f6c <HAL_UART_Transmit+0x64>
 8000fda:	0000      	movs	r0, r0

08000fdc <Reset_Handler>:
 8000fdc:	2100      	movs	r1, #0
 8000fde:	e003      	b.n	8000fe8 <LoopCopyDataInit>

08000fe0 <CopyDataInit>:
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <LoopForever+0x2>)
 8000fe2:	585b      	ldr	r3, [r3, r1]
 8000fe4:	5043      	str	r3, [r0, r1]
 8000fe6:	3104      	adds	r1, #4

08000fe8 <LoopCopyDataInit>:
 8000fe8:	480a      	ldr	r0, [pc, #40]	; (8001014 <LoopForever+0x6>)
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <LoopForever+0xa>)
 8000fec:	1842      	adds	r2, r0, r1
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d3f6      	bcc.n	8000fe0 <CopyDataInit>
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <LoopForever+0xe>)
 8000ff4:	e002      	b.n	8000ffc <LoopFillZerobss>

08000ff6 <FillZerobss>:
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	3204      	adds	r2, #4

08000ffc <LoopFillZerobss>:
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <LoopForever+0x12>)
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d3f9      	bcc.n	8000ff6 <FillZerobss>
 8001002:	e000      	b.n	8001006 <LoopFillZerobss+0xa>
 8001004:	bf00      	nop
 8001006:	f000 f80f 	bl	8001028 <__libc_init_array>
 800100a:	f7ff f9a9 	bl	8000360 <main>

0800100e <LoopForever>:
 800100e:	e7fe      	b.n	800100e <LoopForever>
 8001010:	080011c4 	.word	0x080011c4
 8001014:	20000000 	.word	0x20000000
 8001018:	20000004 	.word	0x20000004
 800101c:	20000004 	.word	0x20000004
 8001020:	20000094 	.word	0x20000094

08001024 <BusFault_Handler>:
 8001024:	e7fe      	b.n	8001024 <BusFault_Handler>
 8001026:	0000      	movs	r0, r0

08001028 <__libc_init_array>:
 8001028:	b570      	push	{r4, r5, r6, lr}
 800102a:	2600      	movs	r6, #0
 800102c:	4d0c      	ldr	r5, [pc, #48]	; (8001060 <__libc_init_array+0x38>)
 800102e:	4c0d      	ldr	r4, [pc, #52]	; (8001064 <__libc_init_array+0x3c>)
 8001030:	1b64      	subs	r4, r4, r5
 8001032:	10a4      	asrs	r4, r4, #2
 8001034:	42a6      	cmp	r6, r4
 8001036:	d109      	bne.n	800104c <__libc_init_array+0x24>
 8001038:	2600      	movs	r6, #0
 800103a:	f000 f823 	bl	8001084 <_init>
 800103e:	4d0a      	ldr	r5, [pc, #40]	; (8001068 <__libc_init_array+0x40>)
 8001040:	4c0a      	ldr	r4, [pc, #40]	; (800106c <__libc_init_array+0x44>)
 8001042:	1b64      	subs	r4, r4, r5
 8001044:	10a4      	asrs	r4, r4, #2
 8001046:	42a6      	cmp	r6, r4
 8001048:	d105      	bne.n	8001056 <__libc_init_array+0x2e>
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	00b3      	lsls	r3, r6, #2
 800104e:	58eb      	ldr	r3, [r5, r3]
 8001050:	4798      	blx	r3
 8001052:	3601      	adds	r6, #1
 8001054:	e7ee      	b.n	8001034 <__libc_init_array+0xc>
 8001056:	00b3      	lsls	r3, r6, #2
 8001058:	58eb      	ldr	r3, [r5, r3]
 800105a:	4798      	blx	r3
 800105c:	3601      	adds	r6, #1
 800105e:	e7f2      	b.n	8001046 <__libc_init_array+0x1e>
 8001060:	080011bc 	.word	0x080011bc
 8001064:	080011bc 	.word	0x080011bc
 8001068:	080011bc 	.word	0x080011bc
 800106c:	080011c0 	.word	0x080011c0

08001070 <memcpy>:
 8001070:	2300      	movs	r3, #0
 8001072:	b510      	push	{r4, lr}
 8001074:	429a      	cmp	r2, r3
 8001076:	d100      	bne.n	800107a <memcpy+0xa>
 8001078:	bd10      	pop	{r4, pc}
 800107a:	5ccc      	ldrb	r4, [r1, r3]
 800107c:	54c4      	strb	r4, [r0, r3]
 800107e:	3301      	adds	r3, #1
 8001080:	e7f8      	b.n	8001074 <memcpy+0x4>
 8001082:	0000      	movs	r0, r0

08001084 <_init>:
 8001084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800108a:	bc08      	pop	{r3}
 800108c:	469e      	mov	lr, r3
 800108e:	4770      	bx	lr

08001090 <_fini>:
 8001090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001096:	bc08      	pop	{r3}
 8001098:	469e      	mov	lr, r3
 800109a:	4770      	bx	lr
