
simpleserial-aes-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800162c  0800162c  0001162c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001650  08001650  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  08001650  08001650  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001650  08001650  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001650  08001650  00011650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001654  08001654  00011654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08001658  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000210  08001868  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000470  08001868  00020470  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d80  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ee8  00000000  00000000  00024fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00002921  00000000  00000000  00025ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000268  00000000  00000000  000287c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000578  00000000  00000000  00028a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d70  00000000  00000000  00028fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000014d9  00000000  00000000  0002bd13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0002d1ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006b4  00000000  00000000  0002d23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0002d8f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000052  00000000  00000000  0002da34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000210 	.word	0x20000210
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001614 	.word	0x08001614

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000214 	.word	0x20000214
 80001c4:	08001614 	.word	0x08001614

080001c8 <reset>:

uint8_t reset(uint8_t* x, uint8_t len)
{
    // Reset key here if needed
	return 0x00;
}
 80001c8:	2000      	movs	r0, #0
 80001ca:	4770      	bx	lr

080001cc <enc_multi_setnum>:
uint8_t enc_multi_setnum(uint8_t* t, uint8_t len)
{
    //Assumes user entered a number like [0, 200] to mean "200"
    //which is most sane looking for humans I think
    num_encryption_rounds = t[1];
    num_encryption_rounds |= t[0] << 8;
 80001cc:	8803      	ldrh	r3, [r0, #0]
 80001ce:	4a02      	ldr	r2, [pc, #8]	; (80001d8 <enc_multi_setnum+0xc>)
 80001d0:	ba5b      	rev16	r3, r3
 80001d2:	8013      	strh	r3, [r2, #0]
    return 0;
}
 80001d4:	2000      	movs	r0, #0
 80001d6:	4770      	bx	lr
 80001d8:	20000000 	.word	0x20000000

080001dc <get_mask>:
{
 80001dc:	b508      	push	{r3, lr}
  aes_indep_mask(m, len);
 80001de:	f001 f9ce 	bl	800157e <aes_indep_mask>
}
 80001e2:	2000      	movs	r0, #0
 80001e4:	bd08      	pop	{r3, pc}

080001e6 <get_key>:
{
 80001e6:	b508      	push	{r3, lr}
	aes_indep_key(k);
 80001e8:	f001 f9c3 	bl	8001572 <aes_indep_key>
}
 80001ec:	2000      	movs	r0, #0
 80001ee:	bd08      	pop	{r3, pc}

080001f0 <get_pt>:
{
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4604      	mov	r4, r0
    aes_indep_enc_pretrigger(pt);
 80001f4:	f001 f9c1 	bl	800157a <aes_indep_enc_pretrigger>
	trigger_high();
 80001f8:	f000 fa48 	bl	800068c <trigger_high>
	aes_indep_enc(pt); /* encrypting the data block */
 80001fc:	4620      	mov	r0, r4
 80001fe:	f001 f9ba 	bl	8001576 <aes_indep_enc>
	trigger_low();
 8000202:	f000 fa4a 	bl	800069a <trigger_low>
    aes_indep_enc_posttrigger(pt);
 8000206:	4620      	mov	r0, r4
 8000208:	f001 f9b8 	bl	800157c <aes_indep_enc_posttrigger>
	simpleserial_put('r', 16, pt);
 800020c:	4622      	mov	r2, r4
 800020e:	2110      	movs	r1, #16
 8000210:	2072      	movs	r0, #114	; 0x72
 8000212:	f000 f8db 	bl	80003cc <simpleserial_put>
}
 8000216:	2000      	movs	r0, #0
 8000218:	bd10      	pop	{r4, pc}
 800021a:	0000      	movs	r0, r0

0800021c <enc_multi_getpt>:
{
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	4604      	mov	r4, r0
    aes_indep_enc_pretrigger(pt);
 8000220:	f001 f9ab 	bl	800157a <aes_indep_enc_pretrigger>
    for(unsigned int i = 0; i < num_encryption_rounds; i++){
 8000224:	4e0b      	ldr	r6, [pc, #44]	; (8000254 <enc_multi_getpt+0x38>)
 8000226:	2500      	movs	r5, #0
 8000228:	8833      	ldrh	r3, [r6, #0]
 800022a:	42ab      	cmp	r3, r5
 800022c:	d809      	bhi.n	8000242 <enc_multi_getpt+0x26>
    aes_indep_enc_posttrigger(pt);
 800022e:	4620      	mov	r0, r4
 8000230:	f001 f9a4 	bl	800157c <aes_indep_enc_posttrigger>
	simpleserial_put('r', 16, pt);
 8000234:	4622      	mov	r2, r4
 8000236:	2110      	movs	r1, #16
 8000238:	2072      	movs	r0, #114	; 0x72
 800023a:	f000 f8c7 	bl	80003cc <simpleserial_put>
}
 800023e:	2000      	movs	r0, #0
 8000240:	bd70      	pop	{r4, r5, r6, pc}
        trigger_high();
 8000242:	f000 fa23 	bl	800068c <trigger_high>
        aes_indep_enc(pt);
 8000246:	4620      	mov	r0, r4
 8000248:	f001 f995 	bl	8001576 <aes_indep_enc>
    for(unsigned int i = 0; i < num_encryption_rounds; i++){
 800024c:	3501      	adds	r5, #1
        trigger_low();
 800024e:	f000 fa24 	bl	800069a <trigger_low>
    for(unsigned int i = 0; i < num_encryption_rounds; i++){
 8000252:	e7e9      	b.n	8000228 <enc_multi_getpt+0xc>
 8000254:	20000000 	.word	0x20000000

08000258 <main>:

}
#endif

int main(void)
{
 8000258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 800025a:	4b1e      	ldr	r3, [pc, #120]	; (80002d4 <main+0x7c>)
 800025c:	466a      	mov	r2, sp
 800025e:	f103 0610 	add.w	r6, r3, #16
 8000262:	4615      	mov	r5, r2
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	6859      	ldr	r1, [r3, #4]
 8000268:	4614      	mov	r4, r2
 800026a:	c403      	stmia	r4!, {r0, r1}
 800026c:	3308      	adds	r3, #8
 800026e:	42b3      	cmp	r3, r6
 8000270:	4622      	mov	r2, r4
 8000272:	d1f7      	bne.n	8000264 <main+0xc>

    platform_init();
 8000274:	f000 f968 	bl	8000548 <platform_init>
    init_uart();
 8000278:	f000 f9a6 	bl	80005c8 <init_uart>
    trigger_setup();
 800027c:	f000 f9e2 	bl	8000644 <trigger_setup>

	aes_indep_init();
 8000280:	f001 f976 	bl	8001570 <aes_indep_init>
	aes_indep_key(tmp);
 8000284:	4628      	mov	r0, r5
 8000286:	f001 f974 	bl	8001572 <aes_indep_key>
    // putch('l');
    // putch('l');
    // putch('o');
    // putch('\n');

	simpleserial_init();
 800028a:	f000 f889 	bl	80003a0 <simpleserial_init>
    #if SS_VER == SS_VER_2_1
    simpleserial_addcmd(0x01, 16, aes);
    #else
    simpleserial_addcmd('k', 16, get_key);
 800028e:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <main+0x80>)
 8000290:	2110      	movs	r1, #16
 8000292:	206b      	movs	r0, #107	; 0x6b
 8000294:	f000 f880 	bl	8000398 <simpleserial_addcmd>
    simpleserial_addcmd('p', 16,  get_pt);
 8000298:	4a10      	ldr	r2, [pc, #64]	; (80002dc <main+0x84>)
 800029a:	2110      	movs	r1, #16
 800029c:	2070      	movs	r0, #112	; 0x70
 800029e:	f000 f87b 	bl	8000398 <simpleserial_addcmd>
    simpleserial_addcmd('x',  0,   reset);
 80002a2:	4a0f      	ldr	r2, [pc, #60]	; (80002e0 <main+0x88>)
 80002a4:	2100      	movs	r1, #0
 80002a6:	2078      	movs	r0, #120	; 0x78
 80002a8:	f000 f876 	bl	8000398 <simpleserial_addcmd>
    simpleserial_addcmd_flags('m', 18, get_mask, CMD_FLAG_LEN);
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <main+0x8c>)
 80002ae:	2301      	movs	r3, #1
 80002b0:	2112      	movs	r1, #18
 80002b2:	206d      	movs	r0, #109	; 0x6d
 80002b4:	f000 f85a 	bl	800036c <simpleserial_addcmd_flags>
    simpleserial_addcmd('s', 2, enc_multi_setnum);
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <main+0x90>)
 80002ba:	2102      	movs	r1, #2
 80002bc:	2073      	movs	r0, #115	; 0x73
 80002be:	f000 f86b 	bl	8000398 <simpleserial_addcmd>
    simpleserial_addcmd('f', 16, enc_multi_getpt);
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <main+0x94>)
 80002c4:	2110      	movs	r1, #16
 80002c6:	2066      	movs	r0, #102	; 0x66
 80002c8:	f000 f866 	bl	8000398 <simpleserial_addcmd>
    #endif
    while(1)
        simpleserial_get();
 80002cc:	f000 f8d8 	bl	8000480 <simpleserial_get>
    while(1)
 80002d0:	e7fc      	b.n	80002cc <main+0x74>
 80002d2:	bf00      	nop
 80002d4:	0800163f 	.word	0x0800163f
 80002d8:	080001e7 	.word	0x080001e7
 80002dc:	080001f1 	.word	0x080001f1
 80002e0:	080001c9 	.word	0x080001c9
 80002e4:	080001dd 	.word	0x080001dd
 80002e8:	080001cd 	.word	0x080001cd
 80002ec:	0800021d 	.word	0x0800021d

080002f0 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 80002f0:	2001      	movs	r0, #1
 80002f2:	4770      	bx	lr

080002f4 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 80002f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int i = 0; i < len; i++)
 80002f6:	2500      	movs	r5, #0
	{
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];
 80002f8:	1c4f      	adds	r7, r1, #1
	for(int i = 0; i < len; i++)
 80002fa:	4285      	cmp	r5, r0
 80002fc:	db01      	blt.n	8000302 <hex_decode+0xe>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 80002fe:	2000      	movs	r0, #0
 8000300:	e021      	b.n	8000346 <hex_decode+0x52>
		char n_lo = ascii_buf[2*i+1];
 8000302:	f817 4015 	ldrb.w	r4, [r7, r5, lsl #1]
		char n_hi = ascii_buf[2*i];
 8000306:	f811 3015 	ldrb.w	r3, [r1, r5, lsl #1]
		if(n_lo >= '0' && n_lo <= '9')
 800030a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800030e:	b2f6      	uxtb	r6, r6
 8000310:	2e09      	cmp	r6, #9
 8000312:	d80c      	bhi.n	800032e <hex_decode+0x3a>
			data_buf[i] = n_lo - '0';
 8000314:	7016      	strb	r6, [r2, #0]
		if(n_hi >= '0' && n_hi <= '9')
 8000316:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 800031a:	b2e6      	uxtb	r6, r4
 800031c:	2e09      	cmp	r6, #9
 800031e:	d815      	bhi.n	800034c <hex_decode+0x58>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8000320:	7813      	ldrb	r3, [r2, #0]
 8000322:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8000326:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < len; i++)
 8000328:	3501      	adds	r5, #1
 800032a:	3201      	adds	r2, #1
 800032c:	e7e5      	b.n	80002fa <hex_decode+0x6>
		else if(n_lo >= 'A' && n_lo <= 'F')
 800032e:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8000332:	2e05      	cmp	r6, #5
 8000334:	d802      	bhi.n	800033c <hex_decode+0x48>
			data_buf[i] = n_lo - 'A' + 10;
 8000336:	3c37      	subs	r4, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 8000338:	7014      	strb	r4, [r2, #0]
 800033a:	e7ec      	b.n	8000316 <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
 800033c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8000340:	2e05      	cmp	r6, #5
 8000342:	d901      	bls.n	8000348 <hex_decode+0x54>
			return 1;
 8000344:	2001      	movs	r0, #1
}
 8000346:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_buf[i] = n_lo - 'a' + 10;
 8000348:	3c57      	subs	r4, #87	; 0x57
 800034a:	e7f5      	b.n	8000338 <hex_decode+0x44>
		else if(n_hi >= 'A' && n_hi <= 'F')
 800034c:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 8000350:	2c05      	cmp	r4, #5
 8000352:	d802      	bhi.n	800035a <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8000354:	f1a3 0437 	sub.w	r4, r3, #55	; 0x37
 8000358:	e7e2      	b.n	8000320 <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
 800035a:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 800035e:	2c05      	cmp	r4, #5
 8000360:	d8f0      	bhi.n	8000344 <hex_decode+0x50>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8000362:	7814      	ldrb	r4, [r2, #0]
 8000364:	3b57      	subs	r3, #87	; 0x57
 8000366:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
 800036a:	e7dc      	b.n	8000326 <hex_decode+0x32>

0800036c <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 800036c:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS)
 800036e:	4e09      	ldr	r6, [pc, #36]	; (8000394 <simpleserial_addcmd_flags+0x28>)
 8000370:	6834      	ldr	r4, [r6, #0]
 8000372:	2c0f      	cmp	r4, #15
 8000374:	dc0b      	bgt.n	800038e <simpleserial_addcmd_flags+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 8000376:	29ff      	cmp	r1, #255	; 0xff
 8000378:	d809      	bhi.n	800038e <simpleserial_addcmd_flags+0x22>
		return 1;

	commands[num_commands].c   = c;
 800037a:	eb06 1504 	add.w	r5, r6, r4, lsl #4
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
 800037e:	e9c5 1202 	strd	r1, r2, [r5, #8]
	commands[num_commands].flags = fl;
	num_commands++;
 8000382:	3401      	adds	r4, #1
	commands[num_commands].c   = c;
 8000384:	7128      	strb	r0, [r5, #4]
	commands[num_commands].flags = fl;
 8000386:	742b      	strb	r3, [r5, #16]
	num_commands++;
 8000388:	6034      	str	r4, [r6, #0]

	return 0;
 800038a:	2000      	movs	r0, #0
}
 800038c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 800038e:	2001      	movs	r0, #1
 8000390:	e7fc      	b.n	800038c <simpleserial_addcmd_flags+0x20>
 8000392:	bf00      	nop
 8000394:	2000022c 	.word	0x2000022c

08000398 <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 8000398:	2300      	movs	r3, #0
 800039a:	f7ff bfe7 	b.w	800036c <simpleserial_addcmd_flags>
 800039e:	0000      	movs	r0, r0

080003a0 <simpleserial_init>:
{
 80003a0:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 80003a2:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <simpleserial_init+0x20>)
 80003a4:	2100      	movs	r1, #0
 80003a6:	2076      	movs	r0, #118	; 0x76
 80003a8:	f7ff fff6 	bl	8000398 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 80003ac:	4a05      	ldr	r2, [pc, #20]	; (80003c4 <simpleserial_init+0x24>)
 80003ae:	2077      	movs	r0, #119	; 0x77
 80003b0:	f7ff fff2 	bl	8000398 <simpleserial_addcmd>
}
 80003b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('y', 0, ss_num_commands);
 80003b8:	4a03      	ldr	r2, [pc, #12]	; (80003c8 <simpleserial_init+0x28>)
 80003ba:	2079      	movs	r0, #121	; 0x79
 80003bc:	f7ff bfec 	b.w	8000398 <simpleserial_addcmd>
 80003c0:	080002f1 	.word	0x080002f1
 80003c4:	08000431 	.word	0x08000431
 80003c8:	0800040d 	.word	0x0800040d

080003cc <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	4614      	mov	r4, r2
 80003d0:	460e      	mov	r6, r1
	// Write first character
	putch(c);
 80003d2:	f000 f983 	bl	80006dc <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 80003d6:	4f0c      	ldr	r7, [pc, #48]	; (8000408 <simpleserial_put+0x3c>)
 80003d8:	1e65      	subs	r5, r4, #1
	for(int i = 0; i < size; i++)
 80003da:	f1c4 0401 	rsb	r4, r4, #1
 80003de:	1963      	adds	r3, r4, r5
 80003e0:	429e      	cmp	r6, r3
 80003e2:	dc04      	bgt.n	80003ee <simpleserial_put+0x22>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
}
 80003e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	putch('\n');
 80003e8:	200a      	movs	r0, #10
 80003ea:	f000 b977 	b.w	80006dc <putch>
		putch(hex_lookup[output[i] >> 4 ]);
 80003ee:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80003f2:	091b      	lsrs	r3, r3, #4
 80003f4:	5cf8      	ldrb	r0, [r7, r3]
 80003f6:	f000 f971 	bl	80006dc <putch>
		putch(hex_lookup[output[i] & 0xF]);
 80003fa:	782b      	ldrb	r3, [r5, #0]
 80003fc:	f003 030f 	and.w	r3, r3, #15
 8000400:	5cf8      	ldrb	r0, [r7, r3]
 8000402:	f000 f96b 	bl	80006dc <putch>
	for(int i = 0; i < size; i++)
 8000406:	e7ea      	b.n	80003de <simpleserial_put+0x12>
 8000408:	0800162c 	.word	0x0800162c

0800040c <ss_num_commands>:
{
 800040c:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <ss_num_commands+0x20>)
    simpleserial_put('r', 0x01, &ncmds);
 8000410:	f10d 0207 	add.w	r2, sp, #7
    uint8_t ncmds = num_commands & 0xFF;
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f88d 3007 	strb.w	r3, [sp, #7]
    simpleserial_put('r', 0x01, &ncmds);
 800041a:	2101      	movs	r1, #1
 800041c:	2072      	movs	r0, #114	; 0x72
 800041e:	f7ff ffd5 	bl	80003cc <simpleserial_put>
}
 8000422:	2000      	movs	r0, #0
 8000424:	b003      	add	sp, #12
 8000426:	f85d fb04 	ldr.w	pc, [sp], #4
 800042a:	bf00      	nop
 800042c:	2000022c 	.word	0x2000022c

08000430 <ss_get_commands>:
{
 8000430:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000432:	4c12      	ldr	r4, [pc, #72]	; (800047c <ss_get_commands+0x4c>)
 8000434:	6821      	ldr	r1, [r4, #0]
{
 8000436:	b08c      	sub	sp, #48	; 0x30
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000438:	b2cd      	uxtb	r5, r1
 800043a:	2000      	movs	r0, #0
 800043c:	b2c3      	uxtb	r3, r0
 800043e:	42ab      	cmp	r3, r5
 8000440:	f100 0001 	add.w	r0, r0, #1
 8000444:	db09      	blt.n	800045a <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 8000446:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800044a:	466a      	mov	r2, sp
 800044c:	b2c9      	uxtb	r1, r1
 800044e:	2072      	movs	r0, #114	; 0x72
 8000450:	f7ff ffbc 	bl	80003cc <simpleserial_put>
}
 8000454:	2000      	movs	r0, #0
 8000456:	b00c      	add	sp, #48	; 0x30
 8000458:	bd70      	pop	{r4, r5, r6, pc}
        repr_cmd_buf[i].c = commands[i].c;
 800045a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800045e:	ae0c      	add	r6, sp, #48	; 0x30
 8000460:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8000464:	4432      	add	r2, r6
 8000466:	791e      	ldrb	r6, [r3, #4]
 8000468:	f802 6c30 	strb.w	r6, [r2, #-48]
        repr_cmd_buf[i].len = commands[i].len;
 800046c:	689e      	ldr	r6, [r3, #8]
        repr_cmd_buf[i].flags = commands[i].flags;
 800046e:	7c1b      	ldrb	r3, [r3, #16]
        repr_cmd_buf[i].len = commands[i].len;
 8000470:	f802 6c2f 	strb.w	r6, [r2, #-47]
        repr_cmd_buf[i].flags = commands[i].flags;
 8000474:	f802 3c2e 	strb.w	r3, [r2, #-46]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000478:	e7e0      	b.n	800043c <ss_get_commands+0xc>
 800047a:	bf00      	nop
 800047c:	2000022c 	.word	0x2000022c

08000480 <simpleserial_get>:
{
 8000480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 8000484:	4d2f      	ldr	r5, [pc, #188]	; (8000544 <simpleserial_get+0xc4>)
{
 8000486:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
	c = getch();
 800048a:	f000 f90d 	bl	80006a8 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 800048e:	462a      	mov	r2, r5
 8000490:	2300      	movs	r3, #0
 8000492:	f852 1b04 	ldr.w	r1, [r2], #4
 8000496:	4299      	cmp	r1, r3
 8000498:	dc04      	bgt.n	80004a4 <simpleserial_get+0x24>
	if(cmd == num_commands)
 800049a:	d107      	bne.n	80004ac <simpleserial_get+0x2c>
}
 800049c:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
 80004a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(commands[cmd].c == c)
 80004a4:	011c      	lsls	r4, r3, #4
 80004a6:	5ca4      	ldrb	r4, [r4, r2]
 80004a8:	4284      	cmp	r4, r0
 80004aa:	d13e      	bne.n	800052a <simpleserial_get+0xaa>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 80004ac:	eb05 1403 	add.w	r4, r5, r3, lsl #4
 80004b0:	011e      	lsls	r6, r3, #4
 80004b2:	7c23      	ldrb	r3, [r4, #16]
 80004b4:	07db      	lsls	r3, r3, #31
 80004b6:	d514      	bpl.n	80004e2 <simpleserial_get+0x62>
		uint8_t l = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	f88d 3008 	strb.w	r3, [sp, #8]
		buff[0] = getch();
 80004be:	f000 f8f3 	bl	80006a8 <getch>
 80004c2:	f88d 0108 	strb.w	r0, [sp, #264]	; 0x108
		buff[1] = getch();
 80004c6:	f000 f8ef 	bl	80006a8 <getch>
		if (hex_decode(1, buff, &l))
 80004ca:	aa02      	add	r2, sp, #8
		buff[1] = getch();
 80004cc:	f88d 0109 	strb.w	r0, [sp, #265]	; 0x109
		if (hex_decode(1, buff, &l))
 80004d0:	a942      	add	r1, sp, #264	; 0x108
 80004d2:	2001      	movs	r0, #1
 80004d4:	f7ff ff0e 	bl	80002f4 <hex_decode>
 80004d8:	2800      	cmp	r0, #0
 80004da:	d1df      	bne.n	800049c <simpleserial_get+0x1c>
		commands[cmd].len = l;
 80004dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80004e0:	60a3      	str	r3, [r4, #8]
 80004e2:	af42      	add	r7, sp, #264	; 0x108
	for(cmd = 0; cmd < num_commands; cmd++)
 80004e4:	2400      	movs	r4, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80004e6:	eb05 0806 	add.w	r8, r5, r6
 80004ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80004ee:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
 80004f2:	d31c      	bcc.n	800052e <simpleserial_get+0xae>
	c = getch();
 80004f4:	f000 f8d8 	bl	80006a8 <getch>
	if(c != '\n' && c != '\r')
 80004f8:	280a      	cmp	r0, #10
 80004fa:	d001      	beq.n	8000500 <simpleserial_get+0x80>
 80004fc:	280d      	cmp	r0, #13
 80004fe:	d1cd      	bne.n	800049c <simpleserial_get+0x1c>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8000500:	4435      	add	r5, r6
 8000502:	aa02      	add	r2, sp, #8
 8000504:	68ac      	ldr	r4, [r5, #8]
 8000506:	a942      	add	r1, sp, #264	; 0x108
 8000508:	4620      	mov	r0, r4
 800050a:	f7ff fef3 	bl	80002f4 <hex_decode>
 800050e:	2800      	cmp	r0, #0
 8000510:	d1c4      	bne.n	800049c <simpleserial_get+0x1c>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 8000512:	b2e1      	uxtb	r1, r4
 8000514:	68eb      	ldr	r3, [r5, #12]
 8000516:	a802      	add	r0, sp, #8
 8000518:	4798      	blx	r3
	simpleserial_put('z', 1, ret);
 800051a:	aa01      	add	r2, sp, #4
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 800051c:	f88d 0004 	strb.w	r0, [sp, #4]
	simpleserial_put('z', 1, ret);
 8000520:	2101      	movs	r1, #1
 8000522:	207a      	movs	r0, #122	; 0x7a
 8000524:	f7ff ff52 	bl	80003cc <simpleserial_put>
 8000528:	e7b8      	b.n	800049c <simpleserial_get+0x1c>
	for(cmd = 0; cmd < num_commands; cmd++)
 800052a:	3301      	adds	r3, #1
 800052c:	e7b3      	b.n	8000496 <simpleserial_get+0x16>
		c = getch();
 800052e:	f000 f8bb 	bl	80006a8 <getch>
		if(c == '\n' || c == '\r')
 8000532:	280a      	cmp	r0, #10
 8000534:	d0b2      	beq.n	800049c <simpleserial_get+0x1c>
 8000536:	280d      	cmp	r0, #13
 8000538:	d0b0      	beq.n	800049c <simpleserial_get+0x1c>
		ascii_buf[i] = c;
 800053a:	f807 0b01 	strb.w	r0, [r7], #1
	for(int i = 0; i < 2*commands[cmd].len; i++)
 800053e:	3401      	adds	r4, #1
 8000540:	e7d3      	b.n	80004ea <simpleserial_get+0x6a>
 8000542:	bf00      	nop
 8000544:	2000022c 	.word	0x2000022c

08000548 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 800054c:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800054e:	2603      	movs	r6, #3
 8000550:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000554:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000556:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000558:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 800055c:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 800055e:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000560:	f000 f8d4 	bl	800070c <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000564:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000566:	4621      	mov	r1, r4
 8000568:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800056a:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056e:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000572:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000574:	f000 fb38 	bl	8000be8 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <platform_init+0x78>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000580:	615a      	str	r2, [r3, #20]
 8000582:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000584:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800058c:	4c0d      	ldr	r4, [pc, #52]	; (80005c4 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000592:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000594:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000598:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800059a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800059e:	f000 fbc9 	bl	8000d34 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80005a2:	462a      	mov	r2, r5
 80005a4:	4620      	mov	r0, r4
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	f000 fc87 	bl	8000ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80005ae:	462a      	mov	r2, r5
 80005b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b4:	4620      	mov	r0, r4
 80005b6:	f000 fc81 	bl	8000ebc <HAL_GPIO_WritePin>
#endif
}
 80005ba:	b016      	add	sp, #88	; 0x58
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	48000800 	.word	0x48000800

080005c8 <init_uart>:

void init_uart(void)
{
 80005c8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 80005ca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 80005ce:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80005d6:	2101      	movs	r1, #1
 80005d8:	2303      	movs	r3, #3
 80005da:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 80005de:	4c16      	ldr	r4, [pc, #88]	; (8000638 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 80005e0:	2307      	movs	r3, #7
 80005e2:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 80005e4:	6963      	ldr	r3, [r4, #20]
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6163      	str	r3, [r4, #20]
 80005ec:	6963      	ldr	r3, [r4, #20]
 80005ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80005f4:	a903      	add	r1, sp, #12
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 80005fa:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80005fc:	f000 fb9a 	bl	8000d34 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000600:	480e      	ldr	r0, [pc, #56]	; (800063c <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8000602:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8000640 <init_uart+0x78>
 8000606:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800060a:	e9c0 c300 	strd	ip, r3, [r0]
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000610:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000614:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000616:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000618:	230c      	movs	r3, #12
 800061a:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 800061c:	69a3      	ldr	r3, [r4, #24]
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	61a3      	str	r3, [r4, #24]
 8000624:	69a3      	ldr	r3, [r4, #24]
 8000626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800062a:	9302      	str	r3, [sp, #8]
 800062c:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 800062e:	f000 fd99 	bl	8001164 <HAL_UART_Init>
}
 8000632:	b008      	add	sp, #32
 8000634:	bd10      	pop	{r4, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	20000330 	.word	0x20000330
 8000640:	40013800 	.word	0x40013800

08000644 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <trigger_setup+0x44>)
{
 8000646:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	695b      	ldr	r3, [r3, #20]
{
 8000652:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800065c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000660:	2301      	movs	r3, #1
 8000662:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000666:	2500      	movs	r5, #0
 8000668:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 800066a:	a901      	add	r1, sp, #4
 800066c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000670:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000674:	f000 fb5e 	bl	8000d34 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000678:	462a      	mov	r2, r5
 800067a:	4621      	mov	r1, r4
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f000 fc1c 	bl	8000ebc <HAL_GPIO_WritePin>
}
 8000684:	b007      	add	sp, #28
 8000686:	bd30      	pop	{r4, r5, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f000 bc11 	b.w	8000ebc <HAL_GPIO_WritePin>

0800069a <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f000 bc0a 	b.w	8000ebc <HAL_GPIO_WritePin>

080006a8 <getch>:
}

char getch(void)
{
 80006a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 80006aa:	4d0a      	ldr	r5, [pc, #40]	; (80006d4 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 80006ac:	4c0a      	ldr	r4, [pc, #40]	; (80006d8 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 80006ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80006b2:	2201      	movs	r2, #1
 80006b4:	f10d 0107 	add.w	r1, sp, #7
 80006b8:	4628      	mov	r0, r5
 80006ba:	f000 fdd4 	bl	8001266 <HAL_UART_Receive>
 80006be:	b918      	cbnz	r0, 80006c8 <getch+0x20>
  //putch(d);
  return d;
}
 80006c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80006c4:	b003      	add	sp, #12
 80006c6:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 80006c8:	6a23      	ldr	r3, [r4, #32]
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	6223      	str	r3, [r4, #32]
 80006d0:	e7ed      	b.n	80006ae <getch+0x6>
 80006d2:	bf00      	nop
 80006d4:	20000330 	.word	0x20000330
 80006d8:	40013800 	.word	0x40013800

080006dc <putch>:

void putch(char c)
{
 80006dc:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80006de:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 80006e2:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f10d 0107 	add.w	r1, sp, #7
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <putch+0x1c>)
 80006ee:	f000 fd64 	bl	80011ba <HAL_UART_Transmit>
}
 80006f2:	b003      	add	sp, #12
 80006f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80006f8:	20000330 	.word	0x20000330

080006fc <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <HAL_GetTick+0xc>)
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	1c42      	adds	r2, r0, #1
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200003a0 	.word	0x200003a0

0800070c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800070c:	6803      	ldr	r3, [r0, #0]
{
 800070e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000712:	07d9      	lsls	r1, r3, #31
{
 8000714:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000716:	d411      	bmi.n	800073c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000718:	6823      	ldr	r3, [r4, #0]
 800071a:	079a      	lsls	r2, r3, #30
 800071c:	f100 8086 	bmi.w	800082c <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	071e      	lsls	r6, r3, #28
 8000724:	f100 80f4 	bmi.w	8000910 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	075d      	lsls	r5, r3, #29
 800072c:	f100 8140 	bmi.w	80009b0 <HAL_RCC_OscConfig+0x2a4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000730:	69e2      	ldr	r2, [r4, #28]
 8000732:	2a00      	cmp	r2, #0
 8000734:	f040 81cb 	bne.w	8000ace <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000738:	2000      	movs	r0, #0
 800073a:	e021      	b.n	8000780 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800073c:	499a      	ldr	r1, [pc, #616]	; (80009a8 <HAL_RCC_OscConfig+0x29c>)
 800073e:	684b      	ldr	r3, [r1, #4]
 8000740:	f003 030c 	and.w	r3, r3, #12
 8000744:	2b04      	cmp	r3, #4
 8000746:	d007      	beq.n	8000758 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000748:	684b      	ldr	r3, [r1, #4]
 800074a:	f003 030c 	and.w	r3, r3, #12
 800074e:	2b08      	cmp	r3, #8
 8000750:	d119      	bne.n	8000786 <HAL_RCC_OscConfig+0x7a>
 8000752:	684b      	ldr	r3, [r1, #4]
 8000754:	03db      	lsls	r3, r3, #15
 8000756:	d516      	bpl.n	8000786 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800075c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000760:	6809      	ldr	r1, [r1, #0]
 8000762:	fa93 f3a3 	rbit	r3, r3
 8000766:	fab3 f383 	clz	r3, r3
 800076a:	f003 031f 	and.w	r3, r3, #31
 800076e:	2201      	movs	r2, #1
 8000770:	fa02 f303 	lsl.w	r3, r2, r3
 8000774:	420b      	tst	r3, r1
 8000776:	d0cf      	beq.n	8000718 <HAL_RCC_OscConfig+0xc>
 8000778:	6863      	ldr	r3, [r4, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1cc      	bne.n	8000718 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800077e:	2001      	movs	r0, #1
}
 8000780:	b002      	add	sp, #8
 8000782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000786:	6862      	ldr	r2, [r4, #4]
 8000788:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800078c:	d124      	bne.n	80007d8 <HAL_RCC_OscConfig+0xcc>
 800078e:	680b      	ldr	r3, [r1, #0]
 8000790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000794:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000796:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000798:	68a0      	ldr	r0, [r4, #8]
 800079a:	f023 030f 	bic.w	r3, r3, #15
 800079e:	4303      	orrs	r3, r0
 80007a0:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007a2:	b34a      	cbz	r2, 80007f8 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 80007a4:	f7ff ffaa 	bl	80006fc <HAL_GetTick>
 80007a8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80007ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007ae:	2701      	movs	r7, #1
 80007b0:	fa96 f3a6 	rbit	r3, r6
 80007b4:	680a      	ldr	r2, [r1, #0]
 80007b6:	fa96 f3a6 	rbit	r3, r6
 80007ba:	fab3 f383 	clz	r3, r3
 80007be:	f003 031f 	and.w	r3, r3, #31
 80007c2:	fa07 f303 	lsl.w	r3, r7, r3
 80007c6:	4213      	tst	r3, r2
 80007c8:	d1a6      	bne.n	8000718 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007ca:	f7ff ff97 	bl	80006fc <HAL_GetTick>
 80007ce:	1b40      	subs	r0, r0, r5
 80007d0:	2864      	cmp	r0, #100	; 0x64
 80007d2:	d9ed      	bls.n	80007b0 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 80007d4:	2003      	movs	r0, #3
 80007d6:	e7d3      	b.n	8000780 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007d8:	680b      	ldr	r3, [r1, #0]
 80007da:	b932      	cbnz	r2, 80007ea <HAL_RCC_OscConfig+0xde>
 80007dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007e0:	600b      	str	r3, [r1, #0]
 80007e2:	680b      	ldr	r3, [r1, #0]
 80007e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e8:	e7d4      	b.n	8000794 <HAL_RCC_OscConfig+0x88>
 80007ea:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80007ee:	d1f5      	bne.n	80007dc <HAL_RCC_OscConfig+0xd0>
 80007f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f4:	600b      	str	r3, [r1, #0]
 80007f6:	e7ca      	b.n	800078e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80007f8:	f7ff ff80 	bl	80006fc <HAL_GetTick>
 80007fc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000800:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000802:	2701      	movs	r7, #1
 8000804:	fa96 f3a6 	rbit	r3, r6
 8000808:	680a      	ldr	r2, [r1, #0]
 800080a:	fa96 f3a6 	rbit	r3, r6
 800080e:	fab3 f383 	clz	r3, r3
 8000812:	f003 031f 	and.w	r3, r3, #31
 8000816:	fa07 f303 	lsl.w	r3, r7, r3
 800081a:	4213      	tst	r3, r2
 800081c:	f43f af7c 	beq.w	8000718 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000820:	f7ff ff6c 	bl	80006fc <HAL_GetTick>
 8000824:	1b40      	subs	r0, r0, r5
 8000826:	2864      	cmp	r0, #100	; 0x64
 8000828:	d9ec      	bls.n	8000804 <HAL_RCC_OscConfig+0xf8>
 800082a:	e7d3      	b.n	80007d4 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800082c:	495e      	ldr	r1, [pc, #376]	; (80009a8 <HAL_RCC_OscConfig+0x29c>)
 800082e:	684b      	ldr	r3, [r1, #4]
 8000830:	f013 0f0c 	tst.w	r3, #12
 8000834:	d007      	beq.n	8000846 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000836:	684b      	ldr	r3, [r1, #4]
 8000838:	f003 030c 	and.w	r3, r3, #12
 800083c:	2b08      	cmp	r3, #8
 800083e:	d121      	bne.n	8000884 <HAL_RCC_OscConfig+0x178>
 8000840:	684b      	ldr	r3, [r1, #4]
 8000842:	03df      	lsls	r7, r3, #15
 8000844:	d41e      	bmi.n	8000884 <HAL_RCC_OscConfig+0x178>
 8000846:	2302      	movs	r3, #2
 8000848:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800084c:	6808      	ldr	r0, [r1, #0]
 800084e:	fa93 f3a3 	rbit	r3, r3
 8000852:	fab3 f383 	clz	r3, r3
 8000856:	f003 031f 	and.w	r3, r3, #31
 800085a:	2201      	movs	r2, #1
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	4203      	tst	r3, r0
 8000862:	d002      	beq.n	800086a <HAL_RCC_OscConfig+0x15e>
 8000864:	6923      	ldr	r3, [r4, #16]
 8000866:	4293      	cmp	r3, r2
 8000868:	d189      	bne.n	800077e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800086a:	6808      	ldr	r0, [r1, #0]
 800086c:	23f8      	movs	r3, #248	; 0xf8
 800086e:	fa93 f3a3 	rbit	r3, r3
 8000872:	fab3 f283 	clz	r2, r3
 8000876:	6963      	ldr	r3, [r4, #20]
 8000878:	4093      	lsls	r3, r2
 800087a:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 800087e:	4313      	orrs	r3, r2
 8000880:	600b      	str	r3, [r1, #0]
 8000882:	e74d      	b.n	8000720 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000884:	6922      	ldr	r2, [r4, #16]
 8000886:	2501      	movs	r5, #1
 8000888:	b302      	cbz	r2, 80008cc <HAL_RCC_OscConfig+0x1c0>
 800088a:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800088e:	fab3 f383 	clz	r3, r3
 8000892:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000896:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	2702      	movs	r7, #2
 800089e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80008a0:	f7ff ff2c 	bl	80006fc <HAL_GetTick>
 80008a4:	4606      	mov	r6, r0
 80008a6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008aa:	680a      	ldr	r2, [r1, #0]
 80008ac:	fa97 f3a7 	rbit	r3, r7
 80008b0:	fab3 f383 	clz	r3, r3
 80008b4:	f003 031f 	and.w	r3, r3, #31
 80008b8:	fa05 f303 	lsl.w	r3, r5, r3
 80008bc:	4213      	tst	r3, r2
 80008be:	d1d4      	bne.n	800086a <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008c0:	f7ff ff1c 	bl	80006fc <HAL_GetTick>
 80008c4:	1b80      	subs	r0, r0, r6
 80008c6:	2802      	cmp	r0, #2
 80008c8:	d9ed      	bls.n	80008a6 <HAL_RCC_OscConfig+0x19a>
 80008ca:	e783      	b.n	80007d4 <HAL_RCC_OscConfig+0xc8>
 80008cc:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80008d0:	fab3 f383 	clz	r3, r3
 80008d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	2702      	movs	r7, #2
 80008e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008e2:	f7ff ff0b 	bl	80006fc <HAL_GetTick>
 80008e6:	4606      	mov	r6, r0
 80008e8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008ec:	680a      	ldr	r2, [r1, #0]
 80008ee:	fa97 f3a7 	rbit	r3, r7
 80008f2:	fab3 f383 	clz	r3, r3
 80008f6:	f003 031f 	and.w	r3, r3, #31
 80008fa:	fa05 f303 	lsl.w	r3, r5, r3
 80008fe:	4213      	tst	r3, r2
 8000900:	f43f af0e 	beq.w	8000720 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000904:	f7ff fefa 	bl	80006fc <HAL_GetTick>
 8000908:	1b80      	subs	r0, r0, r6
 800090a:	2802      	cmp	r0, #2
 800090c:	d9ec      	bls.n	80008e8 <HAL_RCC_OscConfig+0x1dc>
 800090e:	e761      	b.n	80007d4 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000910:	69a2      	ldr	r2, [r4, #24]
 8000912:	4d25      	ldr	r5, [pc, #148]	; (80009a8 <HAL_RCC_OscConfig+0x29c>)
 8000914:	4825      	ldr	r0, [pc, #148]	; (80009ac <HAL_RCC_OscConfig+0x2a0>)
 8000916:	2101      	movs	r1, #1
 8000918:	b312      	cbz	r2, 8000960 <HAL_RCC_OscConfig+0x254>
 800091a:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 800091e:	fab3 f383 	clz	r3, r3
 8000922:	4403      	add	r3, r0
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	2602      	movs	r6, #2
 8000928:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 800092a:	f7ff fee7 	bl	80006fc <HAL_GetTick>
 800092e:	4607      	mov	r7, r0
 8000930:	fa96 f3a6 	rbit	r3, r6
 8000934:	fa96 f3a6 	rbit	r3, r6
 8000938:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800093c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800093e:	fa96 f3a6 	rbit	r3, r6
 8000942:	fab3 f383 	clz	r3, r3
 8000946:	f003 031f 	and.w	r3, r3, #31
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	4213      	tst	r3, r2
 8000950:	f47f aeea 	bne.w	8000728 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000954:	f7ff fed2 	bl	80006fc <HAL_GetTick>
 8000958:	1bc0      	subs	r0, r0, r7
 800095a:	2802      	cmp	r0, #2
 800095c:	d9e8      	bls.n	8000930 <HAL_RCC_OscConfig+0x224>
 800095e:	e739      	b.n	80007d4 <HAL_RCC_OscConfig+0xc8>
 8000960:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8000964:	fab3 f383 	clz	r3, r3
 8000968:	4403      	add	r3, r0
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	2602      	movs	r6, #2
 800096e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000970:	f7ff fec4 	bl	80006fc <HAL_GetTick>
 8000974:	4607      	mov	r7, r0
 8000976:	fa96 f3a6 	rbit	r3, r6
 800097a:	fa96 f3a6 	rbit	r3, r6
 800097e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000982:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000984:	fa96 f3a6 	rbit	r3, r6
 8000988:	fab3 f383 	clz	r3, r3
 800098c:	f003 031f 	and.w	r3, r3, #31
 8000990:	fa01 f303 	lsl.w	r3, r1, r3
 8000994:	4213      	tst	r3, r2
 8000996:	f43f aec7 	beq.w	8000728 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800099a:	f7ff feaf 	bl	80006fc <HAL_GetTick>
 800099e:	1bc0      	subs	r0, r0, r7
 80009a0:	2802      	cmp	r0, #2
 80009a2:	d9e8      	bls.n	8000976 <HAL_RCC_OscConfig+0x26a>
 80009a4:	e716      	b.n	80007d4 <HAL_RCC_OscConfig+0xc8>
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009b0:	498a      	ldr	r1, [pc, #552]	; (8000bdc <HAL_RCC_OscConfig+0x4d0>)
 80009b2:	69cb      	ldr	r3, [r1, #28]
 80009b4:	00d8      	lsls	r0, r3, #3
 80009b6:	d433      	bmi.n	8000a20 <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009b8:	69cb      	ldr	r3, [r1, #28]
 80009ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009be:	61cb      	str	r3, [r1, #28]
 80009c0:	69cb      	ldr	r3, [r1, #28]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009ca:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009cc:	4e84      	ldr	r6, [pc, #528]	; (8000be0 <HAL_RCC_OscConfig+0x4d4>)
 80009ce:	6833      	ldr	r3, [r6, #0]
 80009d0:	05da      	lsls	r2, r3, #23
 80009d2:	d527      	bpl.n	8000a24 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d4:	68e3      	ldr	r3, [r4, #12]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d134      	bne.n	8000a44 <HAL_RCC_OscConfig+0x338>
 80009da:	6a0b      	ldr	r3, [r1, #32]
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80009e2:	f7ff fe8b 	bl	80006fc <HAL_GetTick>
 80009e6:	2602      	movs	r6, #2
 80009e8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009ea:	f04f 0801 	mov.w	r8, #1
 80009ee:	fa96 f3a6 	rbit	r3, r6
 80009f2:	fa96 f3a6 	rbit	r3, r6
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d061      	beq.n	8000abe <HAL_RCC_OscConfig+0x3b2>
 80009fa:	6a0a      	ldr	r2, [r1, #32]
 80009fc:	fa96 f3a6 	rbit	r3, r6
 8000a00:	fab3 f383 	clz	r3, r3
 8000a04:	f003 031f 	and.w	r3, r3, #31
 8000a08:	fa08 f303 	lsl.w	r3, r8, r3
 8000a0c:	4213      	tst	r3, r2
 8000a0e:	d04e      	beq.n	8000aae <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	f43f ae8d 	beq.w	8000730 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a16:	69cb      	ldr	r3, [r1, #28]
 8000a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	61cb      	str	r3, [r1, #28]
 8000a1e:	e687      	b.n	8000730 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000a20:	2500      	movs	r5, #0
 8000a22:	e7d3      	b.n	80009cc <HAL_RCC_OscConfig+0x2c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a24:	6833      	ldr	r3, [r6, #0]
 8000a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a2c:	f7ff fe66 	bl	80006fc <HAL_GetTick>
 8000a30:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a32:	6833      	ldr	r3, [r6, #0]
 8000a34:	05db      	lsls	r3, r3, #23
 8000a36:	d4cd      	bmi.n	80009d4 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a38:	f7ff fe60 	bl	80006fc <HAL_GetTick>
 8000a3c:	1bc0      	subs	r0, r0, r7
 8000a3e:	2864      	cmp	r0, #100	; 0x64
 8000a40:	d9f7      	bls.n	8000a32 <HAL_RCC_OscConfig+0x326>
 8000a42:	e6c7      	b.n	80007d4 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a44:	bb2b      	cbnz	r3, 8000a92 <HAL_RCC_OscConfig+0x386>
 8000a46:	6a0b      	ldr	r3, [r1, #32]
 8000a48:	f023 0301 	bic.w	r3, r3, #1
 8000a4c:	620b      	str	r3, [r1, #32]
 8000a4e:	6a0b      	ldr	r3, [r1, #32]
 8000a50:	f023 0304 	bic.w	r3, r3, #4
 8000a54:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000a56:	f7ff fe51 	bl	80006fc <HAL_GetTick>
 8000a5a:	2602      	movs	r6, #2
 8000a5c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a5e:	f04f 0801 	mov.w	r8, #1
 8000a62:	fa96 f3a6 	rbit	r3, r6
 8000a66:	fa96 f3a6 	rbit	r3, r6
 8000a6a:	b363      	cbz	r3, 8000ac6 <HAL_RCC_OscConfig+0x3ba>
 8000a6c:	6a0a      	ldr	r2, [r1, #32]
 8000a6e:	fa96 f3a6 	rbit	r3, r6
 8000a72:	fab3 f383 	clz	r3, r3
 8000a76:	f003 031f 	and.w	r3, r3, #31
 8000a7a:	fa08 f303 	lsl.w	r3, r8, r3
 8000a7e:	4213      	tst	r3, r2
 8000a80:	d0c6      	beq.n	8000a10 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a82:	f7ff fe3b 	bl	80006fc <HAL_GetTick>
 8000a86:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a8a:	1bc0      	subs	r0, r0, r7
 8000a8c:	4298      	cmp	r0, r3
 8000a8e:	d9e8      	bls.n	8000a62 <HAL_RCC_OscConfig+0x356>
 8000a90:	e6a0      	b.n	80007d4 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a92:	2b05      	cmp	r3, #5
 8000a94:	6a0b      	ldr	r3, [r1, #32]
 8000a96:	d103      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x394>
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	620b      	str	r3, [r1, #32]
 8000a9e:	e79c      	b.n	80009da <HAL_RCC_OscConfig+0x2ce>
 8000aa0:	f023 0301 	bic.w	r3, r3, #1
 8000aa4:	620b      	str	r3, [r1, #32]
 8000aa6:	6a0b      	ldr	r3, [r1, #32]
 8000aa8:	f023 0304 	bic.w	r3, r3, #4
 8000aac:	e798      	b.n	80009e0 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aae:	f7ff fe25 	bl	80006fc <HAL_GetTick>
 8000ab2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ab6:	1bc0      	subs	r0, r0, r7
 8000ab8:	4298      	cmp	r0, r3
 8000aba:	d998      	bls.n	80009ee <HAL_RCC_OscConfig+0x2e2>
 8000abc:	e68a      	b.n	80007d4 <HAL_RCC_OscConfig+0xc8>
 8000abe:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000ac4:	e79a      	b.n	80009fc <HAL_RCC_OscConfig+0x2f0>
 8000ac6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aca:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000acc:	e7cf      	b.n	8000a6e <HAL_RCC_OscConfig+0x362>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ace:	4943      	ldr	r1, [pc, #268]	; (8000bdc <HAL_RCC_OscConfig+0x4d0>)
 8000ad0:	684b      	ldr	r3, [r1, #4]
 8000ad2:	f003 030c 	and.w	r3, r3, #12
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	f43f ae51 	beq.w	800077e <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000adc:	2a02      	cmp	r2, #2
 8000ade:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ae2:	d154      	bne.n	8000b8e <HAL_RCC_OscConfig+0x482>
 8000ae4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000ae8:	fab3 f383 	clz	r3, r3
 8000aec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000af0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000afa:	f7ff fdff 	bl	80006fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000afe:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8000be4 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8000b02:	4606      	mov	r6, r0
 8000b04:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b08:	2501      	movs	r5, #1
 8000b0a:	fa97 f3a7 	rbit	r3, r7
 8000b0e:	680a      	ldr	r2, [r1, #0]
 8000b10:	fa97 f3a7 	rbit	r3, r7
 8000b14:	fab3 f383 	clz	r3, r3
 8000b18:	f003 031f 	and.w	r3, r3, #31
 8000b1c:	fa05 f303 	lsl.w	r3, r5, r3
 8000b20:	4213      	tst	r3, r2
 8000b22:	d12e      	bne.n	8000b82 <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b24:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8000b28:	684a      	ldr	r2, [r1, #4]
 8000b2a:	4303      	orrs	r3, r0
 8000b2c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000b30:	4313      	orrs	r3, r2
 8000b32:	604b      	str	r3, [r1, #4]
 8000b34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b38:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000b3c:	fab3 f383 	clz	r3, r3
 8000b40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b48:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4a:	4f26      	ldr	r7, [pc, #152]	; (8000be4 <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 8000b4c:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000b4e:	f7ff fdd5 	bl	80006fc <HAL_GetTick>
 8000b52:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000b56:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b58:	2601      	movs	r6, #1
 8000b5a:	fa95 f3a5 	rbit	r3, r5
 8000b5e:	680a      	ldr	r2, [r1, #0]
 8000b60:	fa95 f3a5 	rbit	r3, r5
 8000b64:	fab3 f383 	clz	r3, r3
 8000b68:	f003 031f 	and.w	r3, r3, #31
 8000b6c:	fa06 f303 	lsl.w	r3, r6, r3
 8000b70:	4213      	tst	r3, r2
 8000b72:	f47f ade1 	bne.w	8000738 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b76:	f7ff fdc1 	bl	80006fc <HAL_GetTick>
 8000b7a:	1b00      	subs	r0, r0, r4
 8000b7c:	42b8      	cmp	r0, r7
 8000b7e:	d9ec      	bls.n	8000b5a <HAL_RCC_OscConfig+0x44e>
 8000b80:	e628      	b.n	80007d4 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b82:	f7ff fdbb 	bl	80006fc <HAL_GetTick>
 8000b86:	1b80      	subs	r0, r0, r6
 8000b88:	4540      	cmp	r0, r8
 8000b8a:	d9be      	bls.n	8000b0a <HAL_RCC_OscConfig+0x3fe>
 8000b8c:	e622      	b.n	80007d4 <HAL_RCC_OscConfig+0xc8>
 8000b8e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b92:	fab3 f383 	clz	r3, r3
 8000b96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fdaa 	bl	80006fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba8:	4f0e      	ldr	r7, [pc, #56]	; (8000be4 <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 8000baa:	4604      	mov	r4, r0
 8000bac:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bb0:	2601      	movs	r6, #1
 8000bb2:	fa95 f3a5 	rbit	r3, r5
 8000bb6:	680a      	ldr	r2, [r1, #0]
 8000bb8:	fa95 f3a5 	rbit	r3, r5
 8000bbc:	fab3 f383 	clz	r3, r3
 8000bc0:	f003 031f 	and.w	r3, r3, #31
 8000bc4:	fa06 f303 	lsl.w	r3, r6, r3
 8000bc8:	4213      	tst	r3, r2
 8000bca:	f43f adb5 	beq.w	8000738 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bce:	f7ff fd95 	bl	80006fc <HAL_GetTick>
 8000bd2:	1b00      	subs	r0, r0, r4
 8000bd4:	42b8      	cmp	r0, r7
 8000bd6:	d9ec      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x4a6>
 8000bd8:	e5fc      	b.n	80007d4 <HAL_RCC_OscConfig+0xc8>
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40007000 	.word	0x40007000
 8000be4:	00030d40 	.word	0x00030d40

08000be8 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000be8:	4a50      	ldr	r2, [pc, #320]	; (8000d2c <HAL_RCC_ClockConfig+0x144>)
{
 8000bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bec:	6813      	ldr	r3, [r2, #0]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	428b      	cmp	r3, r1
{
 8000bf4:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bf6:	d31b      	bcc.n	8000c30 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bf8:	6822      	ldr	r2, [r4, #0]
 8000bfa:	0790      	lsls	r0, r2, #30
 8000bfc:	d424      	bmi.n	8000c48 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bfe:	07d2      	lsls	r2, r2, #31
 8000c00:	d42a      	bmi.n	8000c58 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c02:	4a4a      	ldr	r2, [pc, #296]	; (8000d2c <HAL_RCC_ClockConfig+0x144>)
 8000c04:	6813      	ldr	r3, [r2, #0]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d87a      	bhi.n	8000d04 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c0e:	6820      	ldr	r0, [r4, #0]
 8000c10:	0743      	lsls	r3, r0, #29
 8000c12:	f100 8082 	bmi.w	8000d1a <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c16:	f010 0008 	ands.w	r0, r0, #8
 8000c1a:	d014      	beq.n	8000c46 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c1c:	4a44      	ldr	r2, [pc, #272]	; (8000d30 <HAL_RCC_ClockConfig+0x148>)
 8000c1e:	6921      	ldr	r1, [r4, #16]
 8000c20:	6853      	ldr	r3, [r2, #4]
 8000c22:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c2a:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e00a      	b.n	8000c46 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c30:	6813      	ldr	r3, [r2, #0]
 8000c32:	f023 0307 	bic.w	r3, r3, #7
 8000c36:	430b      	orrs	r3, r1
 8000c38:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c3a:	6813      	ldr	r3, [r2, #0]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d0d9      	beq.n	8000bf8 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8000c44:	2001      	movs	r0, #1
}
 8000c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c48:	4839      	ldr	r0, [pc, #228]	; (8000d30 <HAL_RCC_ClockConfig+0x148>)
 8000c4a:	68a5      	ldr	r5, [r4, #8]
 8000c4c:	6843      	ldr	r3, [r0, #4]
 8000c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c52:	432b      	orrs	r3, r5
 8000c54:	6043      	str	r3, [r0, #4]
 8000c56:	e7d2      	b.n	8000bfe <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c58:	6862      	ldr	r2, [r4, #4]
 8000c5a:	4d35      	ldr	r5, [pc, #212]	; (8000d30 <HAL_RCC_ClockConfig+0x148>)
 8000c5c:	2a01      	cmp	r2, #1
 8000c5e:	d127      	bne.n	8000cb0 <HAL_RCC_ClockConfig+0xc8>
 8000c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c64:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c68:	6828      	ldr	r0, [r5, #0]
 8000c6a:	fa93 f3a3 	rbit	r3, r3
 8000c6e:	fab3 f383 	clz	r3, r3
 8000c72:	f003 031f 	and.w	r3, r3, #31
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c7c:	d0e2      	beq.n	8000c44 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c7e:	686b      	ldr	r3, [r5, #4]
 8000c80:	f023 0303 	bic.w	r3, r3, #3
 8000c84:	431a      	orrs	r2, r3
 8000c86:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 8000c88:	f7ff fd38 	bl	80006fc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c8c:	6863      	ldr	r3, [r4, #4]
 8000c8e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000c90:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c92:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c96:	d11e      	bne.n	8000cd6 <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c98:	686b      	ldr	r3, [r5, #4]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d0af      	beq.n	8000c02 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ca2:	f7ff fd2b 	bl	80006fc <HAL_GetTick>
 8000ca6:	1b80      	subs	r0, r0, r6
 8000ca8:	42b8      	cmp	r0, r7
 8000caa:	d9f5      	bls.n	8000c98 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000cac:	2003      	movs	r0, #3
 8000cae:	e7ca      	b.n	8000c46 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cb0:	2a02      	cmp	r2, #2
 8000cb2:	bf0c      	ite	eq
 8000cb4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000cb8:	2302      	movne	r3, #2
 8000cba:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cbe:	682e      	ldr	r6, [r5, #0]
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	fab3 f383 	clz	r3, r3
 8000cc8:	f003 031f 	and.w	r3, r3, #31
 8000ccc:	2001      	movs	r0, #1
 8000cce:	fa00 f303 	lsl.w	r3, r0, r3
 8000cd2:	4233      	tst	r3, r6
 8000cd4:	e7d2      	b.n	8000c7c <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d10f      	bne.n	8000cfa <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cda:	686b      	ldr	r3, [r5, #4]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d08e      	beq.n	8000c02 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce4:	f7ff fd0a 	bl	80006fc <HAL_GetTick>
 8000ce8:	1b80      	subs	r0, r0, r6
 8000cea:	42b8      	cmp	r0, r7
 8000cec:	d9f5      	bls.n	8000cda <HAL_RCC_ClockConfig+0xf2>
 8000cee:	e7dd      	b.n	8000cac <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf0:	f7ff fd04 	bl	80006fc <HAL_GetTick>
 8000cf4:	1b80      	subs	r0, r0, r6
 8000cf6:	42b8      	cmp	r0, r7
 8000cf8:	d8d8      	bhi.n	8000cac <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cfa:	686b      	ldr	r3, [r5, #4]
 8000cfc:	f013 0f0c 	tst.w	r3, #12
 8000d00:	d1f6      	bne.n	8000cf0 <HAL_RCC_ClockConfig+0x108>
 8000d02:	e77e      	b.n	8000c02 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d04:	6813      	ldr	r3, [r2, #0]
 8000d06:	f023 0307 	bic.w	r3, r3, #7
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d0e:	6813      	ldr	r3, [r2, #0]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	428b      	cmp	r3, r1
 8000d16:	d195      	bne.n	8000c44 <HAL_RCC_ClockConfig+0x5c>
 8000d18:	e779      	b.n	8000c0e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d1a:	4905      	ldr	r1, [pc, #20]	; (8000d30 <HAL_RCC_ClockConfig+0x148>)
 8000d1c:	68e3      	ldr	r3, [r4, #12]
 8000d1e:	684a      	ldr	r2, [r1, #4]
 8000d20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000d24:	431a      	orrs	r2, r3
 8000d26:	604a      	str	r2, [r1, #4]
 8000d28:	e775      	b.n	8000c16 <HAL_RCC_ClockConfig+0x2e>
 8000d2a:	bf00      	nop
 8000d2c:	40022000 	.word	0x40022000
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d38:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8000eb0 <HAL_GPIO_Init+0x17c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d3c:	4c5d      	ldr	r4, [pc, #372]	; (8000eb4 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 8000d3e:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d40:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d44:	680a      	ldr	r2, [r1, #0]
 8000d46:	fa32 f503 	lsrs.w	r5, r2, r3
 8000d4a:	d102      	bne.n	8000d52 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8000d4c:	b003      	add	sp, #12
 8000d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d52:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 8000d56:	ea1a 0202 	ands.w	r2, sl, r2
 8000d5a:	f000 809e 	beq.w	8000e9a <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d5e:	684d      	ldr	r5, [r1, #4]
 8000d60:	f025 0e10 	bic.w	lr, r5, #16
 8000d64:	f1be 0f02 	cmp.w	lr, #2
 8000d68:	d114      	bne.n	8000d94 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000d6a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000d6e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d72:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000d76:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d7e:	270f      	movs	r7, #15
 8000d80:	fa07 f70b 	lsl.w	r7, r7, fp
 8000d84:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d88:	690e      	ldr	r6, [r1, #16]
 8000d8a:	fa06 f60b 	lsl.w	r6, r6, fp
 8000d8e:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000d90:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8000d94:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d9c:	2603      	movs	r6, #3
 8000d9e:	fa06 f70c 	lsl.w	r7, r6, ip
 8000da2:	ea2b 0b07 	bic.w	fp, fp, r7
 8000da6:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da8:	f005 0703 	and.w	r7, r5, #3
 8000dac:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db0:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db4:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db8:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8000dbc:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dbe:	d811      	bhi.n	8000de4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8000dc0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc2:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc6:	68cf      	ldr	r7, [r1, #12]
 8000dc8:	fa07 f70c 	lsl.w	r7, r7, ip
 8000dcc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000dd0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000dd2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd4:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dd8:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000ddc:	409f      	lsls	r7, r3
 8000dde:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000de2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000de4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de6:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de8:	688e      	ldr	r6, [r1, #8]
 8000dea:	fa06 f60c 	lsl.w	r6, r6, ip
 8000dee:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000df0:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df2:	00ee      	lsls	r6, r5, #3
 8000df4:	d551      	bpl.n	8000e9a <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000dfa:	f046 0601 	orr.w	r6, r6, #1
 8000dfe:	f8c8 6018 	str.w	r6, [r8, #24]
 8000e02:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000e06:	f023 0703 	bic.w	r7, r3, #3
 8000e0a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e0e:	f006 0601 	and.w	r6, r6, #1
 8000e12:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000e16:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e18:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000e1e:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e20:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e24:	f04f 0c0f 	mov.w	ip, #15
 8000e28:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e2c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e30:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e34:	d033      	beq.n	8000e9e <HAL_GPIO_Init+0x16a>
 8000e36:	4e20      	ldr	r6, [pc, #128]	; (8000eb8 <HAL_GPIO_Init+0x184>)
 8000e38:	42b0      	cmp	r0, r6
 8000e3a:	d032      	beq.n	8000ea2 <HAL_GPIO_Init+0x16e>
 8000e3c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e40:	42b0      	cmp	r0, r6
 8000e42:	d030      	beq.n	8000ea6 <HAL_GPIO_Init+0x172>
 8000e44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e48:	42b0      	cmp	r0, r6
 8000e4a:	d02e      	beq.n	8000eaa <HAL_GPIO_Init+0x176>
 8000e4c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e50:	42b0      	cmp	r0, r6
 8000e52:	bf0c      	ite	eq
 8000e54:	2604      	moveq	r6, #4
 8000e56:	2605      	movne	r6, #5
 8000e58:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e5c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e60:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000e62:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e64:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e66:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e6a:	bf0c      	ite	eq
 8000e6c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e6e:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8000e70:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000e72:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e74:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e78:	bf0c      	ite	eq
 8000e7a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e7c:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8000e7e:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000e80:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e82:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e86:	bf0c      	ite	eq
 8000e88:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e8a:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8000e8c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000e8e:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e90:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000e92:	bf54      	ite	pl
 8000e94:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000e96:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8000e98:	60e6      	str	r6, [r4, #12]
    position++;
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	e752      	b.n	8000d44 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e9e:	2600      	movs	r6, #0
 8000ea0:	e7da      	b.n	8000e58 <HAL_GPIO_Init+0x124>
 8000ea2:	2601      	movs	r6, #1
 8000ea4:	e7d8      	b.n	8000e58 <HAL_GPIO_Init+0x124>
 8000ea6:	2602      	movs	r6, #2
 8000ea8:	e7d6      	b.n	8000e58 <HAL_GPIO_Init+0x124>
 8000eaa:	2603      	movs	r6, #3
 8000eac:	e7d4      	b.n	8000e58 <HAL_GPIO_Init+0x124>
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010400 	.word	0x40010400
 8000eb8:	48000400 	.word	0x48000400

08000ebc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ebc:	b10a      	cbz	r2, 8000ec2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ebe:	6181      	str	r1, [r0, #24]
 8000ec0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ec2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000ec4:	4770      	bx	lr
 8000ec6:	0000      	movs	r0, r0

08000ec8 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ec8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000eca:	6881      	ldr	r1, [r0, #8]
 8000ecc:	69c3      	ldr	r3, [r0, #28]
{
 8000ece:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ed0:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ed2:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ed4:	4329      	orrs	r1, r5
 8000ed6:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ed8:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000edc:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ede:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ee2:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ee4:	4321      	orrs	r1, r4
 8000ee6:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ee8:	6851      	ldr	r1, [r2, #4]
 8000eea:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000eec:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000eee:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000ef2:	4321      	orrs	r1, r4
 8000ef4:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000ef6:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000ef8:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000efa:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000efe:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f00:	4321      	orrs	r1, r4
 8000f02:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f04:	4962      	ldr	r1, [pc, #392]	; (8001090 <UART_SetConfig+0x1c8>)
 8000f06:	428a      	cmp	r2, r1
 8000f08:	d116      	bne.n	8000f38 <UART_SetConfig+0x70>
 8000f0a:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 8000f0e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000f10:	f001 0103 	and.w	r1, r1, #3
 8000f14:	3901      	subs	r1, #1
 8000f16:	2902      	cmp	r1, #2
 8000f18:	f200 80b2 	bhi.w	8001080 <UART_SetConfig+0x1b8>
 8000f1c:	4c5d      	ldr	r4, [pc, #372]	; (8001094 <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f22:	5c61      	ldrb	r1, [r4, r1]
 8000f24:	d177      	bne.n	8001016 <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 8000f26:	2908      	cmp	r1, #8
 8000f28:	d872      	bhi.n	8001010 <UART_SetConfig+0x148>
 8000f2a:	e8df f001 	tbb	[pc, r1]
 8000f2e:	acac      	.short	0xacac
 8000f30:	71ac7124 	.word	0x71ac7124
 8000f34:	7171      	.short	0x7171
 8000f36:	a4          	.byte	0xa4
 8000f37:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f38:	4957      	ldr	r1, [pc, #348]	; (8001098 <UART_SetConfig+0x1d0>)
 8000f3a:	428a      	cmp	r2, r1
 8000f3c:	d12c      	bne.n	8000f98 <UART_SetConfig+0xd0>
 8000f3e:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 8000f42:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000f44:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8000f48:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8000f4c:	f000 8090 	beq.w	8001070 <UART_SetConfig+0x1a8>
 8000f50:	d80b      	bhi.n	8000f6a <UART_SetConfig+0xa2>
 8000f52:	2900      	cmp	r1, #0
 8000f54:	f000 8094 	beq.w	8001080 <UART_SetConfig+0x1b8>
 8000f58:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8000f5c:	f000 8090 	beq.w	8001080 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f64:	d054      	beq.n	8001010 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000f66:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8000f68:	e015      	b.n	8000f96 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f6a:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8000f6e:	d1f7      	bne.n	8000f60 <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f74:	d166      	bne.n	8001044 <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000f76:	6841      	ldr	r1, [r0, #4]
 8000f78:	084b      	lsrs	r3, r1, #1
 8000f7a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8000f7e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8000f86:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f88:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8000f8a:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000f8e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8000f92:	430b      	orrs	r3, r1
 8000f94:	60d3      	str	r3, [r2, #12]

}
 8000f96:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f98:	4940      	ldr	r1, [pc, #256]	; (800109c <UART_SetConfig+0x1d4>)
 8000f9a:	428a      	cmp	r2, r1
 8000f9c:	d110      	bne.n	8000fc0 <UART_SetConfig+0xf8>
 8000f9e:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 8000fa2:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000fa4:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8000fa8:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8000fac:	d060      	beq.n	8001070 <UART_SetConfig+0x1a8>
 8000fae:	d804      	bhi.n	8000fba <UART_SetConfig+0xf2>
 8000fb0:	2900      	cmp	r1, #0
 8000fb2:	d065      	beq.n	8001080 <UART_SetConfig+0x1b8>
 8000fb4:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8000fb8:	e7d0      	b.n	8000f5c <UART_SetConfig+0x94>
 8000fba:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8000fbe:	e7d6      	b.n	8000f6e <UART_SetConfig+0xa6>
 8000fc0:	4937      	ldr	r1, [pc, #220]	; (80010a0 <UART_SetConfig+0x1d8>)
 8000fc2:	428a      	cmp	r2, r1
 8000fc4:	d110      	bne.n	8000fe8 <UART_SetConfig+0x120>
 8000fc6:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 8000fca:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000fcc:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8000fd0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000fd4:	d04c      	beq.n	8001070 <UART_SetConfig+0x1a8>
 8000fd6:	d804      	bhi.n	8000fe2 <UART_SetConfig+0x11a>
 8000fd8:	2900      	cmp	r1, #0
 8000fda:	d051      	beq.n	8001080 <UART_SetConfig+0x1b8>
 8000fdc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000fe0:	e7bc      	b.n	8000f5c <UART_SetConfig+0x94>
 8000fe2:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8000fe6:	e7c2      	b.n	8000f6e <UART_SetConfig+0xa6>
 8000fe8:	492e      	ldr	r1, [pc, #184]	; (80010a4 <UART_SetConfig+0x1dc>)
 8000fea:	428a      	cmp	r2, r1
 8000fec:	d1b8      	bne.n	8000f60 <UART_SetConfig+0x98>
 8000fee:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8000ff2:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000ff4:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 8000ff8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ffc:	d038      	beq.n	8001070 <UART_SetConfig+0x1a8>
 8000ffe:	d804      	bhi.n	800100a <UART_SetConfig+0x142>
 8001000:	2900      	cmp	r1, #0
 8001002:	d03d      	beq.n	8001080 <UART_SetConfig+0x1b8>
 8001004:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001008:	e7a8      	b.n	8000f5c <UART_SetConfig+0x94>
 800100a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800100e:	e7ae      	b.n	8000f6e <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 8001010:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001012:	2300      	movs	r3, #0
 8001014:	e7b9      	b.n	8000f8a <UART_SetConfig+0xc2>
    switch (clocksource)
 8001016:	2908      	cmp	r1, #8
 8001018:	d8a5      	bhi.n	8000f66 <UART_SetConfig+0x9e>
 800101a:	a301      	add	r3, pc, #4	; (adr r3, 8001020 <UART_SetConfig+0x158>)
 800101c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001020:	0800105d 	.word	0x0800105d
 8001024:	0800105d 	.word	0x0800105d
 8001028:	08001045 	.word	0x08001045
 800102c:	08000f67 	.word	0x08000f67
 8001030:	0800105d 	.word	0x0800105d
 8001034:	08000f67 	.word	0x08000f67
 8001038:	08000f67 	.word	0x08000f67
 800103c:	08000f67 	.word	0x08000f67
 8001040:	08001067 	.word	0x08001067
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001044:	6841      	ldr	r1, [r0, #4]
 8001046:	084b      	lsrs	r3, r1, #1
 8001048:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800104c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001050:	fbb3 f3f1 	udiv	r3, r3, r1
 8001054:	b29b      	uxth	r3, r3
 8001056:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001058:	2000      	movs	r0, #0
        break;
 800105a:	e79c      	b.n	8000f96 <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800105c:	6841      	ldr	r1, [r0, #4]
 800105e:	084b      	lsrs	r3, r1, #1
 8001060:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8001064:	e7f4      	b.n	8001050 <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001066:	6841      	ldr	r1, [r0, #4]
 8001068:	084b      	lsrs	r3, r1, #1
 800106a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800106e:	e7ef      	b.n	8001050 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001074:	d1f7      	bne.n	8001066 <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001076:	6841      	ldr	r1, [r0, #4]
 8001078:	084b      	lsrs	r3, r1, #1
 800107a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800107e:	e780      	b.n	8000f82 <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001084:	d1ea      	bne.n	800105c <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001086:	6841      	ldr	r1, [r0, #4]
 8001088:	084b      	lsrs	r3, r1, #1
 800108a:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 800108e:	e778      	b.n	8000f82 <UART_SetConfig+0xba>
 8001090:	40013800 	.word	0x40013800
 8001094:	0800163c 	.word	0x0800163c
 8001098:	40004400 	.word	0x40004400
 800109c:	40004800 	.word	0x40004800
 80010a0:	40004c00 	.word	0x40004c00
 80010a4:	40005000 	.word	0x40005000

080010a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80010a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010aa:	9f06      	ldr	r7, [sp, #24]
 80010ac:	4604      	mov	r4, r0
 80010ae:	4615      	mov	r5, r2
 80010b0:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80010b2:	6822      	ldr	r2, [r4, #0]
 80010b4:	69d3      	ldr	r3, [r2, #28]
 80010b6:	ea31 0303 	bics.w	r3, r1, r3
 80010ba:	bf0c      	ite	eq
 80010bc:	2301      	moveq	r3, #1
 80010be:	2300      	movne	r3, #0
 80010c0:	42ab      	cmp	r3, r5
 80010c2:	d001      	beq.n	80010c8 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80010c4:	2000      	movs	r0, #0
 80010c6:	e014      	b.n	80010f2 <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 80010c8:	1c7b      	adds	r3, r7, #1
 80010ca:	d0f3      	beq.n	80010b4 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80010cc:	b997      	cbnz	r7, 80010f4 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80010d6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80010e0:	2320      	movs	r3, #32
 80010e2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80010e6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80010ea:	2300      	movs	r3, #0
 80010ec:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80010f0:	2003      	movs	r0, #3
}
 80010f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80010f4:	f7ff fb02 	bl	80006fc <HAL_GetTick>
 80010f8:	1b80      	subs	r0, r0, r6
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	d9d9      	bls.n	80010b2 <UART_WaitOnFlagUntilTimeout+0xa>
 80010fe:	e7e6      	b.n	80010ce <UART_WaitOnFlagUntilTimeout+0x26>

08001100 <UART_CheckIdleState>:
{
 8001100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001102:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001104:	2100      	movs	r1, #0
 8001106:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001108:	f7ff faf8 	bl	80006fc <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001112:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001114:	d417      	bmi.n	8001146 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	075b      	lsls	r3, r3, #29
 800111c:	d50a      	bpl.n	8001134 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800111e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	462b      	mov	r3, r5
 8001128:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800112c:	4620      	mov	r0, r4
 800112e:	f7ff ffbb 	bl	80010a8 <UART_WaitOnFlagUntilTimeout>
 8001132:	b9a0      	cbnz	r0, 800115e <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001134:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001136:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001138:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800113c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001140:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001144:	e00c      	b.n	8001160 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001146:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	460a      	mov	r2, r1
 800114e:	4603      	mov	r3, r0
 8001150:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff ffa7 	bl	80010a8 <UART_WaitOnFlagUntilTimeout>
 800115a:	2800      	cmp	r0, #0
 800115c:	d0db      	beq.n	8001116 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800115e:	2003      	movs	r0, #3
}
 8001160:	b003      	add	sp, #12
 8001162:	bd30      	pop	{r4, r5, pc}

08001164 <HAL_UART_Init>:
{
 8001164:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001166:	4604      	mov	r4, r0
 8001168:	b328      	cbz	r0, 80011b6 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 800116a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800116e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001172:	b90b      	cbnz	r3, 8001178 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8001174:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8001178:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800117a:	2324      	movs	r3, #36	; 0x24
 800117c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001180:	6813      	ldr	r3, [r2, #0]
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001188:	4620      	mov	r0, r4
 800118a:	f7ff fe9d 	bl	8000ec8 <UART_SetConfig>
 800118e:	2801      	cmp	r0, #1
 8001190:	d011      	beq.n	80011b6 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800119a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80011a2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 80011aa:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80011ac:	601a      	str	r2, [r3, #0]
}
 80011ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 80011b2:	f7ff bfa5 	b.w	8001100 <UART_CheckIdleState>
}
 80011b6:	2001      	movs	r0, #1
 80011b8:	bd10      	pop	{r4, pc}

080011ba <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011bc:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80011be:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80011c2:	2b20      	cmp	r3, #32
{
 80011c4:	460d      	mov	r5, r1
 80011c6:	4604      	mov	r4, r0
 80011c8:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80011ca:	d14a      	bne.n	8001262 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 80011cc:	2d00      	cmp	r5, #0
 80011ce:	d046      	beq.n	800125e <HAL_UART_Transmit+0xa4>
 80011d0:	2a00      	cmp	r2, #0
 80011d2:	d044      	beq.n	800125e <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80011d4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d042      	beq.n	8001262 <HAL_UART_Transmit+0xa8>
 80011dc:	2301      	movs	r3, #1
 80011de:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80011e6:	2321      	movs	r3, #33	; 0x21
 80011e8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80011ec:	f7ff fa86 	bl	80006fc <HAL_GetTick>

    huart->TxXferSize = Size;
 80011f0:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80011f4:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80011f6:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80011fa:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80011fe:	b292      	uxth	r2, r2
 8001200:	b962      	cbnz	r2, 800121c <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001202:	9600      	str	r6, [sp, #0]
 8001204:	463b      	mov	r3, r7
 8001206:	2140      	movs	r1, #64	; 0x40
 8001208:	4620      	mov	r0, r4
 800120a:	f7ff ff4d 	bl	80010a8 <UART_WaitOnFlagUntilTimeout>
 800120e:	b998      	cbnz	r0, 8001238 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001210:	2320      	movs	r3, #32
 8001212:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001216:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 800121a:	e00e      	b.n	800123a <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 800121c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001220:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 8001222:	3a01      	subs	r2, #1
 8001224:	b292      	uxth	r2, r2
 8001226:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	4620      	mov	r0, r4
 8001232:	f7ff ff39 	bl	80010a8 <UART_WaitOnFlagUntilTimeout>
 8001236:	b110      	cbz	r0, 800123e <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8001238:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800123a:	b003      	add	sp, #12
 800123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800123e:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001240:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001246:	d107      	bne.n	8001258 <HAL_UART_Transmit+0x9e>
 8001248:	6923      	ldr	r3, [r4, #16]
 800124a:	b92b      	cbnz	r3, 8001258 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800124c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001250:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001254:	8513      	strh	r3, [r2, #40]	; 0x28
 8001256:	e7d0      	b.n	80011fa <HAL_UART_Transmit+0x40>
 8001258:	f815 3b01 	ldrb.w	r3, [r5], #1
 800125c:	e7fa      	b.n	8001254 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 800125e:	2001      	movs	r0, #1
 8001260:	e7eb      	b.n	800123a <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001262:	2002      	movs	r0, #2
 8001264:	e7e9      	b.n	800123a <HAL_UART_Transmit+0x80>

08001266 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001266:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800126a:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800126c:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001270:	2b20      	cmp	r3, #32
{
 8001272:	460d      	mov	r5, r1
 8001274:	4604      	mov	r4, r0
 8001276:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001278:	d15c      	bne.n	8001334 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 800127a:	2d00      	cmp	r5, #0
 800127c:	d058      	beq.n	8001330 <HAL_UART_Receive+0xca>
 800127e:	2a00      	cmp	r2, #0
 8001280:	d056      	beq.n	8001330 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001282:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001286:	2b01      	cmp	r3, #1
 8001288:	d054      	beq.n	8001334 <HAL_UART_Receive+0xce>
 800128a:	2301      	movs	r3, #1
 800128c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8001290:	6803      	ldr	r3, [r0, #0]
 8001292:	f04f 32ff 	mov.w	r2, #4294967295
 8001296:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001298:	2300      	movs	r3, #0
 800129a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800129c:	2322      	movs	r3, #34	; 0x22
 800129e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80012a2:	f7ff fa2b 	bl	80006fc <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80012a6:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 80012a8:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80012ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80012b0:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 80012b2:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80012b6:	d115      	bne.n	80012e4 <HAL_UART_Receive+0x7e>
 80012b8:	6923      	ldr	r3, [r4, #16]
 80012ba:	b98b      	cbnz	r3, 80012e0 <HAL_UART_Receive+0x7a>
 80012bc:	f240 13ff 	movw	r3, #511	; 0x1ff
 80012c0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80012c4:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80012c8:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80012cc:	b280      	uxth	r0, r0
 80012ce:	b980      	cbnz	r0, 80012f2 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80012d0:	2320      	movs	r3, #32
 80012d2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80012d6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 80012da:	b002      	add	sp, #8
 80012dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80012e0:	23ff      	movs	r3, #255	; 0xff
 80012e2:	e7ed      	b.n	80012c0 <HAL_UART_Receive+0x5a>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1ed      	bne.n	80012c4 <HAL_UART_Receive+0x5e>
 80012e8:	6923      	ldr	r3, [r4, #16]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f8      	beq.n	80012e0 <HAL_UART_Receive+0x7a>
 80012ee:	237f      	movs	r3, #127	; 0x7f
 80012f0:	e7e6      	b.n	80012c0 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 80012f2:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80012f6:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 80012f8:	3a01      	subs	r2, #1
 80012fa:	b292      	uxth	r2, r2
 80012fc:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001300:	4643      	mov	r3, r8
 8001302:	2200      	movs	r2, #0
 8001304:	2120      	movs	r1, #32
 8001306:	4620      	mov	r0, r4
 8001308:	f7ff fece 	bl	80010a8 <UART_WaitOnFlagUntilTimeout>
 800130c:	b9a0      	cbnz	r0, 8001338 <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800130e:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001310:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001312:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001316:	d106      	bne.n	8001326 <HAL_UART_Receive+0xc0>
 8001318:	6922      	ldr	r2, [r4, #16]
 800131a:	b922      	cbnz	r2, 8001326 <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800131c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800131e:	403b      	ands	r3, r7
 8001320:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8001324:	e7d0      	b.n	80012c8 <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001328:	403b      	ands	r3, r7
 800132a:	f805 3b01 	strb.w	r3, [r5], #1
 800132e:	e7cb      	b.n	80012c8 <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8001330:	2001      	movs	r0, #1
 8001332:	e7d2      	b.n	80012da <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 8001334:	2002      	movs	r0, #2
 8001336:	e7d0      	b.n	80012da <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8001338:	2003      	movs	r0, #3
 800133a:	e7ce      	b.n	80012da <HAL_UART_Receive+0x74>

0800133c <KeyExpansion>:
  return rsbox[num];
}

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(void)
{
 800133c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800133e:	4a27      	ldr	r2, [pc, #156]	; (80013dc <KeyExpansion+0xa0>)
 8001340:	f852 3b04 	ldr.w	r3, [r2], #4
 8001344:	f103 0110 	add.w	r1, r3, #16
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for(i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8001348:	7818      	ldrb	r0, [r3, #0]
 800134a:	7010      	strb	r0, [r2, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 800134c:	7858      	ldrb	r0, [r3, #1]
 800134e:	7050      	strb	r0, [r2, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8001350:	7898      	ldrb	r0, [r3, #2]
 8001352:	7090      	strb	r0, [r2, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8001354:	78d8      	ldrb	r0, [r3, #3]
 8001356:	70d0      	strb	r0, [r2, #3]
  for(i = 0; i < Nk; ++i)
 8001358:	3304      	adds	r3, #4
 800135a:	428b      	cmp	r3, r1
 800135c:	f102 0204 	add.w	r2, r2, #4
 8001360:	d1f2      	bne.n	8001348 <KeyExpansion+0xc>
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <KeyExpansion+0xa4>)
  return sbox[num];
 8001364:	481f      	ldr	r0, [pc, #124]	; (80013e4 <KeyExpansion+0xa8>)
  for(i = 0; i < Nk; ++i)
 8001366:	2104      	movs	r1, #4
  }

  // All other round keys are found from the previous round keys.
  for(; (i < (Nb * (Nr + 1))); ++i)
  {
    for(j = 0; j < 4; ++j)
 8001368:	681a      	ldr	r2, [r3, #0]
    {
      tempa[j]=RoundKey[(i-1) * 4 + j];
 800136a:	9201      	str	r2, [sp, #4]
    }
    if (i % Nk == 0)
 800136c:	078c      	lsls	r4, r1, #30
 800136e:	d116      	bne.n	800139e <KeyExpansion+0x62>
  return sbox[num];
 8001370:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8001374:	f3c2 2407 	ubfx	r4, r2, #8, #8
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
 8001378:	5d45      	ldrb	r5, [r0, r5]
 800137a:	f88d 5005 	strb.w	r5, [sp, #5]
  return sbox[num];
 800137e:	0e15      	lsrs	r5, r2, #24
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	5d04      	ldrb	r4, [r0, r4]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
 8001384:	5c82      	ldrb	r2, [r0, r2]
 8001386:	f88d 2007 	strb.w	r2, [sp, #7]
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800138a:	eb00 0291 	add.w	r2, r0, r1, lsr #2
        tempa[2] = getSBoxValue(tempa[2]);
 800138e:	5d45      	ldrb	r5, [r0, r5]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8001390:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
        tempa[2] = getSBoxValue(tempa[2]);
 8001394:	f88d 5006 	strb.w	r5, [sp, #6]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8001398:	4062      	eors	r2, r4
 800139a:	f88d 2004 	strb.w	r2, [sp, #4]
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 800139e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80013a2:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80013a6:	4062      	eors	r2, r4
 80013a8:	711a      	strb	r2, [r3, #4]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 80013aa:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80013ae:	f813 2c0b 	ldrb.w	r2, [r3, #-11]
 80013b2:	4062      	eors	r2, r4
 80013b4:	715a      	strb	r2, [r3, #5]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 80013b6:	f89d 4006 	ldrb.w	r4, [sp, #6]
 80013ba:	f813 2c0a 	ldrb.w	r2, [r3, #-10]
 80013be:	4062      	eors	r2, r4
 80013c0:	719a      	strb	r2, [r3, #6]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 80013c2:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80013c6:	f813 2c09 	ldrb.w	r2, [r3, #-9]
  for(; (i < (Nb * (Nr + 1))); ++i)
 80013ca:	3101      	adds	r1, #1
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 80013cc:	4062      	eors	r2, r4
  for(; (i < (Nb * (Nr + 1))); ++i)
 80013ce:	292c      	cmp	r1, #44	; 0x2c
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 80013d0:	71da      	strb	r2, [r3, #7]
  for(; (i < (Nb * (Nr + 1))); ++i)
 80013d2:	f103 0304 	add.w	r3, r3, #4
 80013d6:	d1c7      	bne.n	8001368 <KeyExpansion+0x2c>
  }
}
 80013d8:	b003      	add	sp, #12
 80013da:	bd30      	pop	{r4, r5, pc}
 80013dc:	200003a8 	.word	0x200003a8
 80013e0:	200003b8 	.word	0x200003b8
 80013e4:	20000002 	.word	0x20000002

080013e8 <AddRoundKey>:
  uint8_t i,j;
  for(i=0;i<4;++i)
  {
    for(j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <AddRoundKey+0x30>)
{
 80013ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ec:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80013f0:	0100      	lsls	r0, r0, #4
 80013f2:	1d21      	adds	r1, r4, #4
 80013f4:	1d1a      	adds	r2, r3, #4
 80013f6:	3414      	adds	r4, #20
    for(j = 0; j < 4; ++j)
 80013f8:	1f0b      	subs	r3, r1, #4
 80013fa:	1816      	adds	r6, r2, r0
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 80013fc:	781d      	ldrb	r5, [r3, #0]
 80013fe:	f816 7b01 	ldrb.w	r7, [r6], #1
 8001402:	407d      	eors	r5, r7
 8001404:	f803 5b01 	strb.w	r5, [r3], #1
    for(j = 0; j < 4; ++j)
 8001408:	428b      	cmp	r3, r1
 800140a:	d1f7      	bne.n	80013fc <AddRoundKey+0x14>
  for(i=0;i<4;++i)
 800140c:	1d19      	adds	r1, r3, #4
 800140e:	42a1      	cmp	r1, r4
 8001410:	f100 0004 	add.w	r0, r0, #4
 8001414:	d1f0      	bne.n	80013f8 <AddRoundKey+0x10>
    }
  }
}
 8001416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001418:	200003a8 	.word	0x200003a8

0800141c <SubBytes>:
      if (input_save[4*i+j] & 0x02) {
        volatile int i = 1;
        i+=1;
      }
      #endif
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <SubBytes+0x28>)
  return sbox[num];
 800141e:	480a      	ldr	r0, [pc, #40]	; (8001448 <SubBytes+0x2c>)
 8001420:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
{
 8001424:	b510      	push	{r4, lr}
 8001426:	1d19      	adds	r1, r3, #4
 8001428:	2200      	movs	r2, #0
  return sbox[num];
 800142a:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
 800142e:	5d04      	ldrb	r4, [r0, r4]
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8001430:	f803 4022 	strb.w	r4, [r3, r2, lsl #2]
    for(j = 0; j < 4; ++j)
 8001434:	3201      	adds	r2, #1
 8001436:	2a04      	cmp	r2, #4
 8001438:	d1f7      	bne.n	800142a <SubBytes+0xe>
  for(i = 0; i < 4; ++i)
 800143a:	3301      	adds	r3, #1
 800143c:	428b      	cmp	r3, r1
 800143e:	d1f3      	bne.n	8001428 <SubBytes+0xc>
    }
  }
}
 8001440:	bd10      	pop	{r4, pc}
 8001442:	bf00      	nop
 8001444:	200003a8 	.word	0x200003a8
 8001448:	20000002 	.word	0x20000002

0800144c <ShiftRows>:
        i += 1;
      }
      #endif
  #ifdef JITTER_2
  #endif
  temp           = (*state)[0][1];
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <ShiftRows+0x38>)
 800144e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
  (*state)[0][1] = (*state)[1][1];
 8001452:	7959      	ldrb	r1, [r3, #5]
  temp           = (*state)[0][1];
 8001454:	785a      	ldrb	r2, [r3, #1]
  (*state)[0][1] = (*state)[1][1];
 8001456:	7059      	strb	r1, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8001458:	7a59      	ldrb	r1, [r3, #9]
 800145a:	7159      	strb	r1, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 800145c:	7b59      	ldrb	r1, [r3, #13]
 800145e:	7259      	strb	r1, [r3, #9]
      }
      #endif
  #ifdef JITTER_2
  #endif
  temp           = (*state)[0][2];
  (*state)[0][2] = (*state)[2][2];
 8001460:	7a99      	ldrb	r1, [r3, #10]
  (*state)[3][1] = temp;
 8001462:	735a      	strb	r2, [r3, #13]
  temp           = (*state)[0][2];
 8001464:	789a      	ldrb	r2, [r3, #2]
  (*state)[0][2] = (*state)[2][2];
 8001466:	7099      	strb	r1, [r3, #2]
        i += 1;
      }
      #endif

  temp       = (*state)[1][2];
  (*state)[1][2] = (*state)[3][2];
 8001468:	7b99      	ldrb	r1, [r3, #14]
  (*state)[2][2] = temp;
 800146a:	729a      	strb	r2, [r3, #10]
  temp       = (*state)[1][2];
 800146c:	799a      	ldrb	r2, [r3, #6]
  (*state)[1][2] = (*state)[3][2];
 800146e:	7199      	strb	r1, [r3, #6]
      #endif
  #ifdef JITTER_2
  #endif
  // Rotate third row 3 columns to left
  temp       = (*state)[0][3];
  (*state)[0][3] = (*state)[3][3];
 8001470:	7bd9      	ldrb	r1, [r3, #15]
  (*state)[3][2] = temp;
 8001472:	739a      	strb	r2, [r3, #14]
  temp       = (*state)[0][3];
 8001474:	78da      	ldrb	r2, [r3, #3]
  (*state)[0][3] = (*state)[3][3];
 8001476:	70d9      	strb	r1, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8001478:	7ad9      	ldrb	r1, [r3, #11]
 800147a:	73d9      	strb	r1, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 800147c:	79d9      	ldrb	r1, [r3, #7]
 800147e:	72d9      	strb	r1, [r3, #11]
  (*state)[1][3] = temp;
 8001480:	71da      	strb	r2, [r3, #7]
}
 8001482:	4770      	bx	lr
 8001484:	200003a8 	.word	0x200003a8

08001488 <xtime>:

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001488:	09c3      	lsrs	r3, r0, #7
 800148a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800148e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001492:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
 8001496:	b2c0      	uxtb	r0, r0
 8001498:	4770      	bx	lr
 800149a:	0000      	movs	r0, r0

0800149c <Cipher>:
}


// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
 800149c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0); 
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff ffa1 	bl	80013e8 <AddRoundKey>
    t   = (*state)[i][0];
 80014a6:	4f22      	ldr	r7, [pc, #136]	; (8001530 <Cipher+0x94>)
  
  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for(round = 1; round < Nr; ++round)
 80014a8:	2401      	movs	r4, #1
  {
    SubBytes();
 80014aa:	f7ff ffb7 	bl	800141c <SubBytes>
    ShiftRows();
 80014ae:	f7ff ffcd 	bl	800144c <ShiftRows>
  for(i = 0; i < 4; ++i)
 80014b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80014b6:	f102 0a10 	add.w	sl, r2, #16
    t   = (*state)[i][0];
 80014ba:	f892 9000 	ldrb.w	r9, [r2]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 80014be:	7855      	ldrb	r5, [r2, #1]
 80014c0:	7891      	ldrb	r1, [r2, #2]
 80014c2:	f892 8003 	ldrb.w	r8, [r2, #3]
 80014c6:	ea89 0005 	eor.w	r0, r9, r5
 80014ca:	ea81 0b08 	eor.w	fp, r1, r8
 80014ce:	ea8b 0600 	eor.w	r6, fp, r0
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 80014d2:	f7ff ffd9 	bl	8001488 <xtime>
 80014d6:	ea89 0000 	eor.w	r0, r9, r0
 80014da:	4070      	eors	r0, r6
 80014dc:	7010      	strb	r0, [r2, #0]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80014de:	ea85 0001 	eor.w	r0, r5, r1
 80014e2:	f7ff ffd1 	bl	8001488 <xtime>
 80014e6:	4045      	eors	r5, r0
 80014e8:	4075      	eors	r5, r6
 80014ea:	7055      	strb	r5, [r2, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 80014ec:	4658      	mov	r0, fp
 80014ee:	f7ff ffcb 	bl	8001488 <xtime>
 80014f2:	4041      	eors	r1, r0
 80014f4:	4071      	eors	r1, r6
 80014f6:	7091      	strb	r1, [r2, #2]
    Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80014f8:	ea89 0008 	eor.w	r0, r9, r8
 80014fc:	f7ff ffc4 	bl	8001488 <xtime>
 8001500:	ea88 0800 	eor.w	r8, r8, r0
 8001504:	ea86 0608 	eor.w	r6, r6, r8
 8001508:	70d6      	strb	r6, [r2, #3]
  for(i = 0; i < 4; ++i)
 800150a:	3204      	adds	r2, #4
 800150c:	4592      	cmp	sl, r2
 800150e:	d1d4      	bne.n	80014ba <Cipher+0x1e>
    MixColumns();
    AddRoundKey(round);
 8001510:	4620      	mov	r0, r4
  for(round = 1; round < Nr; ++round)
 8001512:	3401      	adds	r4, #1
 8001514:	b2e4      	uxtb	r4, r4
    AddRoundKey(round);
 8001516:	f7ff ff67 	bl	80013e8 <AddRoundKey>
  for(round = 1; round < Nr; ++round)
 800151a:	2c0a      	cmp	r4, #10
 800151c:	d1c5      	bne.n	80014aa <Cipher+0xe>
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes();
 800151e:	f7ff ff7d 	bl	800141c <SubBytes>
  ShiftRows();
 8001522:	f7ff ff93 	bl	800144c <ShiftRows>
  AddRoundKey(Nr);
 8001526:	4620      	mov	r0, r4
}
 8001528:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  AddRoundKey(Nr);
 800152c:	f7ff bf5c 	b.w	80013e8 <AddRoundKey>
 8001530:	200003a8 	.word	0x200003a8

08001534 <BlockCopy>:
}

static void BlockCopy(uint8_t* output, const uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
 8001534:	1e4b      	subs	r3, r1, #1
 8001536:	3801      	subs	r0, #1
 8001538:	310f      	adds	r1, #15
  {
    output[i] = input[i];
 800153a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800153e:	f800 2f01 	strb.w	r2, [r0, #1]!
  for (i=0;i<KEYLEN;++i)
 8001542:	428b      	cmp	r3, r1
 8001544:	d1f9      	bne.n	800153a <BlockCopy+0x6>
  }
}
 8001546:	4770      	bx	lr

08001548 <AES128_ECB_indp_setkey>:
/* Public functions:                                                         */
/*****************************************************************************/

void AES128_ECB_indp_setkey(uint8_t* key)
{
  Key = key;
 8001548:	4b01      	ldr	r3, [pc, #4]	; (8001550 <AES128_ECB_indp_setkey+0x8>)
 800154a:	6018      	str	r0, [r3, #0]
  KeyExpansion();
 800154c:	f7ff bef6 	b.w	800133c <KeyExpansion>
 8001550:	200003a8 	.word	0x200003a8

08001554 <AES128_ECB_indp_crypto>:
}

void AES128_ECB_indp_crypto(uint8_t* input)
{
 8001554:	b508      	push	{r3, lr}
 8001556:	4601      	mov	r1, r0
  state = (state_t*)input;
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <AES128_ECB_indp_crypto+0x18>)
 800155a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  BlockCopy(input_save, input);
 800155e:	30b8      	adds	r0, #184	; 0xb8
 8001560:	f7ff ffe8 	bl	8001534 <BlockCopy>
  Cipher();
}
 8001564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Cipher();
 8001568:	f7ff bf98 	b.w	800149c <Cipher>
 800156c:	200003a8 	.word	0x200003a8

08001570 <aes_indep_init>:
uint8_t enckey[16];

void aes_indep_init(void)
{
	;
}
 8001570:	4770      	bx	lr

08001572 <aes_indep_key>:

void aes_indep_key(uint8_t * key)
{
    AES128_ECB_indp_setkey(key);
 8001572:	f7ff bfe9 	b.w	8001548 <AES128_ECB_indp_setkey>

08001576 <aes_indep_enc>:
}

void aes_indep_enc(uint8_t * pt)
{
	AES128_ECB_indp_crypto(pt);
 8001576:	f7ff bfed 	b.w	8001554 <AES128_ECB_indp_crypto>

0800157a <aes_indep_enc_pretrigger>:
}

void aes_indep_enc_pretrigger(uint8_t * pt)
{
    ;
}
 800157a:	4770      	bx	lr

0800157c <aes_indep_enc_posttrigger>:
 800157c:	4770      	bx	lr

0800157e <aes_indep_mask>:
    ;
}

void aes_indep_mask(uint8_t * m, uint8_t len)
{
}
 800157e:	4770      	bx	lr

08001580 <Reset_Handler>:
 8001580:	2100      	movs	r1, #0
 8001582:	e003      	b.n	800158c <LoopCopyDataInit>

08001584 <CopyDataInit>:
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <LoopForever+0x2>)
 8001586:	585b      	ldr	r3, [r3, r1]
 8001588:	5043      	str	r3, [r0, r1]
 800158a:	3104      	adds	r1, #4

0800158c <LoopCopyDataInit>:
 800158c:	480a      	ldr	r0, [pc, #40]	; (80015b8 <LoopForever+0x6>)
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <LoopForever+0xa>)
 8001590:	1842      	adds	r2, r0, r1
 8001592:	429a      	cmp	r2, r3
 8001594:	d3f6      	bcc.n	8001584 <CopyDataInit>
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <LoopForever+0xe>)
 8001598:	e002      	b.n	80015a0 <LoopFillZerobss>

0800159a <FillZerobss>:
 800159a:	2300      	movs	r3, #0
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	3204      	adds	r2, #4

080015a0 <LoopFillZerobss>:
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <LoopForever+0x12>)
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d3f9      	bcc.n	800159a <FillZerobss>
 80015a6:	f3af 8000 	nop.w
 80015aa:	f000 f80f 	bl	80015cc <__libc_init_array>
 80015ae:	f7fe fe53 	bl	8000258 <main>

080015b2 <LoopForever>:
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
 80015b4:	08001658 	.word	0x08001658
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000210 	.word	0x20000210
 80015c0:	20000210 	.word	0x20000210
 80015c4:	20000470 	.word	0x20000470

080015c8 <BusFault_Handler>:
 80015c8:	e7fe      	b.n	80015c8 <BusFault_Handler>
 80015ca:	0000      	movs	r0, r0

080015cc <__libc_init_array>:
 80015cc:	b570      	push	{r4, r5, r6, lr}
 80015ce:	4d0d      	ldr	r5, [pc, #52]	; (8001604 <__libc_init_array+0x38>)
 80015d0:	4c0d      	ldr	r4, [pc, #52]	; (8001608 <__libc_init_array+0x3c>)
 80015d2:	1b64      	subs	r4, r4, r5
 80015d4:	10a4      	asrs	r4, r4, #2
 80015d6:	2600      	movs	r6, #0
 80015d8:	42a6      	cmp	r6, r4
 80015da:	d109      	bne.n	80015f0 <__libc_init_array+0x24>
 80015dc:	4d0b      	ldr	r5, [pc, #44]	; (800160c <__libc_init_array+0x40>)
 80015de:	4c0c      	ldr	r4, [pc, #48]	; (8001610 <__libc_init_array+0x44>)
 80015e0:	f000 f818 	bl	8001614 <_init>
 80015e4:	1b64      	subs	r4, r4, r5
 80015e6:	10a4      	asrs	r4, r4, #2
 80015e8:	2600      	movs	r6, #0
 80015ea:	42a6      	cmp	r6, r4
 80015ec:	d105      	bne.n	80015fa <__libc_init_array+0x2e>
 80015ee:	bd70      	pop	{r4, r5, r6, pc}
 80015f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80015f4:	4798      	blx	r3
 80015f6:	3601      	adds	r6, #1
 80015f8:	e7ee      	b.n	80015d8 <__libc_init_array+0xc>
 80015fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80015fe:	4798      	blx	r3
 8001600:	3601      	adds	r6, #1
 8001602:	e7f2      	b.n	80015ea <__libc_init_array+0x1e>
 8001604:	08001650 	.word	0x08001650
 8001608:	08001650 	.word	0x08001650
 800160c:	08001650 	.word	0x08001650
 8001610:	08001654 	.word	0x08001654

08001614 <_init>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr

08001620 <_fini>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	bf00      	nop
 8001624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001626:	bc08      	pop	{r3}
 8001628:	469e      	mov	lr, r3
 800162a:	4770      	bx	lr
