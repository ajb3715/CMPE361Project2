
simpleserial-aes-CWNANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002500  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029f4  080029f4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080029f4  080029f4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029f4  080029f4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f8  080029f8  000129f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080029fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000068  08002a64  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200001f0  08002a64  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036f3  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000093c  00000000  00000000  00023783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000026c4  00000000  00000000  000240bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00026783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000418  00000000  00000000  00026973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002503  00000000  00000000  00026d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000e9b  00000000  00000000  0002928e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0002a129  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011fc  00000000  00000000  0002a178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000021c  00000000  00000000  0002b374  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000245  00000000  00000000  0002b590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c06      	ldr	r4, [pc, #24]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d107      	bne.n	80001a2 <__do_global_dtors_aux+0x1a>
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <__do_global_dtors_aux+0x16>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x24>)
 800019a:	e000      	b.n	800019e <__do_global_dtors_aux+0x16>
 800019c:	bf00      	nop
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000068 	.word	0x20000068
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002670 	.word	0x08002670

080001b0 <frame_dummy>:
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <frame_dummy+0x14>)
 80001b2:	b510      	push	{r4, lr}
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <frame_dummy+0x10>
 80001b8:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	4804      	ldr	r0, [pc, #16]	; (80001cc <frame_dummy+0x1c>)
 80001bc:	e000      	b.n	80001c0 <frame_dummy+0x10>
 80001be:	bf00      	nop
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	46c0      	nop			; (mov r8, r8)
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002670 	.word	0x08002670

080001d0 <__gnu_thumb1_case_uqi>:
 80001d0:	b402      	push	{r1}
 80001d2:	4671      	mov	r1, lr
 80001d4:	0849      	lsrs	r1, r1, #1
 80001d6:	0049      	lsls	r1, r1, #1
 80001d8:	5c09      	ldrb	r1, [r1, r0]
 80001da:	0049      	lsls	r1, r1, #1
 80001dc:	448e      	add	lr, r1
 80001de:	bc02      	pop	{r1}
 80001e0:	4770      	bx	lr
 80001e2:	46c0      	nop			; (mov r8, r8)

080001e4 <__udivsi3>:
 80001e4:	2200      	movs	r2, #0
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d374      	bcc.n	80002d6 <__udivsi3+0xf2>
 80001ec:	0903      	lsrs	r3, r0, #4
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d35f      	bcc.n	80002b2 <__udivsi3+0xce>
 80001f2:	0a03      	lsrs	r3, r0, #8
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d344      	bcc.n	8000282 <__udivsi3+0x9e>
 80001f8:	0b03      	lsrs	r3, r0, #12
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d328      	bcc.n	8000250 <__udivsi3+0x6c>
 80001fe:	0c03      	lsrs	r3, r0, #16
 8000200:	428b      	cmp	r3, r1
 8000202:	d30d      	bcc.n	8000220 <__udivsi3+0x3c>
 8000204:	22ff      	movs	r2, #255	; 0xff
 8000206:	0209      	lsls	r1, r1, #8
 8000208:	ba12      	rev	r2, r2
 800020a:	0c03      	lsrs	r3, r0, #16
 800020c:	428b      	cmp	r3, r1
 800020e:	d302      	bcc.n	8000216 <__udivsi3+0x32>
 8000210:	1212      	asrs	r2, r2, #8
 8000212:	0209      	lsls	r1, r1, #8
 8000214:	d065      	beq.n	80002e2 <__udivsi3+0xfe>
 8000216:	0b03      	lsrs	r3, r0, #12
 8000218:	428b      	cmp	r3, r1
 800021a:	d319      	bcc.n	8000250 <__udivsi3+0x6c>
 800021c:	e000      	b.n	8000220 <__udivsi3+0x3c>
 800021e:	0a09      	lsrs	r1, r1, #8
 8000220:	0bc3      	lsrs	r3, r0, #15
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x46>
 8000226:	03cb      	lsls	r3, r1, #15
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	0b83      	lsrs	r3, r0, #14
 800022e:	428b      	cmp	r3, r1
 8000230:	d301      	bcc.n	8000236 <__udivsi3+0x52>
 8000232:	038b      	lsls	r3, r1, #14
 8000234:	1ac0      	subs	r0, r0, r3
 8000236:	4152      	adcs	r2, r2
 8000238:	0b43      	lsrs	r3, r0, #13
 800023a:	428b      	cmp	r3, r1
 800023c:	d301      	bcc.n	8000242 <__udivsi3+0x5e>
 800023e:	034b      	lsls	r3, r1, #13
 8000240:	1ac0      	subs	r0, r0, r3
 8000242:	4152      	adcs	r2, r2
 8000244:	0b03      	lsrs	r3, r0, #12
 8000246:	428b      	cmp	r3, r1
 8000248:	d301      	bcc.n	800024e <__udivsi3+0x6a>
 800024a:	030b      	lsls	r3, r1, #12
 800024c:	1ac0      	subs	r0, r0, r3
 800024e:	4152      	adcs	r2, r2
 8000250:	0ac3      	lsrs	r3, r0, #11
 8000252:	428b      	cmp	r3, r1
 8000254:	d301      	bcc.n	800025a <__udivsi3+0x76>
 8000256:	02cb      	lsls	r3, r1, #11
 8000258:	1ac0      	subs	r0, r0, r3
 800025a:	4152      	adcs	r2, r2
 800025c:	0a83      	lsrs	r3, r0, #10
 800025e:	428b      	cmp	r3, r1
 8000260:	d301      	bcc.n	8000266 <__udivsi3+0x82>
 8000262:	028b      	lsls	r3, r1, #10
 8000264:	1ac0      	subs	r0, r0, r3
 8000266:	4152      	adcs	r2, r2
 8000268:	0a43      	lsrs	r3, r0, #9
 800026a:	428b      	cmp	r3, r1
 800026c:	d301      	bcc.n	8000272 <__udivsi3+0x8e>
 800026e:	024b      	lsls	r3, r1, #9
 8000270:	1ac0      	subs	r0, r0, r3
 8000272:	4152      	adcs	r2, r2
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d301      	bcc.n	800027e <__udivsi3+0x9a>
 800027a:	020b      	lsls	r3, r1, #8
 800027c:	1ac0      	subs	r0, r0, r3
 800027e:	4152      	adcs	r2, r2
 8000280:	d2cd      	bcs.n	800021e <__udivsi3+0x3a>
 8000282:	09c3      	lsrs	r3, r0, #7
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__udivsi3+0xa8>
 8000288:	01cb      	lsls	r3, r1, #7
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0983      	lsrs	r3, r0, #6
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__udivsi3+0xb4>
 8000294:	018b      	lsls	r3, r1, #6
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0943      	lsrs	r3, r0, #5
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__udivsi3+0xc0>
 80002a0:	014b      	lsls	r3, r1, #5
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0903      	lsrs	r3, r0, #4
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__udivsi3+0xcc>
 80002ac:	010b      	lsls	r3, r1, #4
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	08c3      	lsrs	r3, r0, #3
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__udivsi3+0xd8>
 80002b8:	00cb      	lsls	r3, r1, #3
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0883      	lsrs	r3, r0, #2
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__udivsi3+0xe4>
 80002c4:	008b      	lsls	r3, r1, #2
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0843      	lsrs	r3, r0, #1
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__udivsi3+0xf0>
 80002d0:	004b      	lsls	r3, r1, #1
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	1a41      	subs	r1, r0, r1
 80002d8:	d200      	bcs.n	80002dc <__udivsi3+0xf8>
 80002da:	4601      	mov	r1, r0
 80002dc:	4152      	adcs	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	4770      	bx	lr
 80002e2:	e7ff      	b.n	80002e4 <__udivsi3+0x100>
 80002e4:	b501      	push	{r0, lr}
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 f806 	bl	80002f8 <__aeabi_idiv0>
 80002ec:	bd02      	pop	{r1, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)

080002f0 <__aeabi_uidivmod>:
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d0f7      	beq.n	80002e4 <__udivsi3+0x100>
 80002f4:	e776      	b.n	80001e4 <__udivsi3>
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_idiv0>:
 80002f8:	4770      	bx	lr
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__gnu_thumb1_case_shi>:
 80002fc:	b403      	push	{r0, r1}
 80002fe:	4671      	mov	r1, lr
 8000300:	0849      	lsrs	r1, r1, #1
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	0049      	lsls	r1, r1, #1
 8000306:	5e09      	ldrsh	r1, [r1, r0]
 8000308:	0049      	lsls	r1, r1, #1
 800030a:	448e      	add	lr, r1
 800030c:	bc03      	pop	{r0, r1}
 800030e:	4770      	bx	lr

08000310 <__aeabi_lmul>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	46ce      	mov	lr, r9
 8000314:	4647      	mov	r7, r8
 8000316:	b580      	push	{r7, lr}
 8000318:	0007      	movs	r7, r0
 800031a:	4699      	mov	r9, r3
 800031c:	0c3b      	lsrs	r3, r7, #16
 800031e:	469c      	mov	ip, r3
 8000320:	0413      	lsls	r3, r2, #16
 8000322:	0c1b      	lsrs	r3, r3, #16
 8000324:	001d      	movs	r5, r3
 8000326:	000e      	movs	r6, r1
 8000328:	4661      	mov	r1, ip
 800032a:	0400      	lsls	r0, r0, #16
 800032c:	0c14      	lsrs	r4, r2, #16
 800032e:	0c00      	lsrs	r0, r0, #16
 8000330:	4345      	muls	r5, r0
 8000332:	434b      	muls	r3, r1
 8000334:	4360      	muls	r0, r4
 8000336:	4361      	muls	r1, r4
 8000338:	18c0      	adds	r0, r0, r3
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	1820      	adds	r0, r4, r0
 800033e:	468c      	mov	ip, r1
 8000340:	4283      	cmp	r3, r0
 8000342:	d903      	bls.n	800034c <__aeabi_lmul+0x3c>
 8000344:	2380      	movs	r3, #128	; 0x80
 8000346:	025b      	lsls	r3, r3, #9
 8000348:	4698      	mov	r8, r3
 800034a:	44c4      	add	ip, r8
 800034c:	4649      	mov	r1, r9
 800034e:	4379      	muls	r1, r7
 8000350:	4372      	muls	r2, r6
 8000352:	0c03      	lsrs	r3, r0, #16
 8000354:	4463      	add	r3, ip
 8000356:	042d      	lsls	r5, r5, #16
 8000358:	0c2d      	lsrs	r5, r5, #16
 800035a:	18c9      	adds	r1, r1, r3
 800035c:	0400      	lsls	r0, r0, #16
 800035e:	1940      	adds	r0, r0, r5
 8000360:	1889      	adds	r1, r1, r2
 8000362:	bcc0      	pop	{r6, r7}
 8000364:	46b9      	mov	r9, r7
 8000366:	46b0      	mov	r8, r6
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036a:	46c0      	nop			; (mov r8, r8)

0800036c <init_mask>:
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};


// Initialize the pseudorandom mask
void init_mask(){
 800036c:	b510      	push	{r4, lr}
    srand(time(NULL));
 800036e:	2000      	movs	r0, #0
 8000370:	f001 f8ec 	bl	800154c <time>
 8000374:	f001 f87c 	bl	8001470 <srand>

    for (int i = 0; i < 16; i++) {
 8000378:	2400      	movs	r4, #0
        mask[i] = rand() % 256; // Random value between 0x00 and 0xFF
 800037a:	f001 f8a9 	bl	80014d0 <rand>
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <init_mask+0x2c>)
 8000380:	4018      	ands	r0, r3
 8000382:	d503      	bpl.n	800038c <init_mask+0x20>
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <init_mask+0x30>)
 8000386:	3801      	subs	r0, #1
 8000388:	4318      	orrs	r0, r3
 800038a:	3001      	adds	r0, #1
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <init_mask+0x34>)
 800038e:	54e0      	strb	r0, [r4, r3]
    for (int i = 0; i < 16; i++) {
 8000390:	3401      	adds	r4, #1
 8000392:	2c10      	cmp	r4, #16
 8000394:	d1f1      	bne.n	800037a <init_mask+0xe>
    }
}
 8000396:	bd10      	pop	{r4, pc}
 8000398:	800000ff 	.word	0x800000ff
 800039c:	ffffff00 	.word	0xffffff00
 80003a0:	20000084 	.word	0x20000084

080003a4 <substitute_byte>:


// Function to substitute a byte using a constant-time lookup
uint8_t substitute_byte(uint8_t byte) {
    uint8_t result = 0;
    for (int i = 0; i < 256; i++) {
 80003a4:	2200      	movs	r2, #0
uint8_t substitute_byte(uint8_t byte) {
 80003a6:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < 256; i++) {
 80003a8:	2480      	movs	r4, #128	; 0x80
uint8_t substitute_byte(uint8_t byte) {
 80003aa:	0001      	movs	r1, r0
    uint8_t result = 0;
 80003ac:	0010      	movs	r0, r2
        uint8_t match = (byte == i);         // 1 if true, 0 if false
        result |= match * SBox[i];           // Add SBox[i] to result only if match
 80003ae:	4d06      	ldr	r5, [pc, #24]	; (80003c8 <substitute_byte+0x24>)
    for (int i = 0; i < 256; i++) {
 80003b0:	0064      	lsls	r4, r4, #1
        uint8_t match = (byte == i);         // 1 if true, 0 if false
 80003b2:	1a8b      	subs	r3, r1, r2
 80003b4:	425e      	negs	r6, r3
 80003b6:	4173      	adcs	r3, r6
        result |= match * SBox[i];           // Add SBox[i] to result only if match
 80003b8:	5cae      	ldrb	r6, [r5, r2]
    for (int i = 0; i < 256; i++) {
 80003ba:	3201      	adds	r2, #1
        result |= match * SBox[i];           // Add SBox[i] to result only if match
 80003bc:	4373      	muls	r3, r6
 80003be:	4318      	orrs	r0, r3
 80003c0:	b2c0      	uxtb	r0, r0
    for (int i = 0; i < 256; i++) {
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d1f5      	bne.n	80003b2 <substitute_byte+0xe>
    }
    return result;
}
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	08002788 	.word	0x08002788

080003cc <substitute>:

// Apply the substitution step (constant-time)
void substitute(uint8_t *block) {
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	0005      	movs	r5, r0
 80003d0:	0004      	movs	r4, r0
 80003d2:	3510      	adds	r5, #16
    for (int i = 0; i < BLOCK_SIZE; i++) {
        block[i] = substitute_byte(block[i]);
 80003d4:	7820      	ldrb	r0, [r4, #0]
 80003d6:	f7ff ffe5 	bl	80003a4 <substitute_byte>
 80003da:	7020      	strb	r0, [r4, #0]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 80003dc:	3401      	adds	r4, #1
 80003de:	42ac      	cmp	r4, r5
 80003e0:	d1f8      	bne.n	80003d4 <substitute+0x8>
    }
}
 80003e2:	bd70      	pop	{r4, r5, r6, pc}

080003e4 <balanced_xor>:

// Perform XOR in constant time
void balanced_xor(uint8_t *block, const uint8_t *mask) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
 80003e4:	2300      	movs	r3, #0
void balanced_xor(uint8_t *block, const uint8_t *mask) {
 80003e6:	b510      	push	{r4, lr}
        block[i] ^= mask[i];  // XOR is already constant-time
 80003e8:	5cc2      	ldrb	r2, [r0, r3]
 80003ea:	5ccc      	ldrb	r4, [r1, r3]
 80003ec:	4062      	eors	r2, r4
 80003ee:	54c2      	strb	r2, [r0, r3]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 80003f0:	3301      	adds	r3, #1
 80003f2:	2b10      	cmp	r3, #16
 80003f4:	d1f8      	bne.n	80003e8 <balanced_xor+0x4>
    }
}
 80003f6:	bd10      	pop	{r4, pc}

080003f8 <permute>:

// Perform a constant-time permutation (avoid data-dependent indexing)
void permute(uint8_t *block) {
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t temp[BLOCK_SIZE];
    memcpy(temp, block, BLOCK_SIZE);
 80003fa:	0001      	movs	r1, r0
void permute(uint8_t *block) {
 80003fc:	0004      	movs	r4, r0
    memcpy(temp, block, BLOCK_SIZE);
 80003fe:	2210      	movs	r2, #16
 8000400:	4668      	mov	r0, sp
 8000402:	f001 f823 	bl	800144c <memcpy>

    // Example permutation: Rotate bytes left by 3 (constant-time)
    for (int i = 0; i < BLOCK_SIZE; i++) {
 8000406:	2300      	movs	r3, #0
        block[i] = temp[(i + 3) % BLOCK_SIZE];
 8000408:	210f      	movs	r1, #15
 800040a:	4668      	mov	r0, sp
 800040c:	1cda      	adds	r2, r3, #3
 800040e:	400a      	ands	r2, r1
 8000410:	5c82      	ldrb	r2, [r0, r2]
 8000412:	54e2      	strb	r2, [r4, r3]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 8000414:	3301      	adds	r3, #1
 8000416:	2b10      	cmp	r3, #16
 8000418:	d1f7      	bne.n	800040a <permute+0x12>
    }
}
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <encrypt_block>:

// Encryption function
void encrypt_block(uint8_t *block, const uint8_t *key, const uint8_t *mask) {
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	0004      	movs	r4, r0
 8000420:	000e      	movs	r6, r1
 8000422:	0017      	movs	r7, r2
 8000424:	250a      	movs	r5, #10
    for (int round = 0; round < ROUNDS; round++) {
        balanced_xor(block, mask);        // Masking step
 8000426:	0039      	movs	r1, r7
 8000428:	0020      	movs	r0, r4
 800042a:	f7ff ffdb 	bl	80003e4 <balanced_xor>
        substitute(block);               // Substitution step
 800042e:	0020      	movs	r0, r4
 8000430:	f7ff ffcc 	bl	80003cc <substitute>
        permute(block);                  // Permutation step
 8000434:	0020      	movs	r0, r4
 8000436:	f7ff ffdf 	bl	80003f8 <permute>
    for (int round = 0; round < ROUNDS; round++) {
 800043a:	3d01      	subs	r5, #1
        balanced_xor(block, key);        // XOR with key
 800043c:	0031      	movs	r1, r6
 800043e:	0020      	movs	r0, r4
 8000440:	f7ff ffd0 	bl	80003e4 <balanced_xor>
    for (int round = 0; round < ROUNDS; round++) {
 8000444:	2d00      	cmp	r5, #0
 8000446:	d1ee      	bne.n	8000426 <encrypt_block+0xa>
    }
}
 8000448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800044a:	0000      	movs	r0, r0

0800044c <inverse_substitute_byte>:


uint8_t inverse_substitute_byte(uint8_t byte) {
    uint8_t result = 0;
    for (int i = 0; i < 256; i++) {
 800044c:	2200      	movs	r2, #0
uint8_t inverse_substitute_byte(uint8_t byte) {
 800044e:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < 256; i++) {
 8000450:	2480      	movs	r4, #128	; 0x80
uint8_t inverse_substitute_byte(uint8_t byte) {
 8000452:	0001      	movs	r1, r0
    uint8_t result = 0;
 8000454:	0010      	movs	r0, r2
        uint8_t match = (byte == i);         // 1 if true, 0 if false
        result |= match * InvSBox[i];           // Add SBox[i] to result only if match
 8000456:	4d06      	ldr	r5, [pc, #24]	; (8000470 <inverse_substitute_byte+0x24>)
    for (int i = 0; i < 256; i++) {
 8000458:	0064      	lsls	r4, r4, #1
        uint8_t match = (byte == i);         // 1 if true, 0 if false
 800045a:	1a8b      	subs	r3, r1, r2
 800045c:	425e      	negs	r6, r3
 800045e:	4173      	adcs	r3, r6
        result |= match * InvSBox[i];           // Add SBox[i] to result only if match
 8000460:	5cae      	ldrb	r6, [r5, r2]
    for (int i = 0; i < 256; i++) {
 8000462:	3201      	adds	r2, #1
        result |= match * InvSBox[i];           // Add SBox[i] to result only if match
 8000464:	4373      	muls	r3, r6
 8000466:	4318      	orrs	r0, r3
 8000468:	b2c0      	uxtb	r0, r0
    for (int i = 0; i < 256; i++) {
 800046a:	42a2      	cmp	r2, r4
 800046c:	d1f5      	bne.n	800045a <inverse_substitute_byte+0xe>
    }
    return result;
}
 800046e:	bd70      	pop	{r4, r5, r6, pc}
 8000470:	08002688 	.word	0x08002688

08000474 <inverse_substitute>:

// Apply the substitution step (constant-time)

void inverse_substitute(uint8_t *block) {
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	0005      	movs	r5, r0
 8000478:	0004      	movs	r4, r0
 800047a:	3510      	adds	r5, #16
    for (int i = 0; i < BLOCK_SIZE; i++) {
        block[i] = inverse_substitute_byte(block[i]);
 800047c:	7820      	ldrb	r0, [r4, #0]
 800047e:	f7ff ffe5 	bl	800044c <inverse_substitute_byte>
 8000482:	7020      	strb	r0, [r4, #0]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 8000484:	3401      	adds	r4, #1
 8000486:	42ac      	cmp	r4, r5
 8000488:	d1f8      	bne.n	800047c <inverse_substitute+0x8>
    }
}
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <reverse_permute>:

// Perform reverse permutation (rotate bytes right by 3)
void reverse_permute(uint8_t *block) {
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t temp[BLOCK_SIZE];
    memcpy(temp, block, BLOCK_SIZE);
 800048e:	0001      	movs	r1, r0
void reverse_permute(uint8_t *block) {
 8000490:	0004      	movs	r4, r0
    memcpy(temp, block, BLOCK_SIZE);
 8000492:	2210      	movs	r2, #16
 8000494:	4668      	mov	r0, sp
 8000496:	f000 ffd9 	bl	800144c <memcpy>

    for (int i = 0; i < BLOCK_SIZE; i++) {
 800049a:	2300      	movs	r3, #0
        block[i] = temp[(i - 3 + BLOCK_SIZE) % BLOCK_SIZE]; // Rotate right
 800049c:	210f      	movs	r1, #15
 800049e:	001a      	movs	r2, r3
 80004a0:	4668      	mov	r0, sp
 80004a2:	320d      	adds	r2, #13
 80004a4:	400a      	ands	r2, r1
 80004a6:	5c82      	ldrb	r2, [r0, r2]
 80004a8:	54e2      	strb	r2, [r4, r3]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 80004aa:	3301      	adds	r3, #1
 80004ac:	2b10      	cmp	r3, #16
 80004ae:	d1f6      	bne.n	800049e <reverse_permute+0x12>
    }
}
 80004b0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b2 <decrypt_block>:

//Decryption function
void decrypt_block(uint8_t *block, const uint8_t *key, const uint8_t *mask) {
 80004b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000f      	movs	r7, r1
 80004b8:	0016      	movs	r6, r2
 80004ba:	250a      	movs	r5, #10
    for (int round = 0; round < ROUNDS; round++) {
        balanced_xor(block, key);        // Reverse XOR with key
 80004bc:	0039      	movs	r1, r7
 80004be:	0020      	movs	r0, r4
 80004c0:	f7ff ff90 	bl	80003e4 <balanced_xor>
        reverse_permute(block);          // Reverse permutation
 80004c4:	0020      	movs	r0, r4
 80004c6:	f7ff ffe1 	bl	800048c <reverse_permute>
        inverse_substitute(block);       // Reverse substitution
 80004ca:	0020      	movs	r0, r4
 80004cc:	f7ff ffd2 	bl	8000474 <inverse_substitute>
    for (int round = 0; round < ROUNDS; round++) {
 80004d0:	3d01      	subs	r5, #1
        balanced_xor(block, mask);       // Reverse XOR with mask
 80004d2:	0031      	movs	r1, r6
 80004d4:	0020      	movs	r0, r4
 80004d6:	f7ff ff85 	bl	80003e4 <balanced_xor>
    for (int round = 0; round < ROUNDS; round++) {
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d1ee      	bne.n	80004bc <decrypt_block+0xa>
    }
}
 80004de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080004e0 <get_pt>:


// Function to get the plaintext from UART and perform encryption
uint8_t get_pt(uint8_t* pt, uint8_t len)
{
 80004e0:	b510      	push	{r4, lr}
 80004e2:	0004      	movs	r4, r0

	trigger_high();
 80004e4:	f000 fa40 	bl	8000968 <trigger_high>

  #ifdef ADD_JITTER
  for (volatile uint8_t k = 0; k < (*pt & 0x0F); k++);
  #endif

	encrypt_block(pt, key, mask); /* encrypting the data block */
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <get_pt+0x28>)
 80004ea:	0020      	movs	r0, r4
 80004ec:	0011      	movs	r1, r2
 80004ee:	3110      	adds	r1, #16
 80004f0:	f7ff ff94 	bl	800041c <encrypt_block>
	trigger_low();
 80004f4:	f000 fa40 	bl	8000978 <trigger_low>

	simpleserial_put('r', 16, pt);
 80004f8:	0022      	movs	r2, r4
 80004fa:	2110      	movs	r1, #16
 80004fc:	2072      	movs	r0, #114	; 0x72
 80004fe:	f000 f8c7 	bl	8000690 <simpleserial_put>

	return 0x00;
}
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	20000084 	.word	0x20000084

0800050c <get_pt_wrapper>:

}


uint8_t get_pt_wrapper(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 800050c:	b510      	push	{r4, lr}
 800050e:	0011      	movs	r1, r2
 8000510:	0018      	movs	r0, r3
    uint8_t err = 0;
    err = get_pt(buf, len);
 8000512:	f7ff ffe5 	bl	80004e0 <get_pt>
        return err;
    
    return 0x00;
}
 8000516:	bd10      	pop	{r4, pc}

08000518 <give_dt>:
{
 8000518:	b510      	push	{r4, lr}
 800051a:	0004      	movs	r4, r0
	trigger_high();
 800051c:	f000 fa24 	bl	8000968 <trigger_high>
	trigger_high();
 8000520:	f000 fa22 	bl	8000968 <trigger_high>
	decrypt_block(dt, key, mask); /* encrypting the data block */
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <give_dt+0x2c>)
 8000526:	0020      	movs	r0, r4
 8000528:	0011      	movs	r1, r2
 800052a:	3110      	adds	r1, #16
 800052c:	f7ff ffc1 	bl	80004b2 <decrypt_block>
	trigger_low();
 8000530:	f000 fa22 	bl	8000978 <trigger_low>
	simpleserial_put('r', 16, dt);
 8000534:	0022      	movs	r2, r4
 8000536:	2110      	movs	r1, #16
 8000538:	2072      	movs	r0, #114	; 0x72
 800053a:	f000 f8a9 	bl	8000690 <simpleserial_put>
}
 800053e:	2000      	movs	r0, #0
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	20000084 	.word	0x20000084

08000548 <give_dt_wrapper>:

uint8_t give_dt_wrapper(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8000548:	b510      	push	{r4, lr}
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
    uint8_t err = 0;
    err = give_dt(buf, len);
 800054e:	f7ff ffe3 	bl	8000518 <give_dt>
        return err;
    
    return 0x00;
}
 8000552:	bd10      	pop	{r4, pc}

08000554 <get_key>:
{
 8000554:	2300      	movs	r3, #0
		key[i] = pykey[i];
 8000556:	4a04      	ldr	r2, [pc, #16]	; (8000568 <get_key+0x14>)
 8000558:	3210      	adds	r2, #16
 800055a:	5cc1      	ldrb	r1, [r0, r3]
 800055c:	5499      	strb	r1, [r3, r2]
    for(uint8_t i=0; i < 16; i++){
 800055e:	3301      	adds	r3, #1
 8000560:	2b10      	cmp	r3, #16
 8000562:	d1fa      	bne.n	800055a <get_key+0x6>
}
 8000564:	2000      	movs	r0, #0
 8000566:	4770      	bx	lr
 8000568:	20000084 	.word	0x20000084

0800056c <get_key_wrapper>:

uint8_t get_key_wrapper(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 800056c:	b510      	push	{r4, lr}
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
    uint8_t err = 0;
    err = get_key(buf, len);
 8000572:	f7ff ffef 	bl	8000554 <get_key>
        return err;
    
    return 0x00;
}
 8000576:	bd10      	pop	{r4, pc}

08000578 <main>:


int main(void)
{
 8000578:	b510      	push	{r4, lr}
    platform_init();
 800057a:	f000 f949 	bl	8000810 <platform_init>
    init_uart();
 800057e:	f000 f973 	bl	8000868 <init_uart>
    trigger_setup();
 8000582:	f000 f9b1 	bl	80008e8 <trigger_setup>
    init_mask();
 8000586:	f7ff fef1 	bl	800036c <init_mask>

    simpleserial_init();
 800058a:	f000 f871 	bl	8000670 <simpleserial_init>
    #if SS_VER == SS_VER_2_1
    // simpleserial_addcmd(0x01, 16, aes);  // Add AES command for testing 
    simpleserial_addcmd('d', 16, give_dt_wrapper); // Use 'd' command to get cyphertext and decrypt
 800058e:	2110      	movs	r1, #16
 8000590:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <main+0x3c>)
 8000592:	2064      	movs	r0, #100	; 0x64
 8000594:	f000 f84e 	bl	8000634 <simpleserial_addcmd>
    simpleserial_addcmd('e', 16, get_pt_wrapper);  // Use 'p' command to get plaintext and encrypt
 8000598:	2110      	movs	r1, #16
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <main+0x40>)
 800059c:	2065      	movs	r0, #101	; 0x65
 800059e:	f000 f849 	bl	8000634 <simpleserial_addcmd>
    simpleserial_addcmd('l', 16, get_key_wrapper); // Use 'k' command to get the key
 80005a2:	2110      	movs	r1, #16
 80005a4:	206c      	movs	r0, #108	; 0x6c
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <main+0x44>)
 80005a8:	f000 f844 	bl	8000634 <simpleserial_addcmd>
    #else
	
    #endif

    while(1)
        simpleserial_get();  // Wait for UART commands
 80005ac:	f000 f8c0 	bl	8000730 <simpleserial_get>
    while(1)
 80005b0:	e7fc      	b.n	80005ac <main+0x34>
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	08000549 	.word	0x08000549
 80005b8:	0800050d 	.word	0x0800050d
 80005bc:	0800056d 	.word	0x0800056d

080005c0 <ss_crc>:
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 80005c0:	0003      	movs	r3, r0
{
 80005c2:	b570      	push	{r4, r5, r6, lr}
 80005c4:	1841      	adds	r1, r0, r1
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80005c6:	254d      	movs	r5, #77	; 0x4d
	uint8_t crc = 0x00;
 80005c8:	2000      	movs	r0, #0
	while (len--) {
 80005ca:	4299      	cmp	r1, r3
 80005cc:	d100      	bne.n	80005d0 <ss_crc+0x10>
		}
	}
	return crc;

}
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
		crc ^= *buf++;
 80005d0:	2408      	movs	r4, #8
 80005d2:	781a      	ldrb	r2, [r3, #0]
 80005d4:	4050      	eors	r0, r2
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80005d6:	b246      	sxtb	r6, r0
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	b2d0      	uxtb	r0, r2
 80005dc:	2e00      	cmp	r6, #0
 80005de:	da01      	bge.n	80005e4 <ss_crc+0x24>
 80005e0:	406a      	eors	r2, r5
 80005e2:	b2d0      	uxtb	r0, r2
		for (k = 0; k < 8; k++) {
 80005e4:	3c01      	subs	r4, #1
 80005e6:	2c00      	cmp	r4, #0
 80005e8:	d1f5      	bne.n	80005d6 <ss_crc+0x16>
 80005ea:	3301      	adds	r3, #1
 80005ec:	e7ed      	b.n	80005ca <ss_crc+0xa>

080005ee <stuff_data>:
}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
	uint8_t i = 1;
	uint8_t last = 0;
 80005ee:	2200      	movs	r2, #0
	uint8_t i = 1;
 80005f0:	2301      	movs	r3, #1
{
 80005f2:	b530      	push	{r4, r5, lr}
 80005f4:	1c44      	adds	r4, r0, #1
	for (; i < len; i++) {
 80005f6:	428b      	cmp	r3, r1
 80005f8:	d301      	bcc.n	80005fe <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 80005fa:	2000      	movs	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 80005fe:	7825      	ldrb	r5, [r4, #0]
 8000600:	2d00      	cmp	r5, #0
 8000602:	d102      	bne.n	800060a <stuff_data+0x1c>
			buf[last] = i - last;
 8000604:	1a9d      	subs	r5, r3, r2
 8000606:	5485      	strb	r5, [r0, r2]
 8000608:	001a      	movs	r2, r3
	for (; i < len; i++) {
 800060a:	3301      	adds	r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	3401      	adds	r4, #1
 8000610:	e7f1      	b.n	80005f6 <stuff_data+0x8>

08000612 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 8000612:	b530      	push	{r4, r5, lr}
	uint8_t next = buf[0];
	buf[0] = 0x00;
 8000614:	2400      	movs	r4, #0
	uint8_t next = buf[0];
 8000616:	7802      	ldrb	r2, [r0, #0]
{
 8000618:	0003      	movs	r3, r0
	buf[0] = 0x00;
 800061a:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0];
 800061c:	0010      	movs	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 800061e:	4288      	cmp	r0, r1
 8000620:	d201      	bcs.n	8000626 <unstuff_data+0x14>
 8000622:	2a00      	cmp	r2, #0
 8000624:	d100      	bne.n	8000628 <unstuff_data+0x16>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 8000626:	bd30      	pop	{r4, r5, pc}
		tmp = buf[next];
 8000628:	5c1a      	ldrb	r2, [r3, r0]
 800062a:	181d      	adds	r5, r3, r0
		next += tmp;
 800062c:	1880      	adds	r0, r0, r2
		buf[next] = FRAME_BYTE;
 800062e:	702c      	strb	r4, [r5, #0]
		next += tmp;
 8000630:	b2c0      	uxtb	r0, r0
 8000632:	e7f4      	b.n	800061e <unstuff_data+0xc>

08000634 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8000634:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8000636:	4e0c      	ldr	r6, [pc, #48]	; (8000668 <simpleserial_addcmd+0x34>)
{
 8000638:	0005      	movs	r5, r0
	if(num_commands >= MAX_SS_CMDS) {
 800063a:	6833      	ldr	r3, [r6, #0]
		putch('a');
 800063c:	2061      	movs	r0, #97	; 0x61
	if(num_commands >= MAX_SS_CMDS) {
 800063e:	2b0f      	cmp	r3, #15
 8000640:	dc02      	bgt.n	8000648 <simpleserial_addcmd+0x14>
		return 1;
	}

	if(len >= MAX_SS_LEN) {
 8000642:	29ff      	cmp	r1, #255	; 0xff
 8000644:	d904      	bls.n	8000650 <simpleserial_addcmd+0x1c>
		putch('b');
 8000646:	2062      	movs	r0, #98	; 0x62
 8000648:	f000 f9b6 	bl	80009b8 <putch>
		return 1;
 800064c:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 800064e:	bd70      	pop	{r4, r5, r6, pc}
	commands[num_commands].c   = c;
 8000650:	240c      	movs	r4, #12
 8000652:	435c      	muls	r4, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <simpleserial_addcmd+0x38>)
	num_commands++;
 8000656:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 8000658:	5425      	strb	r5, [r4, r0]
	commands[num_commands].len = len;
 800065a:	1900      	adds	r0, r0, r4
 800065c:	6041      	str	r1, [r0, #4]
	commands[num_commands].fp  = fp;
 800065e:	6082      	str	r2, [r0, #8]
	num_commands++;
 8000660:	6033      	str	r3, [r6, #0]
	return 0;
 8000662:	2000      	movs	r0, #0
 8000664:	e7f3      	b.n	800064e <simpleserial_addcmd+0x1a>
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	200000a4 	.word	0x200000a4
 800066c:	200000a8 	.word	0x200000a8

08000670 <simpleserial_init>:
{
 8000670:	b510      	push	{r4, lr}
	simpleserial_addcmd('v', 0, check_version);
 8000672:	2100      	movs	r1, #0
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <simpleserial_init+0x18>)
 8000676:	2076      	movs	r0, #118	; 0x76
 8000678:	f7ff ffdc 	bl	8000634 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 800067c:	2100      	movs	r1, #0
 800067e:	2077      	movs	r0, #119	; 0x77
 8000680:	4a02      	ldr	r2, [pc, #8]	; (800068c <simpleserial_init+0x1c>)
 8000682:	f7ff ffd7 	bl	8000634 <simpleserial_addcmd>
}
 8000686:	bd10      	pop	{r4, pc}
 8000688:	080006df 	.word	0x080006df
 800068c:	080006f5 	.word	0x080006f5

08000690 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	b0c0      	sub	sp, #256	; 0x100
 8000694:	000c      	movs	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8000696:	466b      	mov	r3, sp
 8000698:	2500      	movs	r5, #0
{
 800069a:	0011      	movs	r1, r2
	data_buf[1] = c;
 800069c:	7058      	strb	r0, [r3, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 800069e:	0022      	movs	r2, r4
	data_buf[2] = size;
 80006a0:	709c      	strb	r4, [r3, #2]
	data_buf[0] = 0x00;
 80006a2:	701d      	strb	r5, [r3, #0]
		data_buf[i + 3] = output[i];
 80006a4:	1cd8      	adds	r0, r3, #3
 80006a6:	f000 fed1 	bl	800144c <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80006aa:	466b      	mov	r3, sp
 80006ac:	1ca1      	adds	r1, r4, #2
 80006ae:	b2c9      	uxtb	r1, r1
 80006b0:	1c58      	adds	r0, r3, #1
 80006b2:	f7ff ff85 	bl	80005c0 <ss_crc>
 80006b6:	0023      	movs	r3, r4
 80006b8:	446b      	add	r3, sp
 80006ba:	70d8      	strb	r0, [r3, #3]
	data_buf[i + 4] = 0x00;
 80006bc:	466b      	mov	r3, sp
 80006be:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 80006c0:	3405      	adds	r4, #5
 80006c2:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 80006c4:	559d      	strb	r5, [r3, r6]
	stuff_data(data_buf, i + 5);
 80006c6:	b2e1      	uxtb	r1, r4
 80006c8:	f7ff ff91 	bl	80005ee <stuff_data>
	for (int i = 0; i < size + 5; i++) {
		putch(data_buf[i]);
 80006cc:	466b      	mov	r3, sp
 80006ce:	5d58      	ldrb	r0, [r3, r5]
	for (int i = 0; i < size + 5; i++) {
 80006d0:	3501      	adds	r5, #1
		putch(data_buf[i]);
 80006d2:	f000 f971 	bl	80009b8 <putch>
	for (int i = 0; i < size + 5; i++) {
 80006d6:	42ae      	cmp	r6, r5
 80006d8:	daf8      	bge.n	80006cc <simpleserial_put+0x3c>
	}
}
 80006da:	b040      	add	sp, #256	; 0x100
 80006dc:	bd70      	pop	{r4, r5, r6, pc}

080006de <check_version>:
{
 80006de:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 80006e0:	466b      	mov	r3, sp
 80006e2:	1dda      	adds	r2, r3, #7
 80006e4:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 80006e6:	2072      	movs	r0, #114	; 0x72
 80006e8:	2101      	movs	r1, #1
	uint8_t ver = SS_VER;
 80006ea:	7013      	strb	r3, [r2, #0]
	simpleserial_put('r', 1, &ver);
 80006ec:	f7ff ffd0 	bl	8000690 <simpleserial_put>
}
 80006f0:	2000      	movs	r0, #0
 80006f2:	bd0e      	pop	{r1, r2, r3, pc}

080006f4 <ss_get_commands>:
{
 80006f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <ss_get_commands+0x34>)
        cmd_chars[i] = commands[i].c;
 80006f8:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80006fa:	6819      	ldr	r1, [r3, #0]
 80006fc:	2300      	movs	r3, #0
        cmd_chars[i] = commands[i].c;
 80006fe:	480b      	ldr	r0, [pc, #44]	; (800072c <ss_get_commands+0x38>)
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000700:	b2ca      	uxtb	r2, r1
 8000702:	4293      	cmp	r3, r2
 8000704:	db07      	blt.n	8000716 <ss_get_commands+0x22>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 8000706:	466a      	mov	r2, sp
 8000708:	2072      	movs	r0, #114	; 0x72
 800070a:	b2c9      	uxtb	r1, r1
 800070c:	f7ff ffc0 	bl	8000690 <simpleserial_put>
}
 8000710:	2000      	movs	r0, #0
 8000712:	b004      	add	sp, #16
 8000714:	bd70      	pop	{r4, r5, r6, pc}
        cmd_chars[i] = commands[i].c;
 8000716:	0025      	movs	r5, r4
 8000718:	466e      	mov	r6, sp
 800071a:	435d      	muls	r5, r3
 800071c:	5c2d      	ldrb	r5, [r5, r0]
 800071e:	54f5      	strb	r5, [r6, r3]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000720:	3301      	adds	r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	e7ed      	b.n	8000702 <ss_get_commands+0xe>
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	200000a4 	.word	0x200000a4
 800072c:	200000a8 	.word	0x200000a8

08000730 <simpleserial_get>:
{
 8000730:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t err = 0;
 8000732:	2500      	movs	r5, #0
{
 8000734:	b0c5      	sub	sp, #276	; 0x114
	uint8_t err = 0;
 8000736:	ab02      	add	r3, sp, #8
 8000738:	1ddf      	adds	r7, r3, #7
 800073a:	703d      	strb	r5, [r7, #0]
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 800073c:	f000 f924 	bl	8000988 <getch>
 8000740:	ac04      	add	r4, sp, #16
 8000742:	5528      	strb	r0, [r5, r4]
		if (data_buf[i] == FRAME_BYTE) {
 8000744:	2800      	cmp	r0, #0
 8000746:	d108      	bne.n	800075a <simpleserial_get+0x2a>
			err = SS_ERR_FRAME_BYTE;
 8000748:	2305      	movs	r3, #5
		err = SS_ERR_CRC;
 800074a:	703b      	strb	r3, [r7, #0]
	simpleserial_put('e', 0x01, &err);
 800074c:	003a      	movs	r2, r7
 800074e:	2101      	movs	r1, #1
 8000750:	2065      	movs	r0, #101	; 0x65
 8000752:	f7ff ff9d 	bl	8000690 <simpleserial_put>
}
 8000756:	b045      	add	sp, #276	; 0x114
 8000758:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 0; i < 4; i++) {
 800075a:	3501      	adds	r5, #1
 800075c:	2d04      	cmp	r5, #4
 800075e:	d1ed      	bne.n	800073c <simpleserial_get+0xc>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8000760:	0029      	movs	r1, r5
 8000762:	0020      	movs	r0, r4
 8000764:	f7ff ff55 	bl	8000612 <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8000768:	2100      	movs	r1, #0
	uint8_t next_frame = unstuff_data(data_buf, 4);
 800076a:	9001      	str	r0, [sp, #4]
		if(commands[c].c == data_buf[1])
 800076c:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <simpleserial_get+0xd8>)
		if(commands[c].c == data_buf[1])
 8000770:	7862      	ldrb	r2, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	9100      	str	r1, [sp, #0]
		if(commands[c].c == data_buf[1])
 8000776:	4925      	ldr	r1, [pc, #148]	; (800080c <simpleserial_get+0xdc>)
	for(c = 0; c < num_commands; c++)
 8000778:	9e00      	ldr	r6, [sp, #0]
 800077a:	429e      	cmp	r6, r3
 800077c:	db02      	blt.n	8000784 <simpleserial_get+0x54>
	if (c == num_commands) {
 800077e:	d10b      	bne.n	8000798 <simpleserial_get+0x68>
		err = SS_ERR_CMD;
 8000780:	2301      	movs	r3, #1
 8000782:	e7e2      	b.n	800074a <simpleserial_get+0x1a>
		if(commands[c].c == data_buf[1])
 8000784:	9e00      	ldr	r6, [sp, #0]
 8000786:	4346      	muls	r6, r0
 8000788:	5c76      	ldrb	r6, [r6, r1]
 800078a:	4296      	cmp	r6, r2
 800078c:	d004      	beq.n	8000798 <simpleserial_get+0x68>
	for(c = 0; c < num_commands; c++)
 800078e:	9e00      	ldr	r6, [sp, #0]
 8000790:	3601      	adds	r6, #1
 8000792:	b2f6      	uxtb	r6, r6
 8000794:	9600      	str	r6, [sp, #0]
 8000796:	e7ef      	b.n	8000778 <simpleserial_get+0x48>
	if ((data_buf[3] + 5) < next_frame) {
 8000798:	78e3      	ldrb	r3, [r4, #3]
 800079a:	9a01      	ldr	r2, [sp, #4]
 800079c:	3305      	adds	r3, #5
 800079e:	4293      	cmp	r3, r2
 80007a0:	da02      	bge.n	80007a8 <simpleserial_get+0x78>
		err = SS_ERR_LEN;
 80007a2:	2304      	movs	r3, #4
 80007a4:	e7d1      	b.n	800074a <simpleserial_get+0x1a>
 80007a6:	0035      	movs	r5, r6
		data_buf[i] = getch();
 80007a8:	f000 f8ee 	bl	8000988 <getch>
 80007ac:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 80007ae:	2800      	cmp	r0, #0
 80007b0:	d0ca      	beq.n	8000748 <simpleserial_get+0x18>
	for (; i < data_buf[3] + 5; i++) {
 80007b2:	78e3      	ldrb	r3, [r4, #3]
 80007b4:	1c6e      	adds	r6, r5, #1
 80007b6:	3304      	adds	r3, #4
 80007b8:	42b3      	cmp	r3, r6
 80007ba:	daf4      	bge.n	80007a6 <simpleserial_get+0x76>
	data_buf[i] = getch();
 80007bc:	f000 f8e4 	bl	8000988 <getch>
 80007c0:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 80007c2:	2800      	cmp	r0, #0
 80007c4:	d1ed      	bne.n	80007a2 <simpleserial_get+0x72>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 80007c6:	9b01      	ldr	r3, [sp, #4]
 80007c8:	b2f6      	uxtb	r6, r6
 80007ca:	1af1      	subs	r1, r6, r3
 80007cc:	3101      	adds	r1, #1
 80007ce:	b2c9      	uxtb	r1, r1
 80007d0:	18e0      	adds	r0, r4, r3
 80007d2:	f7ff ff1e 	bl	8000612 <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 80007d6:	2009      	movs	r0, #9
 80007d8:	ab02      	add	r3, sp, #8
 80007da:	3e02      	subs	r6, #2
 80007dc:	18c0      	adds	r0, r0, r3
 80007de:	b2f1      	uxtb	r1, r6
 80007e0:	f7ff feee 	bl	80005c0 <ss_crc>
	if (crc != data_buf[i-1]) {
 80007e4:	5d63      	ldrb	r3, [r4, r5]
 80007e6:	4283      	cmp	r3, r0
 80007e8:	d001      	beq.n	80007ee <simpleserial_get+0xbe>
		err = SS_ERR_CRC;
 80007ea:	2302      	movs	r3, #2
 80007ec:	e7ad      	b.n	800074a <simpleserial_get+0x1a>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 80007ee:	78e2      	ldrb	r2, [r4, #3]
 80007f0:	78a1      	ldrb	r1, [r4, #2]
 80007f2:	7860      	ldrb	r0, [r4, #1]
 80007f4:	240c      	movs	r4, #12
 80007f6:	9b00      	ldr	r3, [sp, #0]
 80007f8:	435c      	muls	r4, r3
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <simpleserial_get+0xdc>)
 80007fc:	191b      	adds	r3, r3, r4
 80007fe:	689c      	ldr	r4, [r3, #8]
 8000800:	ab05      	add	r3, sp, #20
 8000802:	47a0      	blx	r4
 8000804:	7038      	strb	r0, [r7, #0]
 8000806:	e7a1      	b.n	800074c <simpleserial_get+0x1c>
 8000808:	200000a4 	.word	0x200000a4
 800080c:	200000a8 	.word	0x200000a8

08000810 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000810:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_2;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000812:	2790      	movs	r7, #144	; 0x90
	GpioInit.Pull      = GPIO_NOPULL;
 8000814:	2400      	movs	r4, #0
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000816:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000818:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_2;
 800081a:	2304      	movs	r3, #4
{
 800081c:	b097      	sub	sp, #92	; 0x5c
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800081e:	05ff      	lsls	r7, r7, #23
 8000820:	0038      	movs	r0, r7
 8000822:	a905      	add	r1, sp, #20
	GpioInit.Pin       = GPIO_PIN_2;
 8000824:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000826:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 8000828:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800082a:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800082c:	f000 fb46 	bl	8000ebc <HAL_GPIO_Init>
    
	GpioInit.Pin       = GPIO_PIN_4;
 8000830:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000832:	a905      	add	r1, sp, #20
 8000834:	0038      	movs	r0, r7
	GpioInit.Pin       = GPIO_PIN_4;
 8000836:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000838:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 800083a:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800083c:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800083e:	f000 fb3d 	bl	8000ebc <HAL_GPIO_Init>
  uint32_t flash_latency = 0;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000842:	2305      	movs	r3, #5
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000844:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000846:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000848:	960a      	str	r6, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 800084a:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 800084c:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800084e:	f000 f8c9 	bl	80009e4 <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000852:	2307      	movs	r3, #7
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000854:	0021      	movs	r1, r4
 8000856:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000858:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800085a:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800085c:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085e:	9404      	str	r4, [sp, #16]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000860:	f000 faa2 	bl	8000da8 <HAL_RCC_ClockConfig>
#endif
}
 8000864:	b017      	add	sp, #92	; 0x5c
 8000866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000868 <init_uart>:

void init_uart(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	2180      	movs	r1, #128	; 0x80
{
 800086a:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4c1b      	ldr	r4, [pc, #108]	; (80008dc <init_uart+0x74>)
 800086e:	0289      	lsls	r1, r1, #10
 8000870:	6962      	ldr	r2, [r4, #20]
{
 8000872:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	430a      	orrs	r2, r1
 8000876:	6162      	str	r2, [r4, #20]
 8000878:	6963      	ldr	r3, [r4, #20]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	GpioInit.Alternate = GPIO_AF1_USART1;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800087a:	2090      	movs	r0, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	400b      	ands	r3, r1
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	9b01      	ldr	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000882:	23c0      	movs	r3, #192	; 0xc0
 8000884:	00db      	lsls	r3, r3, #3
	GpioInit.Pull      = GPIO_PULLUP;
 8000886:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000888:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 800088a:	9303      	str	r3, [sp, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800088e:	a903      	add	r1, sp, #12
 8000890:	05c0      	lsls	r0, r0, #23
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000892:	9304      	str	r3, [sp, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 8000894:	9505      	str	r5, [sp, #20]
	GpioInit.Alternate = GPIO_AF1_USART1;
 8000896:	9507      	str	r5, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000898:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800089a:	f000 fb0f 	bl	8000ebc <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	69a2      	ldr	r2, [r4, #24]
 80008a2:	01c9      	lsls	r1, r1, #7
 80008a4:	430a      	orrs	r2, r1
 80008a6:	61a2      	str	r2, [r4, #24]
 80008a8:	69a3      	ldr	r3, [r4, #24]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
	UartHandle.Instance        = USART1;
 80008aa:	480d      	ldr	r0, [pc, #52]	; (80008e0 <init_uart+0x78>)
	__HAL_RCC_USART1_CLK_ENABLE();
 80008ac:	400b      	ands	r3, r1
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80008b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008b4:	43b3      	bics	r3, r6
 80008b6:	431d      	orrs	r5, r3
	UartHandle.Instance        = USART1;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <init_uart+0x7c>)
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80008ba:	6325      	str	r5, [r4, #48]	; 0x30
	UartHandle.Instance        = USART1;
 80008bc:	6003      	str	r3, [r0, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 80008be:	23e1      	movs	r3, #225	; 0xe1
 80008c0:	029b      	lsls	r3, r3, #10
 80008c2:	6043      	str	r3, [r0, #4]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80008c4:	2300      	movs	r3, #0
 80008c6:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80008c8:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80008ca:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80008cc:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80008ce:	330c      	adds	r3, #12
 80008d0:	6143      	str	r3, [r0, #20]
	HAL_UART_Init(&UartHandle);
 80008d2:	f000 fc5d 	bl	8001190 <HAL_UART_Init>
}
 80008d6:	b008      	add	sp, #32
 80008d8:	bd70      	pop	{r4, r5, r6, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	40021000 	.word	0x40021000
 80008e0:	20000168 	.word	0x20000168
 80008e4:	40013800 	.word	0x40013800

080008e8 <trigger_setup>:

void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	4a1e      	ldr	r2, [pc, #120]	; (8000964 <trigger_setup+0x7c>)
{
 80008ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	6951      	ldr	r1, [r2, #20]
 80008f0:	0280      	lsls	r0, r0, #10
 80008f2:	4301      	orrs	r1, r0
 80008f4:	6151      	str	r1, [r2, #20]
 80008f6:	6953      	ldr	r3, [r2, #20]
{
 80008f8:	b087      	sub	sp, #28
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4003      	ands	r3, r0
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_7;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80008fc:	2490      	movs	r4, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	9300      	str	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000900:	2501      	movs	r5, #1
	GpioInit.Pull      = GPIO_NOPULL;
 8000902:	2600      	movs	r6, #0
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000904:	2703      	movs	r7, #3
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Pin       = GPIO_PIN_7;
 8000908:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800090a:	05e4      	lsls	r4, r4, #23
 800090c:	0020      	movs	r0, r4
 800090e:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_7;
 8000910:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000912:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8000914:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000916:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000918:	f000 fad0 	bl	8000ebc <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_4;
 800091c:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800091e:	0020      	movs	r0, r4
 8000920:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_4;
 8000922:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000924:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8000926:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000928:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800092a:	f000 fac7 	bl	8000ebc <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_2;
 800092e:	2304      	movs	r3, #4
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000930:	0020      	movs	r0, r4
 8000932:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_2;
 8000934:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000936:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8000938:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800093a:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800093c:	f000 fabe 	bl	8000ebc <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000940:	0032      	movs	r2, r6
 8000942:	0020      	movs	r0, r4
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	f000 fb6b 	bl	8001020 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 800094a:	002a      	movs	r2, r5
 800094c:	0020      	movs	r0, r4
 800094e:	2110      	movs	r1, #16
 8000950:	f000 fb66 	bl	8001020 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000954:	002a      	movs	r2, r5
 8000956:	2104      	movs	r1, #4
 8000958:	0020      	movs	r0, r4
 800095a:	f000 fb61 	bl	8001020 <HAL_GPIO_WritePin>
}
 800095e:	b007      	add	sp, #28
 8000960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	40021000 	.word	0x40021000

08000968 <trigger_high>:

void trigger_high(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000968:	2090      	movs	r0, #144	; 0x90
{
 800096a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	05c0      	lsls	r0, r0, #23
 8000972:	f000 fb55 	bl	8001020 <HAL_GPIO_WritePin>
}
 8000976:	bd10      	pop	{r4, pc}

08000978 <trigger_low>:

void trigger_low(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000978:	2090      	movs	r0, #144	; 0x90
{
 800097a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	05c0      	lsls	r0, r0, #23
 8000982:	f000 fb4d 	bl	8001020 <HAL_GPIO_WritePin>
}   
 8000986:	bd10      	pop	{r4, pc}

08000988 <getch>:

char getch(void)
{
 8000988:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t d;
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 800098a:	2508      	movs	r5, #8
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
 800098c:	466b      	mov	r3, sp
 800098e:	1ddc      	adds	r4, r3, #7
 8000990:	2201      	movs	r2, #1
 8000992:	2332      	movs	r3, #50	; 0x32
 8000994:	0021      	movs	r1, r4
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <getch+0x28>)
 8000998:	f000 fc2c 	bl	80011f4 <HAL_UART_Receive>
 800099c:	2800      	cmp	r0, #0
 800099e:	d101      	bne.n	80009a4 <getch+0x1c>
	return d;
 80009a0:	7820      	ldrb	r0, [r4, #0]
}
 80009a2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80009a4:	4a03      	ldr	r2, [pc, #12]	; (80009b4 <getch+0x2c>)
 80009a6:	6a13      	ldr	r3, [r2, #32]
 80009a8:	432b      	orrs	r3, r5
 80009aa:	6213      	str	r3, [r2, #32]
 80009ac:	e7ee      	b.n	800098c <getch+0x4>
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	20000168 	.word	0x20000168
 80009b4:	40013800 	.word	0x40013800

080009b8 <putch>:

void putch(char c)
{
 80009b8:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
 80009ba:	466b      	mov	r3, sp
 80009bc:	1dd9      	adds	r1, r3, #7
 80009be:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80009c0:	2201      	movs	r2, #1
 80009c2:	4b02      	ldr	r3, [pc, #8]	; (80009cc <putch+0x14>)
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <putch+0x18>)
 80009c6:	f000 fc8d 	bl	80012e4 <HAL_UART_Transmit>
}
 80009ca:	bd07      	pop	{r0, r1, r2, pc}
 80009cc:	00001388 	.word	0x00001388
 80009d0:	20000168 	.word	0x20000168

080009d4 <HAL_GetTick>:
#define assert_param(expr) ((void)0U)

uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <HAL_GetTick+0xc>)
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	1c42      	adds	r2, r0, #1
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	4770      	bx	lr
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	200001d8 	.word	0x200001d8

080009e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009e6:	6803      	ldr	r3, [r0, #0]
{
 80009e8:	0004      	movs	r4, r0
 80009ea:	b085      	sub	sp, #20
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ec:	07db      	lsls	r3, r3, #31
 80009ee:	d42f      	bmi.n	8000a50 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	079b      	lsls	r3, r3, #30
 80009f4:	d500      	bpl.n	80009f8 <HAL_RCC_OscConfig+0x14>
 80009f6:	e081      	b.n	8000afc <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009f8:	6823      	ldr	r3, [r4, #0]
 80009fa:	071b      	lsls	r3, r3, #28
 80009fc:	d500      	bpl.n	8000a00 <HAL_RCC_OscConfig+0x1c>
 80009fe:	e0bc      	b.n	8000b7a <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	075b      	lsls	r3, r3, #29
 8000a04:	d500      	bpl.n	8000a08 <HAL_RCC_OscConfig+0x24>
 8000a06:	e0df      	b.n	8000bc8 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000a08:	6823      	ldr	r3, [r4, #0]
 8000a0a:	06db      	lsls	r3, r3, #27
 8000a0c:	d51a      	bpl.n	8000a44 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000a0e:	6962      	ldr	r2, [r4, #20]
 8000a10:	2304      	movs	r3, #4
 8000a12:	4db5      	ldr	r5, [pc, #724]	; (8000ce8 <HAL_RCC_OscConfig+0x304>)
 8000a14:	2a01      	cmp	r2, #1
 8000a16:	d000      	beq.n	8000a1a <HAL_RCC_OscConfig+0x36>
 8000a18:	e14a      	b.n	8000cb0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a1a:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a1c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a1e:	430b      	orrs	r3, r1
 8000a20:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000a22:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a24:	431a      	orrs	r2, r3
 8000a26:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a28:	f7ff ffd4 	bl	80009d4 <HAL_GetTick>
 8000a2c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a2e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a30:	423b      	tst	r3, r7
 8000a32:	d100      	bne.n	8000a36 <HAL_RCC_OscConfig+0x52>
 8000a34:	e135      	b.n	8000ca2 <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000a36:	21f8      	movs	r1, #248	; 0xf8
 8000a38:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000a3a:	69a3      	ldr	r3, [r4, #24]
 8000a3c:	438a      	bics	r2, r1
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a44:	6a21      	ldr	r1, [r4, #32]
 8000a46:	2900      	cmp	r1, #0
 8000a48:	d000      	beq.n	8000a4c <HAL_RCC_OscConfig+0x68>
 8000a4a:	e159      	b.n	8000d00 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	e013      	b.n	8000a78 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a50:	210c      	movs	r1, #12
 8000a52:	4da5      	ldr	r5, [pc, #660]	; (8000ce8 <HAL_RCC_OscConfig+0x304>)
 8000a54:	686a      	ldr	r2, [r5, #4]
 8000a56:	400a      	ands	r2, r1
 8000a58:	2a04      	cmp	r2, #4
 8000a5a:	d006      	beq.n	8000a6a <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a5c:	686b      	ldr	r3, [r5, #4]
 8000a5e:	400b      	ands	r3, r1
 8000a60:	2b08      	cmp	r3, #8
 8000a62:	d10b      	bne.n	8000a7c <HAL_RCC_OscConfig+0x98>
 8000a64:	686b      	ldr	r3, [r5, #4]
 8000a66:	03db      	lsls	r3, r3, #15
 8000a68:	d508      	bpl.n	8000a7c <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a6a:	682b      	ldr	r3, [r5, #0]
 8000a6c:	039b      	lsls	r3, r3, #14
 8000a6e:	d5bf      	bpl.n	80009f0 <HAL_RCC_OscConfig+0xc>
 8000a70:	6863      	ldr	r3, [r4, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1bc      	bne.n	80009f0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000a76:	2001      	movs	r0, #1
}
 8000a78:	b005      	add	sp, #20
 8000a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a7c:	6863      	ldr	r3, [r4, #4]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d113      	bne.n	8000aaa <HAL_RCC_OscConfig+0xc6>
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	682a      	ldr	r2, [r5, #0]
 8000a86:	025b      	lsls	r3, r3, #9
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a8c:	f7ff ffa2 	bl	80009d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a90:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000a92:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a94:	02bf      	lsls	r7, r7, #10
 8000a96:	682b      	ldr	r3, [r5, #0]
 8000a98:	423b      	tst	r3, r7
 8000a9a:	d1a9      	bne.n	80009f0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a9c:	f7ff ff9a 	bl	80009d4 <HAL_GetTick>
 8000aa0:	1b80      	subs	r0, r0, r6
 8000aa2:	2864      	cmp	r0, #100	; 0x64
 8000aa4:	d9f7      	bls.n	8000a96 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	e7e6      	b.n	8000a78 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d116      	bne.n	8000adc <HAL_RCC_OscConfig+0xf8>
 8000aae:	682b      	ldr	r3, [r5, #0]
 8000ab0:	4a8e      	ldr	r2, [pc, #568]	; (8000cec <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ab2:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	602b      	str	r3, [r5, #0]
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	4a8d      	ldr	r2, [pc, #564]	; (8000cf0 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000abc:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000abe:	4013      	ands	r3, r2
 8000ac0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ac2:	f7ff ff87 	bl	80009d4 <HAL_GetTick>
 8000ac6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ac8:	682b      	ldr	r3, [r5, #0]
 8000aca:	423b      	tst	r3, r7
 8000acc:	d100      	bne.n	8000ad0 <HAL_RCC_OscConfig+0xec>
 8000ace:	e78f      	b.n	80009f0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ad0:	f7ff ff80 	bl	80009d4 <HAL_GetTick>
 8000ad4:	1b80      	subs	r0, r0, r6
 8000ad6:	2864      	cmp	r0, #100	; 0x64
 8000ad8:	d9f6      	bls.n	8000ac8 <HAL_RCC_OscConfig+0xe4>
 8000ada:	e7e4      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000adc:	2b05      	cmp	r3, #5
 8000ade:	d105      	bne.n	8000aec <HAL_RCC_OscConfig+0x108>
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	682a      	ldr	r2, [r5, #0]
 8000ae4:	02db      	lsls	r3, r3, #11
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	602b      	str	r3, [r5, #0]
 8000aea:	e7ca      	b.n	8000a82 <HAL_RCC_OscConfig+0x9e>
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	4a7f      	ldr	r2, [pc, #508]	; (8000cec <HAL_RCC_OscConfig+0x308>)
 8000af0:	4013      	ands	r3, r2
 8000af2:	602b      	str	r3, [r5, #0]
 8000af4:	682b      	ldr	r3, [r5, #0]
 8000af6:	4a7e      	ldr	r2, [pc, #504]	; (8000cf0 <HAL_RCC_OscConfig+0x30c>)
 8000af8:	4013      	ands	r3, r2
 8000afa:	e7c6      	b.n	8000a8a <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000afc:	220c      	movs	r2, #12
 8000afe:	4d7a      	ldr	r5, [pc, #488]	; (8000ce8 <HAL_RCC_OscConfig+0x304>)
 8000b00:	686b      	ldr	r3, [r5, #4]
 8000b02:	4213      	tst	r3, r2
 8000b04:	d006      	beq.n	8000b14 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b06:	686b      	ldr	r3, [r5, #4]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d110      	bne.n	8000b30 <HAL_RCC_OscConfig+0x14c>
 8000b0e:	686b      	ldr	r3, [r5, #4]
 8000b10:	03db      	lsls	r3, r3, #15
 8000b12:	d40d      	bmi.n	8000b30 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b14:	682b      	ldr	r3, [r5, #0]
 8000b16:	079b      	lsls	r3, r3, #30
 8000b18:	d502      	bpl.n	8000b20 <HAL_RCC_OscConfig+0x13c>
 8000b1a:	68e3      	ldr	r3, [r4, #12]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d1aa      	bne.n	8000a76 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b20:	21f8      	movs	r1, #248	; 0xf8
 8000b22:	682a      	ldr	r2, [r5, #0]
 8000b24:	6923      	ldr	r3, [r4, #16]
 8000b26:	438a      	bics	r2, r1
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	602b      	str	r3, [r5, #0]
 8000b2e:	e763      	b.n	80009f8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b30:	68e2      	ldr	r2, [r4, #12]
 8000b32:	2301      	movs	r3, #1
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	d00f      	beq.n	8000b58 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000b38:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b3a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b40:	f7ff ff48 	bl	80009d4 <HAL_GetTick>
 8000b44:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b46:	682b      	ldr	r3, [r5, #0]
 8000b48:	423b      	tst	r3, r7
 8000b4a:	d1e9      	bne.n	8000b20 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b4c:	f7ff ff42 	bl	80009d4 <HAL_GetTick>
 8000b50:	1b80      	subs	r0, r0, r6
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9f7      	bls.n	8000b46 <HAL_RCC_OscConfig+0x162>
 8000b56:	e7a6      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000b58:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b5a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000b5c:	439a      	bics	r2, r3
 8000b5e:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000b60:	f7ff ff38 	bl	80009d4 <HAL_GetTick>
 8000b64:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	423b      	tst	r3, r7
 8000b6a:	d100      	bne.n	8000b6e <HAL_RCC_OscConfig+0x18a>
 8000b6c:	e744      	b.n	80009f8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b6e:	f7ff ff31 	bl	80009d4 <HAL_GetTick>
 8000b72:	1b80      	subs	r0, r0, r6
 8000b74:	2802      	cmp	r0, #2
 8000b76:	d9f6      	bls.n	8000b66 <HAL_RCC_OscConfig+0x182>
 8000b78:	e795      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b7a:	69e2      	ldr	r2, [r4, #28]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	4d5a      	ldr	r5, [pc, #360]	; (8000ce8 <HAL_RCC_OscConfig+0x304>)
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	d010      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000b84:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b86:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000b8c:	f7ff ff22 	bl	80009d4 <HAL_GetTick>
 8000b90:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000b94:	423b      	tst	r3, r7
 8000b96:	d000      	beq.n	8000b9a <HAL_RCC_OscConfig+0x1b6>
 8000b98:	e732      	b.n	8000a00 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b9a:	f7ff ff1b 	bl	80009d4 <HAL_GetTick>
 8000b9e:	1b80      	subs	r0, r0, r6
 8000ba0:	2802      	cmp	r0, #2
 8000ba2:	d9f6      	bls.n	8000b92 <HAL_RCC_OscConfig+0x1ae>
 8000ba4:	e77f      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000ba6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ba8:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000baa:	439a      	bics	r2, r3
 8000bac:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000bae:	f7ff ff11 	bl	80009d4 <HAL_GetTick>
 8000bb2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bb4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000bb6:	423b      	tst	r3, r7
 8000bb8:	d100      	bne.n	8000bbc <HAL_RCC_OscConfig+0x1d8>
 8000bba:	e721      	b.n	8000a00 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bbc:	f7ff ff0a 	bl	80009d4 <HAL_GetTick>
 8000bc0:	1b80      	subs	r0, r0, r6
 8000bc2:	2802      	cmp	r0, #2
 8000bc4:	d9f6      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x1d0>
 8000bc6:	e76e      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bc8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000bca:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bcc:	4d46      	ldr	r5, [pc, #280]	; (8000ce8 <HAL_RCC_OscConfig+0x304>)
 8000bce:	0552      	lsls	r2, r2, #21
 8000bd0:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000bd2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bd4:	4213      	tst	r3, r2
 8000bd6:	d108      	bne.n	8000bea <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	69eb      	ldr	r3, [r5, #28]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61eb      	str	r3, [r5, #28]
 8000bde:	69eb      	ldr	r3, [r5, #28]
 8000be0:	4013      	ands	r3, r2
 8000be2:	9303      	str	r3, [sp, #12]
 8000be4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000be6:	2301      	movs	r3, #1
 8000be8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bea:	2780      	movs	r7, #128	; 0x80
 8000bec:	4e41      	ldr	r6, [pc, #260]	; (8000cf4 <HAL_RCC_OscConfig+0x310>)
 8000bee:	007f      	lsls	r7, r7, #1
 8000bf0:	6833      	ldr	r3, [r6, #0]
 8000bf2:	423b      	tst	r3, r7
 8000bf4:	d006      	beq.n	8000c04 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bf6:	68a3      	ldr	r3, [r4, #8]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d113      	bne.n	8000c24 <HAL_RCC_OscConfig+0x240>
 8000bfc:	6a2a      	ldr	r2, [r5, #32]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	622b      	str	r3, [r5, #32]
 8000c02:	e030      	b.n	8000c66 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c04:	6833      	ldr	r3, [r6, #0]
 8000c06:	433b      	orrs	r3, r7
 8000c08:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c0a:	f7ff fee3 	bl	80009d4 <HAL_GetTick>
 8000c0e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c10:	6833      	ldr	r3, [r6, #0]
 8000c12:	423b      	tst	r3, r7
 8000c14:	d1ef      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c16:	f7ff fedd 	bl	80009d4 <HAL_GetTick>
 8000c1a:	9b01      	ldr	r3, [sp, #4]
 8000c1c:	1ac0      	subs	r0, r0, r3
 8000c1e:	2864      	cmp	r0, #100	; 0x64
 8000c20:	d9f6      	bls.n	8000c10 <HAL_RCC_OscConfig+0x22c>
 8000c22:	e740      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d114      	bne.n	8000c54 <HAL_RCC_OscConfig+0x270>
 8000c2a:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c2c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c2e:	4393      	bics	r3, r2
 8000c30:	622b      	str	r3, [r5, #32]
 8000c32:	6a2b      	ldr	r3, [r5, #32]
 8000c34:	3203      	adds	r2, #3
 8000c36:	4393      	bics	r3, r2
 8000c38:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000c3a:	f7ff fecb 	bl	80009d4 <HAL_GetTick>
 8000c3e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c40:	6a2b      	ldr	r3, [r5, #32]
 8000c42:	423b      	tst	r3, r7
 8000c44:	d016      	beq.n	8000c74 <HAL_RCC_OscConfig+0x290>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c46:	f7ff fec5 	bl	80009d4 <HAL_GetTick>
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <HAL_RCC_OscConfig+0x314>)
 8000c4c:	1b80      	subs	r0, r0, r6
 8000c4e:	4298      	cmp	r0, r3
 8000c50:	d9f6      	bls.n	8000c40 <HAL_RCC_OscConfig+0x25c>
 8000c52:	e728      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c54:	2b05      	cmp	r3, #5
 8000c56:	d116      	bne.n	8000c86 <HAL_RCC_OscConfig+0x2a2>
 8000c58:	6a29      	ldr	r1, [r5, #32]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	622b      	str	r3, [r5, #32]
 8000c60:	6a2b      	ldr	r3, [r5, #32]
 8000c62:	431a      	orrs	r2, r3
 8000c64:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8000c66:	f7ff feb5 	bl	80009d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c6a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000c6c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c6e:	6a2b      	ldr	r3, [r5, #32]
 8000c70:	423b      	tst	r3, r7
 8000c72:	d00f      	beq.n	8000c94 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8000c74:	9b00      	ldr	r3, [sp, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d000      	beq.n	8000c7c <HAL_RCC_OscConfig+0x298>
 8000c7a:	e6c5      	b.n	8000a08 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c7c:	69eb      	ldr	r3, [r5, #28]
 8000c7e:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <HAL_RCC_OscConfig+0x318>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	61eb      	str	r3, [r5, #28]
 8000c84:	e6c0      	b.n	8000a08 <HAL_RCC_OscConfig+0x24>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c86:	6a2b      	ldr	r3, [r5, #32]
 8000c88:	4393      	bics	r3, r2
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	622b      	str	r3, [r5, #32]
 8000c8e:	6a2b      	ldr	r3, [r5, #32]
 8000c90:	4393      	bics	r3, r2
 8000c92:	e7b5      	b.n	8000c00 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c94:	f7ff fe9e 	bl	80009d4 <HAL_GetTick>
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_RCC_OscConfig+0x314>)
 8000c9a:	1b80      	subs	r0, r0, r6
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	d9e6      	bls.n	8000c6e <HAL_RCC_OscConfig+0x28a>
 8000ca0:	e701      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ca2:	f7ff fe97 	bl	80009d4 <HAL_GetTick>
 8000ca6:	1b80      	subs	r0, r0, r6
 8000ca8:	2802      	cmp	r0, #2
 8000caa:	d800      	bhi.n	8000cae <HAL_RCC_OscConfig+0x2ca>
 8000cac:	e6bf      	b.n	8000a2e <HAL_RCC_OscConfig+0x4a>
 8000cae:	e6fa      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000cb0:	3205      	adds	r2, #5
 8000cb2:	d103      	bne.n	8000cbc <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000cb4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000cb6:	439a      	bics	r2, r3
 8000cb8:	636a      	str	r2, [r5, #52]	; 0x34
 8000cba:	e6bc      	b.n	8000a36 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cbc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cbe:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cc0:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000cc2:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cc4:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000cc6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000cc8:	4393      	bics	r3, r2
 8000cca:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ccc:	f7ff fe82 	bl	80009d4 <HAL_GetTick>
 8000cd0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cd2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000cd4:	423b      	tst	r3, r7
 8000cd6:	d100      	bne.n	8000cda <HAL_RCC_OscConfig+0x2f6>
 8000cd8:	e6b4      	b.n	8000a44 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cda:	f7ff fe7b 	bl	80009d4 <HAL_GetTick>
 8000cde:	1b80      	subs	r0, r0, r6
 8000ce0:	2802      	cmp	r0, #2
 8000ce2:	d9f6      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x2ee>
 8000ce4:	e6df      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	fffeffff 	.word	0xfffeffff
 8000cf0:	fffbffff 	.word	0xfffbffff
 8000cf4:	40007000 	.word	0x40007000
 8000cf8:	00001388 	.word	0x00001388
 8000cfc:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d00:	220c      	movs	r2, #12
 8000d02:	4d26      	ldr	r5, [pc, #152]	; (8000d9c <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000d04:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d06:	686b      	ldr	r3, [r5, #4]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d100      	bne.n	8000d10 <HAL_RCC_OscConfig+0x32c>
 8000d0e:	e6b3      	b.n	8000a78 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000d10:	682b      	ldr	r3, [r5, #0]
 8000d12:	4a23      	ldr	r2, [pc, #140]	; (8000da0 <HAL_RCC_OscConfig+0x3bc>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d18:	2902      	cmp	r1, #2
 8000d1a:	d12f      	bne.n	8000d7c <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fe5a 	bl	80009d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d20:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000d22:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d24:	04bf      	lsls	r7, r7, #18
 8000d26:	682b      	ldr	r3, [r5, #0]
 8000d28:	423b      	tst	r3, r7
 8000d2a:	d121      	bne.n	8000d70 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d30:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d32:	4393      	bics	r3, r2
 8000d34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d36:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000d3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000d3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d40:	686a      	ldr	r2, [r5, #4]
 8000d42:	430b      	orrs	r3, r1
 8000d44:	4917      	ldr	r1, [pc, #92]	; (8000da4 <HAL_RCC_OscConfig+0x3c0>)
 8000d46:	400a      	ands	r2, r1
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	682a      	ldr	r2, [r5, #0]
 8000d50:	045b      	lsls	r3, r3, #17
 8000d52:	4313      	orrs	r3, r2
 8000d54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d56:	f7ff fe3d 	bl	80009d4 <HAL_GetTick>
 8000d5a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d5c:	682b      	ldr	r3, [r5, #0]
 8000d5e:	4233      	tst	r3, r6
 8000d60:	d000      	beq.n	8000d64 <HAL_RCC_OscConfig+0x380>
 8000d62:	e673      	b.n	8000a4c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d64:	f7ff fe36 	bl	80009d4 <HAL_GetTick>
 8000d68:	1b00      	subs	r0, r0, r4
 8000d6a:	2802      	cmp	r0, #2
 8000d6c:	d9f6      	bls.n	8000d5c <HAL_RCC_OscConfig+0x378>
 8000d6e:	e69a      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d70:	f7ff fe30 	bl	80009d4 <HAL_GetTick>
 8000d74:	1b80      	subs	r0, r0, r6
 8000d76:	2802      	cmp	r0, #2
 8000d78:	d9d5      	bls.n	8000d26 <HAL_RCC_OscConfig+0x342>
 8000d7a:	e694      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fe2a 	bl	80009d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d80:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000d82:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d84:	04b6      	lsls	r6, r6, #18
 8000d86:	682b      	ldr	r3, [r5, #0]
 8000d88:	4233      	tst	r3, r6
 8000d8a:	d100      	bne.n	8000d8e <HAL_RCC_OscConfig+0x3aa>
 8000d8c:	e65e      	b.n	8000a4c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d8e:	f7ff fe21 	bl	80009d4 <HAL_GetTick>
 8000d92:	1b00      	subs	r0, r0, r4
 8000d94:	2802      	cmp	r0, #2
 8000d96:	d9f6      	bls.n	8000d86 <HAL_RCC_OscConfig+0x3a2>
 8000d98:	e685      	b.n	8000aa6 <HAL_RCC_OscConfig+0xc2>
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	feffffff 	.word	0xfeffffff
 8000da4:	ffc2ffff 	.word	0xffc2ffff

08000da8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000daa:	2201      	movs	r2, #1
 8000dac:	4d3e      	ldr	r5, [pc, #248]	; (8000ea8 <HAL_RCC_ClockConfig+0x100>)
{
 8000dae:	0004      	movs	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000db0:	682b      	ldr	r3, [r5, #0]
{
 8000db2:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000db4:	4013      	ands	r3, r2
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d312      	bcc.n	8000de0 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dba:	6822      	ldr	r2, [r4, #0]
 8000dbc:	0793      	lsls	r3, r2, #30
 8000dbe:	d419      	bmi.n	8000df4 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dc0:	07d3      	lsls	r3, r2, #31
 8000dc2:	d41f      	bmi.n	8000e04 <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	682a      	ldr	r2, [r5, #0]
 8000dc8:	401a      	ands	r2, r3
 8000dca:	42ba      	cmp	r2, r7
 8000dcc:	d85d      	bhi.n	8000e8a <HAL_RCC_ClockConfig+0xe2>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dce:	6823      	ldr	r3, [r4, #0]
 8000dd0:	075b      	lsls	r3, r3, #29
 8000dd2:	d461      	bmi.n	8000e98 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /* Update the SystemCoreClock global variable */
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
  SystemCoreClock = 7372800;
 8000dd4:	22e1      	movs	r2, #225	; 0xe1
 8000dd6:	4b35      	ldr	r3, [pc, #212]	; (8000eac <HAL_RCC_ClockConfig+0x104>)
 8000dd8:	03d2      	lsls	r2, r2, #15
  
  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8000dda:	2000      	movs	r0, #0
  SystemCoreClock = 7372800;
 8000ddc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	4393      	bics	r3, r2
 8000de4:	430b      	orrs	r3, r1
 8000de6:	602b      	str	r3, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000de8:	682b      	ldr	r3, [r5, #0]
 8000dea:	4013      	ands	r3, r2
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d0e4      	beq.n	8000dba <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000df0:	2001      	movs	r0, #1
}
 8000df2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000df4:	20f0      	movs	r0, #240	; 0xf0
 8000df6:	492e      	ldr	r1, [pc, #184]	; (8000eb0 <HAL_RCC_ClockConfig+0x108>)
 8000df8:	684b      	ldr	r3, [r1, #4]
 8000dfa:	4383      	bics	r3, r0
 8000dfc:	68a0      	ldr	r0, [r4, #8]
 8000dfe:	4303      	orrs	r3, r0
 8000e00:	604b      	str	r3, [r1, #4]
 8000e02:	e7dd      	b.n	8000dc0 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e04:	4e2a      	ldr	r6, [pc, #168]	; (8000eb0 <HAL_RCC_ClockConfig+0x108>)
 8000e06:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e08:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e0a:	2a01      	cmp	r2, #1
 8000e0c:	d11a      	bne.n	8000e44 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0e:	039b      	lsls	r3, r3, #14
 8000e10:	d5ee      	bpl.n	8000df0 <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e12:	2103      	movs	r1, #3
 8000e14:	6873      	ldr	r3, [r6, #4]
 8000e16:	438b      	bics	r3, r1
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000e1c:	f7ff fdda 	bl	80009d4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e20:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000e22:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d115      	bne.n	8000e54 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e28:	220c      	movs	r2, #12
 8000e2a:	6873      	ldr	r3, [r6, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	d0c8      	beq.n	8000dc4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e32:	f7ff fdcf 	bl	80009d4 <HAL_GetTick>
 8000e36:	9b01      	ldr	r3, [sp, #4]
 8000e38:	1ac0      	subs	r0, r0, r3
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <HAL_RCC_ClockConfig+0x10c>)
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	d9f3      	bls.n	8000e28 <HAL_RCC_ClockConfig+0x80>
          return HAL_TIMEOUT;
 8000e40:	2003      	movs	r0, #3
 8000e42:	e7d6      	b.n	8000df2 <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e44:	2a02      	cmp	r2, #2
 8000e46:	d102      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e48:	019b      	lsls	r3, r3, #6
 8000e4a:	d4e2      	bmi.n	8000e12 <HAL_RCC_ClockConfig+0x6a>
 8000e4c:	e7d0      	b.n	8000df0 <HAL_RCC_ClockConfig+0x48>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4e:	079b      	lsls	r3, r3, #30
 8000e50:	d4df      	bmi.n	8000e12 <HAL_RCC_ClockConfig+0x6a>
 8000e52:	e7cd      	b.n	8000df0 <HAL_RCC_ClockConfig+0x48>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d012      	beq.n	8000e7e <HAL_RCC_ClockConfig+0xd6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e58:	220c      	movs	r2, #12
 8000e5a:	6873      	ldr	r3, [r6, #4]
 8000e5c:	4213      	tst	r3, r2
 8000e5e:	d0b1      	beq.n	8000dc4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e60:	f7ff fdb8 	bl	80009d4 <HAL_GetTick>
 8000e64:	9b01      	ldr	r3, [sp, #4]
 8000e66:	1ac0      	subs	r0, r0, r3
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_RCC_ClockConfig+0x10c>)
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d9f4      	bls.n	8000e58 <HAL_RCC_ClockConfig+0xb0>
 8000e6e:	e7e7      	b.n	8000e40 <HAL_RCC_ClockConfig+0x98>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e70:	f7ff fdb0 	bl	80009d4 <HAL_GetTick>
 8000e74:	9b01      	ldr	r3, [sp, #4]
 8000e76:	1ac0      	subs	r0, r0, r3
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_RCC_ClockConfig+0x10c>)
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d8e0      	bhi.n	8000e40 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	6873      	ldr	r3, [r6, #4]
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d1f3      	bne.n	8000e70 <HAL_RCC_ClockConfig+0xc8>
 8000e88:	e79c      	b.n	8000dc4 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e8a:	682a      	ldr	r2, [r5, #0]
 8000e8c:	439a      	bics	r2, r3
 8000e8e:	602a      	str	r2, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e90:	682a      	ldr	r2, [r5, #0]
 8000e92:	421a      	tst	r2, r3
 8000e94:	d09b      	beq.n	8000dce <HAL_RCC_ClockConfig+0x26>
 8000e96:	e7ab      	b.n	8000df0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000e98:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <HAL_RCC_ClockConfig+0x108>)
 8000e9a:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <HAL_RCC_ClockConfig+0x110>)
 8000e9c:	6853      	ldr	r3, [r2, #4]
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	68e1      	ldr	r1, [r4, #12]
 8000ea2:	430b      	orrs	r3, r1
 8000ea4:	6053      	str	r3, [r2, #4]
 8000ea6:	e795      	b.n	8000dd4 <HAL_RCC_ClockConfig+0x2c>
 8000ea8:	40022000 	.word	0x40022000
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	00001388 	.word	0x00001388
 8000eb8:	fffff8ff 	.word	0xfffff8ff

08000ebc <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00U;
 8000ebc:	2300      	movs	r3, #0
{ 
 8000ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec0:	b087      	sub	sp, #28
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ec2:	680a      	ldr	r2, [r1, #0]
 8000ec4:	0014      	movs	r4, r2
 8000ec6:	40dc      	lsrs	r4, r3
 8000ec8:	d101      	bne.n	8000ece <HAL_GPIO_Init+0x12>
      }
    }
    
    position++;
  } 
}
 8000eca:	b007      	add	sp, #28
 8000ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ece:	2601      	movs	r6, #1
 8000ed0:	0014      	movs	r4, r2
 8000ed2:	409e      	lsls	r6, r3
 8000ed4:	4034      	ands	r4, r6
 8000ed6:	9402      	str	r4, [sp, #8]
    if(iocurrent)
 8000ed8:	4232      	tst	r2, r6
 8000eda:	d100      	bne.n	8000ede <HAL_GPIO_Init+0x22>
 8000edc:	e092      	b.n	8001004 <HAL_GPIO_Init+0x148>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000ede:	684a      	ldr	r2, [r1, #4]
 8000ee0:	0015      	movs	r5, r2
 8000ee2:	9201      	str	r2, [sp, #4]
 8000ee4:	2210      	movs	r2, #16
 8000ee6:	4395      	bics	r5, r2
 8000ee8:	9503      	str	r5, [sp, #12]
 8000eea:	2d02      	cmp	r5, #2
 8000eec:	d10d      	bne.n	8000f0a <HAL_GPIO_Init+0x4e>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000eee:	2407      	movs	r4, #7
 8000ef0:	250f      	movs	r5, #15
 8000ef2:	401c      	ands	r4, r3
 8000ef4:	00a4      	lsls	r4, r4, #2
 8000ef6:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3];
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	0092      	lsls	r2, r2, #2
 8000efc:	1882      	adds	r2, r0, r2
 8000efe:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000f00:	43af      	bics	r7, r5
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000f02:	690d      	ldr	r5, [r1, #16]
 8000f04:	40a5      	lsls	r5, r4
 8000f06:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3U] = temp;
 8000f08:	6217      	str	r7, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	005c      	lsls	r4, r3, #1
 8000f0e:	40a2      	lsls	r2, r4
 8000f10:	43d5      	mvns	r5, r2
 8000f12:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f14:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000f16:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f18:	4397      	bics	r7, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1a:	9a01      	ldr	r2, [sp, #4]
 8000f1c:	402a      	ands	r2, r5
 8000f1e:	40a2      	lsls	r2, r4
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f20:	9d03      	ldr	r5, [sp, #12]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f22:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f24:	3d01      	subs	r5, #1
      GPIOx->MODER = temp;
 8000f26:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f28:	2d01      	cmp	r5, #1
 8000f2a:	d80f      	bhi.n	8000f4c <HAL_GPIO_Init+0x90>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	4662      	mov	r2, ip
        temp = GPIOx->OSPEEDR; 
 8000f2e:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f30:	4015      	ands	r5, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000f32:	68ca      	ldr	r2, [r1, #12]
 8000f34:	40a2      	lsls	r2, r4
 8000f36:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 8000f38:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f3a:	6845      	ldr	r5, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f3c:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f3e:	43b5      	bics	r5, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f40:	2601      	movs	r6, #1
 8000f42:	0912      	lsrs	r2, r2, #4
 8000f44:	4032      	ands	r2, r6
 8000f46:	409a      	lsls	r2, r3
 8000f48:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000f4a:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4c:	4665      	mov	r5, ip
      temp = GPIOx->PUPDR;
 8000f4e:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f50:	402a      	ands	r2, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000f52:	688d      	ldr	r5, [r1, #8]
 8000f54:	40a5      	lsls	r5, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f56:	2480      	movs	r4, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000f58:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000f5a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f5c:	9a01      	ldr	r2, [sp, #4]
 8000f5e:	0564      	lsls	r4, r4, #21
 8000f60:	4222      	tst	r2, r4
 8000f62:	d04f      	beq.n	8001004 <HAL_GPIO_Init+0x148>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f64:	2501      	movs	r5, #1
 8000f66:	4a28      	ldr	r2, [pc, #160]	; (8001008 <HAL_GPIO_Init+0x14c>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f68:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	6994      	ldr	r4, [r2, #24]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f6c:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	432c      	orrs	r4, r5
 8000f70:	6194      	str	r4, [r2, #24]
 8000f72:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000f74:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	402a      	ands	r2, r5
 8000f78:	9205      	str	r2, [sp, #20]
 8000f7a:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8000f7c:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_GPIO_Init+0x150>)
 8000f7e:	00a4      	lsls	r4, r4, #2
 8000f80:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f82:	220f      	movs	r2, #15
 8000f84:	3502      	adds	r5, #2
 8000f86:	401d      	ands	r5, r3
 8000f88:	00ad      	lsls	r5, r5, #2
 8000f8a:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2];
 8000f8c:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f8e:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f90:	2200      	movs	r2, #0
 8000f92:	42b8      	cmp	r0, r7
 8000f94:	d00c      	beq.n	8000fb0 <HAL_GPIO_Init+0xf4>
 8000f96:	4f1e      	ldr	r7, [pc, #120]	; (8001010 <HAL_GPIO_Init+0x154>)
 8000f98:	3201      	adds	r2, #1
 8000f9a:	42b8      	cmp	r0, r7
 8000f9c:	d008      	beq.n	8000fb0 <HAL_GPIO_Init+0xf4>
 8000f9e:	4f1d      	ldr	r7, [pc, #116]	; (8001014 <HAL_GPIO_Init+0x158>)
 8000fa0:	3201      	adds	r2, #1
 8000fa2:	42b8      	cmp	r0, r7
 8000fa4:	d004      	beq.n	8000fb0 <HAL_GPIO_Init+0xf4>
 8000fa6:	4f1c      	ldr	r7, [pc, #112]	; (8001018 <HAL_GPIO_Init+0x15c>)
 8000fa8:	3201      	adds	r2, #1
 8000faa:	42b8      	cmp	r0, r7
 8000fac:	d000      	beq.n	8000fb0 <HAL_GPIO_Init+0xf4>
 8000fae:	3202      	adds	r2, #2
 8000fb0:	40aa      	lsls	r2, r5
 8000fb2:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fb4:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000fb6:	4a19      	ldr	r2, [pc, #100]	; (800101c <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fb8:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8000fba:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 8000fbc:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fbe:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fc0:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 8000fc2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc4:	03ff      	lsls	r7, r7, #15
 8000fc6:	d401      	bmi.n	8000fcc <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fc8:	0035      	movs	r5, r6
 8000fca:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000fcc:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000fce:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8000fd0:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd2:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000fd4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd6:	03bf      	lsls	r7, r7, #14
 8000fd8:	d401      	bmi.n	8000fde <HAL_GPIO_Init+0x122>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000fda:	0035      	movs	r5, r6
 8000fdc:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8000fde:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000fe0:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 8000fe2:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe4:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000fe6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe8:	02ff      	lsls	r7, r7, #11
 8000fea:	d401      	bmi.n	8000ff0 <HAL_GPIO_Init+0x134>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000fec:	0035      	movs	r5, r6
 8000fee:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8000ff0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000ff2:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 8000ff4:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff6:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000ff8:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ffa:	02bf      	lsls	r7, r7, #10
 8000ffc:	d401      	bmi.n	8001002 <HAL_GPIO_Init+0x146>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000ffe:	4025      	ands	r5, r4
 8001000:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8001002:	60d6      	str	r6, [r2, #12]
    position++;
 8001004:	3301      	adds	r3, #1
 8001006:	e75c      	b.n	8000ec2 <HAL_GPIO_Init+0x6>
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000
 8001010:	48000400 	.word	0x48000400
 8001014:	48000800 	.word	0x48000800
 8001018:	48000c00 	.word	0x48000c00
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001020:	2a00      	cmp	r2, #0
 8001022:	d001      	beq.n	8001028 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001024:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}										  
 8001026:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001028:	6281      	str	r1, [r0, #40]	; 0x28
}										  
 800102a:	e7fc      	b.n	8001026 <HAL_GPIO_WritePin+0x6>

0800102c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102e:	0004      	movs	r4, r0
 8001030:	000d      	movs	r5, r1
 8001032:	0017      	movs	r7, r2
 8001034:	001e      	movs	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001036:	6822      	ldr	r2, [r4, #0]
 8001038:	69d3      	ldr	r3, [r2, #28]
 800103a:	402b      	ands	r3, r5
 800103c:	1b5b      	subs	r3, r3, r5
 800103e:	4259      	negs	r1, r3
 8001040:	414b      	adcs	r3, r1
 8001042:	42bb      	cmp	r3, r7
 8001044:	d001      	beq.n	800104a <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001046:	2000      	movs	r0, #0
 8001048:	e018      	b.n	800107c <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 800104a:	9b06      	ldr	r3, [sp, #24]
 800104c:	3301      	adds	r3, #1
 800104e:	d0f3      	beq.n	8001038 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001050:	9b06      	ldr	r3, [sp, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d113      	bne.n	800107e <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <UART_WaitOnFlagUntilTimeout+0x60>)
 800105a:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800105c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800105e:	400a      	ands	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	31a3      	adds	r1, #163	; 0xa3
 8001066:	31ff      	adds	r1, #255	; 0xff
 8001068:	438a      	bics	r2, r1
 800106a:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800106c:	0022      	movs	r2, r4
 800106e:	2320      	movs	r3, #32
 8001070:	3269      	adds	r2, #105	; 0x69
 8001072:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8001074:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8001076:	2300      	movs	r3, #0
 8001078:	3468      	adds	r4, #104	; 0x68
 800107a:	7023      	strb	r3, [r4, #0]
}
 800107c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800107e:	f7ff fca9 	bl	80009d4 <HAL_GetTick>
 8001082:	9b06      	ldr	r3, [sp, #24]
 8001084:	1b80      	subs	r0, r0, r6
 8001086:	4298      	cmp	r0, r3
 8001088:	d9d5      	bls.n	8001036 <UART_WaitOnFlagUntilTimeout+0xa>
 800108a:	e7e4      	b.n	8001056 <UART_WaitOnFlagUntilTimeout+0x2a>
 800108c:	fffffe5f 	.word	0xfffffe5f

08001090 <UART_SetConfig>:

  return HAL_OK;
}

HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001090:	0003      	movs	r3, r0
 8001092:	b570      	push	{r4, r5, r6, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	691d      	ldr	r5, [r3, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001098:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800109a:	432a      	orrs	r2, r5
 800109c:	695d      	ldr	r5, [r3, #20]
 800109e:	69c1      	ldr	r1, [r0, #28]
 80010a0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010a2:	6820      	ldr	r0, [r4, #0]
 80010a4:	4d33      	ldr	r5, [pc, #204]	; (8001174 <UART_SetConfig+0xe4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80010a6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010a8:	4028      	ands	r0, r5
 80010aa:	4302      	orrs	r2, r0
 80010ac:	6022      	str	r2, [r4, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010ae:	6862      	ldr	r2, [r4, #4]
 80010b0:	4831      	ldr	r0, [pc, #196]	; (8001178 <UART_SetConfig+0xe8>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010b2:	6a1d      	ldr	r5, [r3, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010b4:	4002      	ands	r2, r0
 80010b6:	68d8      	ldr	r0, [r3, #12]
 80010b8:	4302      	orrs	r2, r0
 80010ba:	6062      	str	r2, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010bc:	699a      	ldr	r2, [r3, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010be:	68a0      	ldr	r0, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010c0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010c2:	4d2e      	ldr	r5, [pc, #184]	; (800117c <UART_SetConfig+0xec>)
 80010c4:	4028      	ands	r0, r5
 80010c6:	4302      	orrs	r2, r0

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010c8:	2003      	movs	r0, #3
 80010ca:	2580      	movs	r5, #128	; 0x80
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010cc:	60a2      	str	r2, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010ce:	4a2c      	ldr	r2, [pc, #176]	; (8001180 <UART_SetConfig+0xf0>)
 80010d0:	022d      	lsls	r5, r5, #8
 80010d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010d4:	4002      	ands	r2, r0
 80010d6:	3a01      	subs	r2, #1
 80010d8:	2a02      	cmp	r2, #2
 80010da:	d843      	bhi.n	8001164 <UART_SetConfig+0xd4>
 80010dc:	4829      	ldr	r0, [pc, #164]	; (8001184 <UART_SetConfig+0xf4>)
 80010de:	5c80      	ldrb	r0, [r0, r2]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010e0:	42a9      	cmp	r1, r5
 80010e2:	d120      	bne.n	8001126 <UART_SetConfig+0x96>
  {
    switch (clocksource)
 80010e4:	2808      	cmp	r0, #8
 80010e6:	d81b      	bhi.n	8001120 <UART_SetConfig+0x90>
 80010e8:	f7ff f872 	bl	80001d0 <__gnu_thumb1_case_uqi>
 80010ec:	1a051a3e 	.word	0x1a051a3e
 80010f0:	1a1a1a3e 	.word	0x1a1a1a3e
 80010f4:	15          	.byte	0x15
 80010f5:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80010f6:	6859      	ldr	r1, [r3, #4]
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <UART_SetConfig+0xf8>)
 80010fa:	0848      	lsrs	r0, r1, #1
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010fc:	18c0      	adds	r0, r0, r3
 80010fe:	f7ff f871 	bl	80001e4 <__udivsi3>
 8001102:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001104:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001106:	0019      	movs	r1, r3
 8001108:	220f      	movs	r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800110a:	071b      	lsls	r3, r3, #28
    brrtemp = usartdiv & 0xFFF0U;
 800110c:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800110e:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8001110:	430b      	orrs	r3, r1
 8001112:	60e3      	str	r3, [r4, #12]
    }
  }

  return ret;

}
 8001114:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001116:	6859      	ldr	r1, [r3, #4]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	0848      	lsrs	r0, r1, #1
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	e7ed      	b.n	80010fc <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001120:	2001      	movs	r0, #1
 8001122:	2300      	movs	r3, #0
 8001124:	e7ef      	b.n	8001106 <UART_SetConfig+0x76>
    switch (clocksource)
 8001126:	2808      	cmp	r0, #8
 8001128:	d81a      	bhi.n	8001160 <UART_SetConfig+0xd0>
 800112a:	f7ff f851 	bl	80001d0 <__gnu_thumb1_case_uqi>
 800112e:	190f      	.short	0x190f
 8001130:	190f1905 	.word	0x190f1905
 8001134:	1919      	.short	0x1919
 8001136:	14          	.byte	0x14
 8001137:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001138:	6859      	ldr	r1, [r3, #4]
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <UART_SetConfig+0xfc>)
 800113c:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800113e:	18c0      	adds	r0, r0, r3
 8001140:	f7ff f850 	bl	80001e4 <__udivsi3>
 8001144:	b280      	uxth	r0, r0
 8001146:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001148:	2000      	movs	r0, #0
        break;
 800114a:	e7e3      	b.n	8001114 <UART_SetConfig+0x84>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800114c:	6859      	ldr	r1, [r3, #4]
 800114e:	23e1      	movs	r3, #225	; 0xe1
 8001150:	0848      	lsrs	r0, r1, #1
 8001152:	03db      	lsls	r3, r3, #15
 8001154:	e7f3      	b.n	800113e <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001156:	6859      	ldr	r1, [r3, #4]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	0848      	lsrs	r0, r1, #1
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	e7ee      	b.n	800113e <UART_SetConfig+0xae>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001160:	2001      	movs	r0, #1
  return ret;
 8001162:	e7d7      	b.n	8001114 <UART_SetConfig+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001164:	42a9      	cmp	r1, r5
 8001166:	d1f1      	bne.n	800114c <UART_SetConfig+0xbc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001168:	6859      	ldr	r1, [r3, #4]
 800116a:	23e1      	movs	r3, #225	; 0xe1
 800116c:	0848      	lsrs	r0, r1, #1
 800116e:	041b      	lsls	r3, r3, #16
 8001170:	e7c4      	b.n	80010fc <UART_SetConfig+0x6c>
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	ffff69f3 	.word	0xffff69f3
 8001178:	ffffcfff 	.word	0xffffcfff
 800117c:	fffff4ff 	.word	0xfffff4ff
 8001180:	40021000 	.word	0x40021000
 8001184:	08002888 	.word	0x08002888
 8001188:	01e84800 	.word	0x01e84800
 800118c:	00f42400 	.word	0x00f42400

08001190 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001190:	b570      	push	{r4, r5, r6, lr}
 8001192:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001194:	d101      	bne.n	800119a <HAL_UART_Init+0xa>
  {
    return HAL_ERROR;
 8001196:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8001198:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 800119a:	0005      	movs	r5, r0
 800119c:	3569      	adds	r5, #105	; 0x69
 800119e:	782b      	ldrb	r3, [r5, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 80011a6:	0003      	movs	r3, r0
 80011a8:	3368      	adds	r3, #104	; 0x68
 80011aa:	701a      	strb	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80011ac:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80011ae:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80011b0:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80011b2:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80011b4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80011b6:	6813      	ldr	r3, [r2, #0]
 80011b8:	43b3      	bics	r3, r6
 80011ba:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80011bc:	f7ff ff68 	bl	8001090 <UART_SetConfig>
 80011c0:	42b0      	cmp	r0, r6
 80011c2:	d0e8      	beq.n	8001196 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	490a      	ldr	r1, [pc, #40]	; (80011f0 <HAL_UART_Init+0x60>)
 80011c8:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ca:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80011cc:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80011ce:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80011d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	438a      	bics	r2, r1
 80011d6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4316      	orrs	r6, r2
  huart->RxState = HAL_UART_STATE_READY;
 80011dc:	0022      	movs	r2, r4
  __HAL_UART_ENABLE(huart);
 80011de:	601e      	str	r6, [r3, #0]
  huart->gState  = HAL_UART_STATE_READY;
 80011e0:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011e2:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 80011e4:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 80011e6:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 80011e8:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80011ea:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80011ec:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 80011ee:	e7d3      	b.n	8001198 <HAL_UART_Init+0x8>
 80011f0:	fffff7ff 	.word	0xfffff7ff

080011f4 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f6:	b085      	sub	sp, #20
 80011f8:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80011fa:	0003      	movs	r3, r0
 80011fc:	336a      	adds	r3, #106	; 0x6a
{
 80011fe:	0017      	movs	r7, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001200:	781a      	ldrb	r2, [r3, #0]
{
 8001202:	0004      	movs	r4, r0
 8001204:	000d      	movs	r5, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001206:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001208:	2a20      	cmp	r2, #32
 800120a:	d139      	bne.n	8001280 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 800120c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800120e:	2900      	cmp	r1, #0
 8001210:	d036      	beq.n	8001280 <HAL_UART_Receive+0x8c>
 8001212:	2f00      	cmp	r7, #0
 8001214:	d034      	beq.n	8001280 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	68a1      	ldr	r1, [r4, #8]
 800121a:	0152      	lsls	r2, r2, #5
 800121c:	4291      	cmp	r1, r2
 800121e:	d104      	bne.n	800122a <HAL_UART_Receive+0x36>
 8001220:	6922      	ldr	r2, [r4, #16]
 8001222:	2a00      	cmp	r2, #0
 8001224:	d101      	bne.n	800122a <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8001226:	4205      	tst	r5, r0
 8001228:	d12a      	bne.n	8001280 <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 800122a:	0022      	movs	r2, r4
 800122c:	3268      	adds	r2, #104	; 0x68
 800122e:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 8001230:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001232:	2901      	cmp	r1, #1
 8001234:	d024      	beq.n	8001280 <HAL_UART_Receive+0x8c>
 8001236:	2101      	movs	r1, #1
 8001238:	7011      	strb	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800123a:	2200      	movs	r2, #0
 800123c:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800123e:	3222      	adds	r2, #34	; 0x22
 8001240:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001242:	f7ff fbc7 	bl	80009d4 <HAL_GetTick>
    huart->RxXferSize = Size;
 8001246:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 800124c:	3358      	adds	r3, #88	; 0x58
 800124e:	801f      	strh	r7, [r3, #0]
    huart->RxXferCount = Size;
 8001250:	805f      	strh	r7, [r3, #2]
    tickstart = HAL_GetTick();
 8001252:	0006      	movs	r6, r0
    UART_MASK_COMPUTATION(huart);
 8001254:	0149      	lsls	r1, r1, #5
 8001256:	3304      	adds	r3, #4
 8001258:	428a      	cmp	r2, r1
 800125a:	d115      	bne.n	8001288 <HAL_UART_Receive+0x94>
 800125c:	6922      	ldr	r2, [r4, #16]
 800125e:	2a00      	cmp	r2, #0
 8001260:	d110      	bne.n	8001284 <HAL_UART_Receive+0x90>
 8001262:	4a1f      	ldr	r2, [pc, #124]	; (80012e0 <HAL_UART_Receive+0xec>)
 8001264:	801a      	strh	r2, [r3, #0]
    uhMask = huart->Mask;
 8001266:	881f      	ldrh	r7, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001268:	0022      	movs	r2, r4
 800126a:	325a      	adds	r2, #90	; 0x5a
 800126c:	8813      	ldrh	r3, [r2, #0]
 800126e:	b298      	uxth	r0, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d110      	bne.n	8001296 <HAL_UART_Receive+0xa2>
    huart->RxState = HAL_UART_STATE_READY;
 8001274:	0023      	movs	r3, r4
 8001276:	2220      	movs	r2, #32
 8001278:	336a      	adds	r3, #106	; 0x6a
    __HAL_UNLOCK(huart);
 800127a:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 800127c:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800127e:	7020      	strb	r0, [r4, #0]
  }
}
 8001280:	b005      	add	sp, #20
 8001282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8001284:	22ff      	movs	r2, #255	; 0xff
 8001286:	e7ed      	b.n	8001264 <HAL_UART_Receive+0x70>
 8001288:	2a00      	cmp	r2, #0
 800128a:	d1ec      	bne.n	8001266 <HAL_UART_Receive+0x72>
 800128c:	6922      	ldr	r2, [r4, #16]
 800128e:	2a00      	cmp	r2, #0
 8001290:	d0f8      	beq.n	8001284 <HAL_UART_Receive+0x90>
 8001292:	227f      	movs	r2, #127	; 0x7f
 8001294:	e7e6      	b.n	8001264 <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 8001296:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001298:	2120      	movs	r1, #32
      huart->RxXferCount--;
 800129a:	3b01      	subs	r3, #1
 800129c:	b29b      	uxth	r3, r3
 800129e:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80012a0:	9b03      	ldr	r3, [sp, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	0020      	movs	r0, r4
 80012a8:	0033      	movs	r3, r6
 80012aa:	f7ff febf 	bl	800102c <UART_WaitOnFlagUntilTimeout>
 80012ae:	2800      	cmp	r0, #0
 80012b0:	d113      	bne.n	80012da <HAL_UART_Receive+0xe6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012b2:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80012b4:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012b6:	0011      	movs	r1, r2
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	0152      	lsls	r2, r2, #5
 80012bc:	4291      	cmp	r1, r2
 80012be:	d107      	bne.n	80012d0 <HAL_UART_Receive+0xdc>
 80012c0:	6922      	ldr	r2, [r4, #16]
 80012c2:	2a00      	cmp	r2, #0
 80012c4:	d104      	bne.n	80012d0 <HAL_UART_Receive+0xdc>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80012c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012c8:	403b      	ands	r3, r7
 80012ca:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 80012cc:	3502      	adds	r5, #2
 80012ce:	e7cb      	b.n	8001268 <HAL_UART_Receive+0x74>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80012d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012d2:	403b      	ands	r3, r7
 80012d4:	702b      	strb	r3, [r5, #0]
 80012d6:	3501      	adds	r5, #1
 80012d8:	e7c6      	b.n	8001268 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80012da:	2003      	movs	r0, #3
 80012dc:	e7d0      	b.n	8001280 <HAL_UART_Receive+0x8c>
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	000001ff 	.word	0x000001ff

080012e4 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	b085      	sub	sp, #20
 80012e8:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80012ea:	0003      	movs	r3, r0
 80012ec:	3369      	adds	r3, #105	; 0x69
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	781b      	ldrb	r3, [r3, #0]
{
 80012f2:	0004      	movs	r4, r0
 80012f4:	000d      	movs	r5, r1
 80012f6:	0016      	movs	r6, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80012f8:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 80012fa:	2b20      	cmp	r3, #32
 80012fc:	d148      	bne.n	8001390 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80012fe:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001300:	2900      	cmp	r1, #0
 8001302:	d045      	beq.n	8001390 <HAL_UART_Transmit+0xac>
 8001304:	2a00      	cmp	r2, #0
 8001306:	d043      	beq.n	8001390 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	68a2      	ldr	r2, [r4, #8]
 800130c:	015b      	lsls	r3, r3, #5
 800130e:	429a      	cmp	r2, r3
 8001310:	d104      	bne.n	800131c <HAL_UART_Transmit+0x38>
 8001312:	6923      	ldr	r3, [r4, #16]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_UART_Transmit+0x38>
      if((((uint32_t)pData)&1U) != 0U)
 8001318:	4201      	tst	r1, r0
 800131a:	d139      	bne.n	8001390 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800131c:	0023      	movs	r3, r4
 800131e:	3368      	adds	r3, #104	; 0x68
 8001320:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001322:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001324:	2a01      	cmp	r2, #1
 8001326:	d033      	beq.n	8001390 <HAL_UART_Transmit+0xac>
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800132c:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800132e:	9a02      	ldr	r2, [sp, #8]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001330:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001332:	3321      	adds	r3, #33	; 0x21
 8001334:	7013      	strb	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001336:	f7ff fb4d 	bl	80009d4 <HAL_GetTick>
    huart->TxXferSize = Size;
 800133a:	0023      	movs	r3, r4
 800133c:	3350      	adds	r3, #80	; 0x50
 800133e:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8001340:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001342:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8001344:	0007      	movs	r7, r0
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001346:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8001348:	0021      	movs	r1, r4
 800134a:	3152      	adds	r1, #82	; 0x52
 800134c:	880b      	ldrh	r3, [r1, #0]
 800134e:	b29a      	uxth	r2, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10e      	bne.n	8001372 <HAL_UART_Transmit+0x8e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001354:	9b03      	ldr	r3, [sp, #12]
 8001356:	2140      	movs	r1, #64	; 0x40
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	0020      	movs	r0, r4
 800135c:	003b      	movs	r3, r7
 800135e:	f7ff fe65 	bl	800102c <UART_WaitOnFlagUntilTimeout>
 8001362:	2800      	cmp	r0, #0
 8001364:	d113      	bne.n	800138e <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 8001366:	2320      	movs	r3, #32
 8001368:	9a02      	ldr	r2, [sp, #8]
    __HAL_UNLOCK(huart);
 800136a:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800136c:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 800136e:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001370:	e00e      	b.n	8001390 <HAL_UART_Transmit+0xac>
      huart->TxXferCount--;
 8001372:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001374:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8001376:	3b01      	subs	r3, #1
 8001378:	b29b      	uxth	r3, r3
 800137a:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800137c:	9b03      	ldr	r3, [sp, #12]
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	0020      	movs	r0, r4
 8001384:	003b      	movs	r3, r7
 8001386:	f7ff fe51 	bl	800102c <UART_WaitOnFlagUntilTimeout>
 800138a:	2800      	cmp	r0, #0
 800138c:	d002      	beq.n	8001394 <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 800138e:	2003      	movs	r0, #3
  }
}
 8001390:	b005      	add	sp, #20
 8001392:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001394:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001396:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001398:	42b3      	cmp	r3, r6
 800139a:	d108      	bne.n	80013ae <HAL_UART_Transmit+0xca>
 800139c:	6923      	ldr	r3, [r4, #16]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d105      	bne.n	80013ae <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80013a2:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80013a4:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80013a6:	05db      	lsls	r3, r3, #23
 80013a8:	0ddb      	lsrs	r3, r3, #23
 80013aa:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80013ac:	e7cc      	b.n	8001348 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80013ae:	782b      	ldrb	r3, [r5, #0]
 80013b0:	3501      	adds	r5, #1
 80013b2:	8513      	strh	r3, [r2, #40]	; 0x28
 80013b4:	e7c8      	b.n	8001348 <HAL_UART_Transmit+0x64>
 80013b6:	0000      	movs	r0, r0

080013b8 <Reset_Handler>:
 80013b8:	2100      	movs	r1, #0
 80013ba:	e003      	b.n	80013c4 <LoopCopyDataInit>

080013bc <CopyDataInit>:
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <LoopForever+0x2>)
 80013be:	585b      	ldr	r3, [r3, r1]
 80013c0:	5043      	str	r3, [r0, r1]
 80013c2:	3104      	adds	r1, #4

080013c4 <LoopCopyDataInit>:
 80013c4:	480a      	ldr	r0, [pc, #40]	; (80013f0 <LoopForever+0x6>)
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <LoopForever+0xa>)
 80013c8:	1842      	adds	r2, r0, r1
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d3f6      	bcc.n	80013bc <CopyDataInit>
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <LoopForever+0xe>)
 80013d0:	e002      	b.n	80013d8 <LoopFillZerobss>

080013d2 <FillZerobss>:
 80013d2:	2300      	movs	r3, #0
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	3204      	adds	r2, #4

080013d8 <LoopFillZerobss>:
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <LoopForever+0x12>)
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3f9      	bcc.n	80013d2 <FillZerobss>
 80013de:	e000      	b.n	80013e2 <LoopFillZerobss+0xa>
 80013e0:	bf00      	nop
 80013e2:	f000 f80f 	bl	8001404 <__libc_init_array>
 80013e6:	f7ff f8c7 	bl	8000578 <main>

080013ea <LoopForever>:
 80013ea:	e7fe      	b.n	80013ea <LoopForever>
 80013ec:	080029fc 	.word	0x080029fc
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000068 	.word	0x20000068
 80013f8:	20000068 	.word	0x20000068
 80013fc:	200001f0 	.word	0x200001f0

08001400 <BusFault_Handler>:
 8001400:	e7fe      	b.n	8001400 <BusFault_Handler>
 8001402:	0000      	movs	r0, r0

08001404 <__libc_init_array>:
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	2600      	movs	r6, #0
 8001408:	4d0c      	ldr	r5, [pc, #48]	; (800143c <__libc_init_array+0x38>)
 800140a:	4c0d      	ldr	r4, [pc, #52]	; (8001440 <__libc_init_array+0x3c>)
 800140c:	1b64      	subs	r4, r4, r5
 800140e:	10a4      	asrs	r4, r4, #2
 8001410:	42a6      	cmp	r6, r4
 8001412:	d109      	bne.n	8001428 <__libc_init_array+0x24>
 8001414:	2600      	movs	r6, #0
 8001416:	f001 f92b 	bl	8002670 <_init>
 800141a:	4d0a      	ldr	r5, [pc, #40]	; (8001444 <__libc_init_array+0x40>)
 800141c:	4c0a      	ldr	r4, [pc, #40]	; (8001448 <__libc_init_array+0x44>)
 800141e:	1b64      	subs	r4, r4, r5
 8001420:	10a4      	asrs	r4, r4, #2
 8001422:	42a6      	cmp	r6, r4
 8001424:	d105      	bne.n	8001432 <__libc_init_array+0x2e>
 8001426:	bd70      	pop	{r4, r5, r6, pc}
 8001428:	00b3      	lsls	r3, r6, #2
 800142a:	58eb      	ldr	r3, [r5, r3]
 800142c:	4798      	blx	r3
 800142e:	3601      	adds	r6, #1
 8001430:	e7ee      	b.n	8001410 <__libc_init_array+0xc>
 8001432:	00b3      	lsls	r3, r6, #2
 8001434:	58eb      	ldr	r3, [r5, r3]
 8001436:	4798      	blx	r3
 8001438:	3601      	adds	r6, #1
 800143a:	e7f2      	b.n	8001422 <__libc_init_array+0x1e>
 800143c:	080029f4 	.word	0x080029f4
 8001440:	080029f4 	.word	0x080029f4
 8001444:	080029f4 	.word	0x080029f4
 8001448:	080029f8 	.word	0x080029f8

0800144c <memcpy>:
 800144c:	2300      	movs	r3, #0
 800144e:	b510      	push	{r4, lr}
 8001450:	429a      	cmp	r2, r3
 8001452:	d100      	bne.n	8001456 <memcpy+0xa>
 8001454:	bd10      	pop	{r4, pc}
 8001456:	5ccc      	ldrb	r4, [r1, r3]
 8001458:	54c4      	strb	r4, [r0, r3]
 800145a:	3301      	adds	r3, #1
 800145c:	e7f8      	b.n	8001450 <memcpy+0x4>

0800145e <memset>:
 800145e:	0003      	movs	r3, r0
 8001460:	1882      	adds	r2, r0, r2
 8001462:	4293      	cmp	r3, r2
 8001464:	d100      	bne.n	8001468 <memset+0xa>
 8001466:	4770      	bx	lr
 8001468:	7019      	strb	r1, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	e7f9      	b.n	8001462 <memset+0x4>
 800146e:	0000      	movs	r0, r0

08001470 <srand>:
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <srand+0x48>)
 8001472:	b570      	push	{r4, r5, r6, lr}
 8001474:	681d      	ldr	r5, [r3, #0]
 8001476:	0004      	movs	r4, r0
 8001478:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800147a:	2b00      	cmp	r3, #0
 800147c:	d116      	bne.n	80014ac <srand+0x3c>
 800147e:	2018      	movs	r0, #24
 8001480:	f000 f8be 	bl	8001600 <malloc>
 8001484:	1e02      	subs	r2, r0, #0
 8001486:	63a8      	str	r0, [r5, #56]	; 0x38
 8001488:	d104      	bne.n	8001494 <srand+0x24>
 800148a:	2142      	movs	r1, #66	; 0x42
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <srand+0x4c>)
 800148e:	480c      	ldr	r0, [pc, #48]	; (80014c0 <srand+0x50>)
 8001490:	f000 f876 	bl	8001580 <__assert_func>
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <srand+0x54>)
 8001496:	2100      	movs	r1, #0
 8001498:	6003      	str	r3, [r0, #0]
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <srand+0x58>)
 800149c:	6043      	str	r3, [r0, #4]
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <srand+0x5c>)
 80014a0:	6083      	str	r3, [r0, #8]
 80014a2:	230b      	movs	r3, #11
 80014a4:	8183      	strh	r3, [r0, #12]
 80014a6:	2001      	movs	r0, #1
 80014a8:	6110      	str	r0, [r2, #16]
 80014aa:	6151      	str	r1, [r2, #20]
 80014ac:	2200      	movs	r2, #0
 80014ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80014b0:	611c      	str	r4, [r3, #16]
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	bd70      	pop	{r4, r5, r6, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	20000004 	.word	0x20000004
 80014bc:	08002890 	.word	0x08002890
 80014c0:	080028a7 	.word	0x080028a7
 80014c4:	abcd330e 	.word	0xabcd330e
 80014c8:	e66d1234 	.word	0xe66d1234
 80014cc:	0005deec 	.word	0x0005deec

080014d0 <rand>:
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <rand+0x5c>)
 80014d2:	b510      	push	{r4, lr}
 80014d4:	681c      	ldr	r4, [r3, #0]
 80014d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d116      	bne.n	800150a <rand+0x3a>
 80014dc:	2018      	movs	r0, #24
 80014de:	f000 f88f 	bl	8001600 <malloc>
 80014e2:	1e02      	subs	r2, r0, #0
 80014e4:	63a0      	str	r0, [r4, #56]	; 0x38
 80014e6:	d104      	bne.n	80014f2 <rand+0x22>
 80014e8:	214e      	movs	r1, #78	; 0x4e
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <rand+0x60>)
 80014ec:	4811      	ldr	r0, [pc, #68]	; (8001534 <rand+0x64>)
 80014ee:	f000 f847 	bl	8001580 <__assert_func>
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <rand+0x68>)
 80014f4:	2100      	movs	r1, #0
 80014f6:	6003      	str	r3, [r0, #0]
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <rand+0x6c>)
 80014fa:	6043      	str	r3, [r0, #4]
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <rand+0x70>)
 80014fe:	6083      	str	r3, [r0, #8]
 8001500:	230b      	movs	r3, #11
 8001502:	8183      	strh	r3, [r0, #12]
 8001504:	2001      	movs	r0, #1
 8001506:	6110      	str	r0, [r2, #16]
 8001508:	6151      	str	r1, [r2, #20]
 800150a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <rand+0x74>)
 800150e:	6920      	ldr	r0, [r4, #16]
 8001510:	6961      	ldr	r1, [r4, #20]
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <rand+0x78>)
 8001514:	f7fe fefc 	bl	8000310 <__aeabi_lmul>
 8001518:	2201      	movs	r2, #1
 800151a:	2300      	movs	r3, #0
 800151c:	1880      	adds	r0, r0, r2
 800151e:	4159      	adcs	r1, r3
 8001520:	6120      	str	r0, [r4, #16]
 8001522:	6161      	str	r1, [r4, #20]
 8001524:	0048      	lsls	r0, r1, #1
 8001526:	0840      	lsrs	r0, r0, #1
 8001528:	bd10      	pop	{r4, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	20000004 	.word	0x20000004
 8001530:	08002890 	.word	0x08002890
 8001534:	080028a7 	.word	0x080028a7
 8001538:	abcd330e 	.word	0xabcd330e
 800153c:	e66d1234 	.word	0xe66d1234
 8001540:	0005deec 	.word	0x0005deec
 8001544:	4c957f2d 	.word	0x4c957f2d
 8001548:	5851f42d 	.word	0x5851f42d

0800154c <time>:
 800154c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <time+0x30>)
 8001550:	0004      	movs	r4, r0
 8001552:	2200      	movs	r2, #0
 8001554:	4669      	mov	r1, sp
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	f000 f840 	bl	80015dc <_gettimeofday_r>
 800155c:	2800      	cmp	r0, #0
 800155e:	da04      	bge.n	800156a <time+0x1e>
 8001560:	2201      	movs	r2, #1
 8001562:	4252      	negs	r2, r2
 8001564:	17d3      	asrs	r3, r2, #31
 8001566:	9200      	str	r2, [sp, #0]
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	9800      	ldr	r0, [sp, #0]
 800156c:	9901      	ldr	r1, [sp, #4]
 800156e:	2c00      	cmp	r4, #0
 8001570:	d001      	beq.n	8001576 <time+0x2a>
 8001572:	6020      	str	r0, [r4, #0]
 8001574:	6061      	str	r1, [r4, #4]
 8001576:	b004      	add	sp, #16
 8001578:	bd10      	pop	{r4, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	20000004 	.word	0x20000004

08001580 <__assert_func>:
 8001580:	b530      	push	{r4, r5, lr}
 8001582:	0014      	movs	r4, r2
 8001584:	001a      	movs	r2, r3
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <__assert_func+0x2c>)
 8001588:	0005      	movs	r5, r0
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b085      	sub	sp, #20
 800158e:	68d8      	ldr	r0, [r3, #12]
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <__assert_func+0x30>)
 8001592:	2c00      	cmp	r4, #0
 8001594:	d101      	bne.n	800159a <__assert_func+0x1a>
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <__assert_func+0x34>)
 8001598:	001c      	movs	r4, r3
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	9100      	str	r1, [sp, #0]
 800159e:	002b      	movs	r3, r5
 80015a0:	4905      	ldr	r1, [pc, #20]	; (80015b8 <__assert_func+0x38>)
 80015a2:	9402      	str	r4, [sp, #8]
 80015a4:	f000 f80a 	bl	80015bc <fiprintf>
 80015a8:	f000 fca0 	bl	8001eec <abort>
 80015ac:	20000004 	.word	0x20000004
 80015b0:	08002924 	.word	0x08002924
 80015b4:	0800295f 	.word	0x0800295f
 80015b8:	08002931 	.word	0x08002931

080015bc <fiprintf>:
 80015bc:	b40e      	push	{r1, r2, r3}
 80015be:	b503      	push	{r0, r1, lr}
 80015c0:	0001      	movs	r1, r0
 80015c2:	ab03      	add	r3, sp, #12
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <fiprintf+0x1c>)
 80015c6:	cb04      	ldmia	r3!, {r2}
 80015c8:	6800      	ldr	r0, [r0, #0]
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	f000 f8f2 	bl	80017b4 <_vfiprintf_r>
 80015d0:	b002      	add	sp, #8
 80015d2:	bc08      	pop	{r3}
 80015d4:	b003      	add	sp, #12
 80015d6:	4718      	bx	r3
 80015d8:	20000004 	.word	0x20000004

080015dc <_gettimeofday_r>:
 80015dc:	2300      	movs	r3, #0
 80015de:	b570      	push	{r4, r5, r6, lr}
 80015e0:	4d06      	ldr	r5, [pc, #24]	; (80015fc <_gettimeofday_r+0x20>)
 80015e2:	0004      	movs	r4, r0
 80015e4:	0008      	movs	r0, r1
 80015e6:	0011      	movs	r1, r2
 80015e8:	602b      	str	r3, [r5, #0]
 80015ea:	f001 f801 	bl	80025f0 <_gettimeofday>
 80015ee:	1c43      	adds	r3, r0, #1
 80015f0:	d103      	bne.n	80015fa <_gettimeofday_r+0x1e>
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d000      	beq.n	80015fa <_gettimeofday_r+0x1e>
 80015f8:	6023      	str	r3, [r4, #0]
 80015fa:	bd70      	pop	{r4, r5, r6, pc}
 80015fc:	200001e4 	.word	0x200001e4

08001600 <malloc>:
 8001600:	b510      	push	{r4, lr}
 8001602:	4b03      	ldr	r3, [pc, #12]	; (8001610 <malloc+0x10>)
 8001604:	0001      	movs	r1, r0
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	f000 f84e 	bl	80016a8 <_malloc_r>
 800160c:	bd10      	pop	{r4, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	20000004 	.word	0x20000004

08001614 <_free_r>:
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	0005      	movs	r5, r0
 8001618:	2900      	cmp	r1, #0
 800161a:	d010      	beq.n	800163e <_free_r+0x2a>
 800161c:	1f0c      	subs	r4, r1, #4
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	da00      	bge.n	8001626 <_free_r+0x12>
 8001624:	18e4      	adds	r4, r4, r3
 8001626:	0028      	movs	r0, r5
 8001628:	f000 feb2 	bl	8002390 <__malloc_lock>
 800162c:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <_free_r+0x90>)
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d105      	bne.n	8001640 <_free_r+0x2c>
 8001634:	6063      	str	r3, [r4, #4]
 8001636:	6014      	str	r4, [r2, #0]
 8001638:	0028      	movs	r0, r5
 800163a:	f000 feb1 	bl	80023a0 <__malloc_unlock>
 800163e:	bd70      	pop	{r4, r5, r6, pc}
 8001640:	42a3      	cmp	r3, r4
 8001642:	d908      	bls.n	8001656 <_free_r+0x42>
 8001644:	6821      	ldr	r1, [r4, #0]
 8001646:	1860      	adds	r0, r4, r1
 8001648:	4283      	cmp	r3, r0
 800164a:	d1f3      	bne.n	8001634 <_free_r+0x20>
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	1841      	adds	r1, r0, r1
 8001652:	6021      	str	r1, [r4, #0]
 8001654:	e7ee      	b.n	8001634 <_free_r+0x20>
 8001656:	001a      	movs	r2, r3
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <_free_r+0x4e>
 800165e:	42a3      	cmp	r3, r4
 8001660:	d9f9      	bls.n	8001656 <_free_r+0x42>
 8001662:	6811      	ldr	r1, [r2, #0]
 8001664:	1850      	adds	r0, r2, r1
 8001666:	42a0      	cmp	r0, r4
 8001668:	d10b      	bne.n	8001682 <_free_r+0x6e>
 800166a:	6820      	ldr	r0, [r4, #0]
 800166c:	1809      	adds	r1, r1, r0
 800166e:	1850      	adds	r0, r2, r1
 8001670:	6011      	str	r1, [r2, #0]
 8001672:	4283      	cmp	r3, r0
 8001674:	d1e0      	bne.n	8001638 <_free_r+0x24>
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	1841      	adds	r1, r0, r1
 800167c:	6011      	str	r1, [r2, #0]
 800167e:	6053      	str	r3, [r2, #4]
 8001680:	e7da      	b.n	8001638 <_free_r+0x24>
 8001682:	42a0      	cmp	r0, r4
 8001684:	d902      	bls.n	800168c <_free_r+0x78>
 8001686:	230c      	movs	r3, #12
 8001688:	602b      	str	r3, [r5, #0]
 800168a:	e7d5      	b.n	8001638 <_free_r+0x24>
 800168c:	6821      	ldr	r1, [r4, #0]
 800168e:	1860      	adds	r0, r4, r1
 8001690:	4283      	cmp	r3, r0
 8001692:	d103      	bne.n	800169c <_free_r+0x88>
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	1841      	adds	r1, r0, r1
 800169a:	6021      	str	r1, [r4, #0]
 800169c:	6063      	str	r3, [r4, #4]
 800169e:	6054      	str	r4, [r2, #4]
 80016a0:	e7ca      	b.n	8001638 <_free_r+0x24>
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	200001dc 	.word	0x200001dc

080016a8 <_malloc_r>:
 80016a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016aa:	2303      	movs	r3, #3
 80016ac:	1ccd      	adds	r5, r1, #3
 80016ae:	439d      	bics	r5, r3
 80016b0:	3508      	adds	r5, #8
 80016b2:	0006      	movs	r6, r0
 80016b4:	2d0c      	cmp	r5, #12
 80016b6:	d21f      	bcs.n	80016f8 <_malloc_r+0x50>
 80016b8:	250c      	movs	r5, #12
 80016ba:	42a9      	cmp	r1, r5
 80016bc:	d81e      	bhi.n	80016fc <_malloc_r+0x54>
 80016be:	0030      	movs	r0, r6
 80016c0:	f000 fe66 	bl	8002390 <__malloc_lock>
 80016c4:	4925      	ldr	r1, [pc, #148]	; (800175c <_malloc_r+0xb4>)
 80016c6:	680a      	ldr	r2, [r1, #0]
 80016c8:	0014      	movs	r4, r2
 80016ca:	2c00      	cmp	r4, #0
 80016cc:	d11a      	bne.n	8001704 <_malloc_r+0x5c>
 80016ce:	4f24      	ldr	r7, [pc, #144]	; (8001760 <_malloc_r+0xb8>)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d104      	bne.n	80016e0 <_malloc_r+0x38>
 80016d6:	0021      	movs	r1, r4
 80016d8:	0030      	movs	r0, r6
 80016da:	f000 fb27 	bl	8001d2c <_sbrk_r>
 80016de:	6038      	str	r0, [r7, #0]
 80016e0:	0029      	movs	r1, r5
 80016e2:	0030      	movs	r0, r6
 80016e4:	f000 fb22 	bl	8001d2c <_sbrk_r>
 80016e8:	1c43      	adds	r3, r0, #1
 80016ea:	d12b      	bne.n	8001744 <_malloc_r+0x9c>
 80016ec:	230c      	movs	r3, #12
 80016ee:	0030      	movs	r0, r6
 80016f0:	6033      	str	r3, [r6, #0]
 80016f2:	f000 fe55 	bl	80023a0 <__malloc_unlock>
 80016f6:	e003      	b.n	8001700 <_malloc_r+0x58>
 80016f8:	2d00      	cmp	r5, #0
 80016fa:	dade      	bge.n	80016ba <_malloc_r+0x12>
 80016fc:	230c      	movs	r3, #12
 80016fe:	6033      	str	r3, [r6, #0]
 8001700:	2000      	movs	r0, #0
 8001702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	1b5b      	subs	r3, r3, r5
 8001708:	d419      	bmi.n	800173e <_malloc_r+0x96>
 800170a:	2b0b      	cmp	r3, #11
 800170c:	d903      	bls.n	8001716 <_malloc_r+0x6e>
 800170e:	6023      	str	r3, [r4, #0]
 8001710:	18e4      	adds	r4, r4, r3
 8001712:	6025      	str	r5, [r4, #0]
 8001714:	e003      	b.n	800171e <_malloc_r+0x76>
 8001716:	6863      	ldr	r3, [r4, #4]
 8001718:	42a2      	cmp	r2, r4
 800171a:	d10e      	bne.n	800173a <_malloc_r+0x92>
 800171c:	600b      	str	r3, [r1, #0]
 800171e:	0030      	movs	r0, r6
 8001720:	f000 fe3e 	bl	80023a0 <__malloc_unlock>
 8001724:	0020      	movs	r0, r4
 8001726:	2207      	movs	r2, #7
 8001728:	300b      	adds	r0, #11
 800172a:	1d23      	adds	r3, r4, #4
 800172c:	4390      	bics	r0, r2
 800172e:	1ac2      	subs	r2, r0, r3
 8001730:	4298      	cmp	r0, r3
 8001732:	d0e6      	beq.n	8001702 <_malloc_r+0x5a>
 8001734:	1a1b      	subs	r3, r3, r0
 8001736:	50a3      	str	r3, [r4, r2]
 8001738:	e7e3      	b.n	8001702 <_malloc_r+0x5a>
 800173a:	6053      	str	r3, [r2, #4]
 800173c:	e7ef      	b.n	800171e <_malloc_r+0x76>
 800173e:	0022      	movs	r2, r4
 8001740:	6864      	ldr	r4, [r4, #4]
 8001742:	e7c2      	b.n	80016ca <_malloc_r+0x22>
 8001744:	2303      	movs	r3, #3
 8001746:	1cc4      	adds	r4, r0, #3
 8001748:	439c      	bics	r4, r3
 800174a:	42a0      	cmp	r0, r4
 800174c:	d0e1      	beq.n	8001712 <_malloc_r+0x6a>
 800174e:	1a21      	subs	r1, r4, r0
 8001750:	0030      	movs	r0, r6
 8001752:	f000 faeb 	bl	8001d2c <_sbrk_r>
 8001756:	1c43      	adds	r3, r0, #1
 8001758:	d1db      	bne.n	8001712 <_malloc_r+0x6a>
 800175a:	e7c7      	b.n	80016ec <_malloc_r+0x44>
 800175c:	200001dc 	.word	0x200001dc
 8001760:	200001e0 	.word	0x200001e0

08001764 <__sfputc_r>:
 8001764:	6893      	ldr	r3, [r2, #8]
 8001766:	b510      	push	{r4, lr}
 8001768:	3b01      	subs	r3, #1
 800176a:	6093      	str	r3, [r2, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	da04      	bge.n	800177a <__sfputc_r+0x16>
 8001770:	6994      	ldr	r4, [r2, #24]
 8001772:	42a3      	cmp	r3, r4
 8001774:	db07      	blt.n	8001786 <__sfputc_r+0x22>
 8001776:	290a      	cmp	r1, #10
 8001778:	d005      	beq.n	8001786 <__sfputc_r+0x22>
 800177a:	6813      	ldr	r3, [r2, #0]
 800177c:	1c58      	adds	r0, r3, #1
 800177e:	6010      	str	r0, [r2, #0]
 8001780:	7019      	strb	r1, [r3, #0]
 8001782:	0008      	movs	r0, r1
 8001784:	bd10      	pop	{r4, pc}
 8001786:	f000 fae3 	bl	8001d50 <__swbuf_r>
 800178a:	0001      	movs	r1, r0
 800178c:	e7f9      	b.n	8001782 <__sfputc_r+0x1e>

0800178e <__sfputs_r>:
 800178e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001790:	0006      	movs	r6, r0
 8001792:	000f      	movs	r7, r1
 8001794:	0014      	movs	r4, r2
 8001796:	18d5      	adds	r5, r2, r3
 8001798:	42ac      	cmp	r4, r5
 800179a:	d101      	bne.n	80017a0 <__sfputs_r+0x12>
 800179c:	2000      	movs	r0, #0
 800179e:	e007      	b.n	80017b0 <__sfputs_r+0x22>
 80017a0:	7821      	ldrb	r1, [r4, #0]
 80017a2:	003a      	movs	r2, r7
 80017a4:	0030      	movs	r0, r6
 80017a6:	f7ff ffdd 	bl	8001764 <__sfputc_r>
 80017aa:	3401      	adds	r4, #1
 80017ac:	1c43      	adds	r3, r0, #1
 80017ae:	d1f3      	bne.n	8001798 <__sfputs_r+0xa>
 80017b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017b2:	0000      	movs	r0, r0

080017b4 <_vfiprintf_r>:
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	b0a1      	sub	sp, #132	; 0x84
 80017b8:	0006      	movs	r6, r0
 80017ba:	000c      	movs	r4, r1
 80017bc:	001f      	movs	r7, r3
 80017be:	9203      	str	r2, [sp, #12]
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d004      	beq.n	80017ce <_vfiprintf_r+0x1a>
 80017c4:	6983      	ldr	r3, [r0, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <_vfiprintf_r+0x1a>
 80017ca:	f000 fcc5 	bl	8002158 <__sinit>
 80017ce:	4b8e      	ldr	r3, [pc, #568]	; (8001a08 <_vfiprintf_r+0x254>)
 80017d0:	429c      	cmp	r4, r3
 80017d2:	d11c      	bne.n	800180e <_vfiprintf_r+0x5a>
 80017d4:	6874      	ldr	r4, [r6, #4]
 80017d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017d8:	07db      	lsls	r3, r3, #31
 80017da:	d405      	bmi.n	80017e8 <_vfiprintf_r+0x34>
 80017dc:	89a3      	ldrh	r3, [r4, #12]
 80017de:	059b      	lsls	r3, r3, #22
 80017e0:	d402      	bmi.n	80017e8 <_vfiprintf_r+0x34>
 80017e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017e4:	f000 fd59 	bl	800229a <__retarget_lock_acquire_recursive>
 80017e8:	89a3      	ldrh	r3, [r4, #12]
 80017ea:	071b      	lsls	r3, r3, #28
 80017ec:	d502      	bpl.n	80017f4 <_vfiprintf_r+0x40>
 80017ee:	6923      	ldr	r3, [r4, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d11d      	bne.n	8001830 <_vfiprintf_r+0x7c>
 80017f4:	0021      	movs	r1, r4
 80017f6:	0030      	movs	r0, r6
 80017f8:	f000 fb00 	bl	8001dfc <__swsetup_r>
 80017fc:	2800      	cmp	r0, #0
 80017fe:	d017      	beq.n	8001830 <_vfiprintf_r+0x7c>
 8001800:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001802:	07db      	lsls	r3, r3, #31
 8001804:	d50d      	bpl.n	8001822 <_vfiprintf_r+0x6e>
 8001806:	2001      	movs	r0, #1
 8001808:	4240      	negs	r0, r0
 800180a:	b021      	add	sp, #132	; 0x84
 800180c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180e:	4b7f      	ldr	r3, [pc, #508]	; (8001a0c <_vfiprintf_r+0x258>)
 8001810:	429c      	cmp	r4, r3
 8001812:	d101      	bne.n	8001818 <_vfiprintf_r+0x64>
 8001814:	68b4      	ldr	r4, [r6, #8]
 8001816:	e7de      	b.n	80017d6 <_vfiprintf_r+0x22>
 8001818:	4b7d      	ldr	r3, [pc, #500]	; (8001a10 <_vfiprintf_r+0x25c>)
 800181a:	429c      	cmp	r4, r3
 800181c:	d1db      	bne.n	80017d6 <_vfiprintf_r+0x22>
 800181e:	68f4      	ldr	r4, [r6, #12]
 8001820:	e7d9      	b.n	80017d6 <_vfiprintf_r+0x22>
 8001822:	89a3      	ldrh	r3, [r4, #12]
 8001824:	059b      	lsls	r3, r3, #22
 8001826:	d4ee      	bmi.n	8001806 <_vfiprintf_r+0x52>
 8001828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800182a:	f000 fd37 	bl	800229c <__retarget_lock_release_recursive>
 800182e:	e7ea      	b.n	8001806 <_vfiprintf_r+0x52>
 8001830:	2300      	movs	r3, #0
 8001832:	ad08      	add	r5, sp, #32
 8001834:	616b      	str	r3, [r5, #20]
 8001836:	3320      	adds	r3, #32
 8001838:	766b      	strb	r3, [r5, #25]
 800183a:	3310      	adds	r3, #16
 800183c:	76ab      	strb	r3, [r5, #26]
 800183e:	9707      	str	r7, [sp, #28]
 8001840:	9f03      	ldr	r7, [sp, #12]
 8001842:	783b      	ldrb	r3, [r7, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <_vfiprintf_r+0x98>
 8001848:	2b25      	cmp	r3, #37	; 0x25
 800184a:	d14e      	bne.n	80018ea <_vfiprintf_r+0x136>
 800184c:	9b03      	ldr	r3, [sp, #12]
 800184e:	1afb      	subs	r3, r7, r3
 8001850:	9305      	str	r3, [sp, #20]
 8001852:	9b03      	ldr	r3, [sp, #12]
 8001854:	429f      	cmp	r7, r3
 8001856:	d00d      	beq.n	8001874 <_vfiprintf_r+0xc0>
 8001858:	9b05      	ldr	r3, [sp, #20]
 800185a:	0021      	movs	r1, r4
 800185c:	0030      	movs	r0, r6
 800185e:	9a03      	ldr	r2, [sp, #12]
 8001860:	f7ff ff95 	bl	800178e <__sfputs_r>
 8001864:	1c43      	adds	r3, r0, #1
 8001866:	d100      	bne.n	800186a <_vfiprintf_r+0xb6>
 8001868:	e0b5      	b.n	80019d6 <_vfiprintf_r+0x222>
 800186a:	696a      	ldr	r2, [r5, #20]
 800186c:	9b05      	ldr	r3, [sp, #20]
 800186e:	4694      	mov	ip, r2
 8001870:	4463      	add	r3, ip
 8001872:	616b      	str	r3, [r5, #20]
 8001874:	783b      	ldrb	r3, [r7, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d100      	bne.n	800187c <_vfiprintf_r+0xc8>
 800187a:	e0ac      	b.n	80019d6 <_vfiprintf_r+0x222>
 800187c:	2201      	movs	r2, #1
 800187e:	1c7b      	adds	r3, r7, #1
 8001880:	9303      	str	r3, [sp, #12]
 8001882:	2300      	movs	r3, #0
 8001884:	4252      	negs	r2, r2
 8001886:	606a      	str	r2, [r5, #4]
 8001888:	a904      	add	r1, sp, #16
 800188a:	3254      	adds	r2, #84	; 0x54
 800188c:	1852      	adds	r2, r2, r1
 800188e:	602b      	str	r3, [r5, #0]
 8001890:	60eb      	str	r3, [r5, #12]
 8001892:	60ab      	str	r3, [r5, #8]
 8001894:	7013      	strb	r3, [r2, #0]
 8001896:	65ab      	str	r3, [r5, #88]	; 0x58
 8001898:	9b03      	ldr	r3, [sp, #12]
 800189a:	2205      	movs	r2, #5
 800189c:	7819      	ldrb	r1, [r3, #0]
 800189e:	485d      	ldr	r0, [pc, #372]	; (8001a14 <_vfiprintf_r+0x260>)
 80018a0:	f000 fd6a 	bl	8002378 <memchr>
 80018a4:	9b03      	ldr	r3, [sp, #12]
 80018a6:	1c5f      	adds	r7, r3, #1
 80018a8:	2800      	cmp	r0, #0
 80018aa:	d120      	bne.n	80018ee <_vfiprintf_r+0x13a>
 80018ac:	682a      	ldr	r2, [r5, #0]
 80018ae:	06d3      	lsls	r3, r2, #27
 80018b0:	d504      	bpl.n	80018bc <_vfiprintf_r+0x108>
 80018b2:	2353      	movs	r3, #83	; 0x53
 80018b4:	a904      	add	r1, sp, #16
 80018b6:	185b      	adds	r3, r3, r1
 80018b8:	2120      	movs	r1, #32
 80018ba:	7019      	strb	r1, [r3, #0]
 80018bc:	0713      	lsls	r3, r2, #28
 80018be:	d504      	bpl.n	80018ca <_vfiprintf_r+0x116>
 80018c0:	2353      	movs	r3, #83	; 0x53
 80018c2:	a904      	add	r1, sp, #16
 80018c4:	185b      	adds	r3, r3, r1
 80018c6:	212b      	movs	r1, #43	; 0x2b
 80018c8:	7019      	strb	r1, [r3, #0]
 80018ca:	9b03      	ldr	r3, [sp, #12]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b2a      	cmp	r3, #42	; 0x2a
 80018d0:	d016      	beq.n	8001900 <_vfiprintf_r+0x14c>
 80018d2:	2100      	movs	r1, #0
 80018d4:	68eb      	ldr	r3, [r5, #12]
 80018d6:	9f03      	ldr	r7, [sp, #12]
 80018d8:	783a      	ldrb	r2, [r7, #0]
 80018da:	1c78      	adds	r0, r7, #1
 80018dc:	3a30      	subs	r2, #48	; 0x30
 80018de:	4684      	mov	ip, r0
 80018e0:	2a09      	cmp	r2, #9
 80018e2:	d94f      	bls.n	8001984 <_vfiprintf_r+0x1d0>
 80018e4:	2900      	cmp	r1, #0
 80018e6:	d111      	bne.n	800190c <_vfiprintf_r+0x158>
 80018e8:	e017      	b.n	800191a <_vfiprintf_r+0x166>
 80018ea:	3701      	adds	r7, #1
 80018ec:	e7a9      	b.n	8001842 <_vfiprintf_r+0x8e>
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <_vfiprintf_r+0x260>)
 80018f0:	682a      	ldr	r2, [r5, #0]
 80018f2:	1ac0      	subs	r0, r0, r3
 80018f4:	2301      	movs	r3, #1
 80018f6:	4083      	lsls	r3, r0
 80018f8:	4313      	orrs	r3, r2
 80018fa:	602b      	str	r3, [r5, #0]
 80018fc:	9703      	str	r7, [sp, #12]
 80018fe:	e7cb      	b.n	8001898 <_vfiprintf_r+0xe4>
 8001900:	9b07      	ldr	r3, [sp, #28]
 8001902:	1d19      	adds	r1, r3, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	9107      	str	r1, [sp, #28]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db01      	blt.n	8001910 <_vfiprintf_r+0x15c>
 800190c:	930b      	str	r3, [sp, #44]	; 0x2c
 800190e:	e004      	b.n	800191a <_vfiprintf_r+0x166>
 8001910:	425b      	negs	r3, r3
 8001912:	60eb      	str	r3, [r5, #12]
 8001914:	2302      	movs	r3, #2
 8001916:	4313      	orrs	r3, r2
 8001918:	602b      	str	r3, [r5, #0]
 800191a:	783b      	ldrb	r3, [r7, #0]
 800191c:	2b2e      	cmp	r3, #46	; 0x2e
 800191e:	d10a      	bne.n	8001936 <_vfiprintf_r+0x182>
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b2a      	cmp	r3, #42	; 0x2a
 8001924:	d137      	bne.n	8001996 <_vfiprintf_r+0x1e2>
 8001926:	9b07      	ldr	r3, [sp, #28]
 8001928:	3702      	adds	r7, #2
 800192a:	1d1a      	adds	r2, r3, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	9207      	str	r2, [sp, #28]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db2d      	blt.n	8001990 <_vfiprintf_r+0x1dc>
 8001934:	9309      	str	r3, [sp, #36]	; 0x24
 8001936:	2203      	movs	r2, #3
 8001938:	7839      	ldrb	r1, [r7, #0]
 800193a:	4837      	ldr	r0, [pc, #220]	; (8001a18 <_vfiprintf_r+0x264>)
 800193c:	f000 fd1c 	bl	8002378 <memchr>
 8001940:	2800      	cmp	r0, #0
 8001942:	d007      	beq.n	8001954 <_vfiprintf_r+0x1a0>
 8001944:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <_vfiprintf_r+0x264>)
 8001946:	682a      	ldr	r2, [r5, #0]
 8001948:	1ac0      	subs	r0, r0, r3
 800194a:	2340      	movs	r3, #64	; 0x40
 800194c:	4083      	lsls	r3, r0
 800194e:	4313      	orrs	r3, r2
 8001950:	3701      	adds	r7, #1
 8001952:	602b      	str	r3, [r5, #0]
 8001954:	7839      	ldrb	r1, [r7, #0]
 8001956:	1c7b      	adds	r3, r7, #1
 8001958:	2206      	movs	r2, #6
 800195a:	4830      	ldr	r0, [pc, #192]	; (8001a1c <_vfiprintf_r+0x268>)
 800195c:	9303      	str	r3, [sp, #12]
 800195e:	7629      	strb	r1, [r5, #24]
 8001960:	f000 fd0a 	bl	8002378 <memchr>
 8001964:	2800      	cmp	r0, #0
 8001966:	d045      	beq.n	80019f4 <_vfiprintf_r+0x240>
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <_vfiprintf_r+0x26c>)
 800196a:	2b00      	cmp	r3, #0
 800196c:	d127      	bne.n	80019be <_vfiprintf_r+0x20a>
 800196e:	2207      	movs	r2, #7
 8001970:	9b07      	ldr	r3, [sp, #28]
 8001972:	3307      	adds	r3, #7
 8001974:	4393      	bics	r3, r2
 8001976:	3308      	adds	r3, #8
 8001978:	9307      	str	r3, [sp, #28]
 800197a:	696b      	ldr	r3, [r5, #20]
 800197c:	9a04      	ldr	r2, [sp, #16]
 800197e:	189b      	adds	r3, r3, r2
 8001980:	616b      	str	r3, [r5, #20]
 8001982:	e75d      	b.n	8001840 <_vfiprintf_r+0x8c>
 8001984:	210a      	movs	r1, #10
 8001986:	434b      	muls	r3, r1
 8001988:	4667      	mov	r7, ip
 800198a:	189b      	adds	r3, r3, r2
 800198c:	3909      	subs	r1, #9
 800198e:	e7a3      	b.n	80018d8 <_vfiprintf_r+0x124>
 8001990:	2301      	movs	r3, #1
 8001992:	425b      	negs	r3, r3
 8001994:	e7ce      	b.n	8001934 <_vfiprintf_r+0x180>
 8001996:	2300      	movs	r3, #0
 8001998:	001a      	movs	r2, r3
 800199a:	3701      	adds	r7, #1
 800199c:	606b      	str	r3, [r5, #4]
 800199e:	7839      	ldrb	r1, [r7, #0]
 80019a0:	1c78      	adds	r0, r7, #1
 80019a2:	3930      	subs	r1, #48	; 0x30
 80019a4:	4684      	mov	ip, r0
 80019a6:	2909      	cmp	r1, #9
 80019a8:	d903      	bls.n	80019b2 <_vfiprintf_r+0x1fe>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0c3      	beq.n	8001936 <_vfiprintf_r+0x182>
 80019ae:	9209      	str	r2, [sp, #36]	; 0x24
 80019b0:	e7c1      	b.n	8001936 <_vfiprintf_r+0x182>
 80019b2:	230a      	movs	r3, #10
 80019b4:	435a      	muls	r2, r3
 80019b6:	4667      	mov	r7, ip
 80019b8:	1852      	adds	r2, r2, r1
 80019ba:	3b09      	subs	r3, #9
 80019bc:	e7ef      	b.n	800199e <_vfiprintf_r+0x1ea>
 80019be:	ab07      	add	r3, sp, #28
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	0022      	movs	r2, r4
 80019c4:	0029      	movs	r1, r5
 80019c6:	0030      	movs	r0, r6
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <_vfiprintf_r+0x270>)
 80019ca:	e000      	b.n	80019ce <_vfiprintf_r+0x21a>
 80019cc:	bf00      	nop
 80019ce:	9004      	str	r0, [sp, #16]
 80019d0:	9b04      	ldr	r3, [sp, #16]
 80019d2:	3301      	adds	r3, #1
 80019d4:	d1d1      	bne.n	800197a <_vfiprintf_r+0x1c6>
 80019d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019d8:	07db      	lsls	r3, r3, #31
 80019da:	d405      	bmi.n	80019e8 <_vfiprintf_r+0x234>
 80019dc:	89a3      	ldrh	r3, [r4, #12]
 80019de:	059b      	lsls	r3, r3, #22
 80019e0:	d402      	bmi.n	80019e8 <_vfiprintf_r+0x234>
 80019e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019e4:	f000 fc5a 	bl	800229c <__retarget_lock_release_recursive>
 80019e8:	89a3      	ldrh	r3, [r4, #12]
 80019ea:	065b      	lsls	r3, r3, #25
 80019ec:	d500      	bpl.n	80019f0 <_vfiprintf_r+0x23c>
 80019ee:	e70a      	b.n	8001806 <_vfiprintf_r+0x52>
 80019f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80019f2:	e70a      	b.n	800180a <_vfiprintf_r+0x56>
 80019f4:	ab07      	add	r3, sp, #28
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	0022      	movs	r2, r4
 80019fa:	0029      	movs	r1, r5
 80019fc:	0030      	movs	r0, r6
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <_vfiprintf_r+0x270>)
 8001a00:	f000 f882 	bl	8001b08 <_printf_i>
 8001a04:	e7e3      	b.n	80019ce <_vfiprintf_r+0x21a>
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	080029b4 	.word	0x080029b4
 8001a0c:	080029d4 	.word	0x080029d4
 8001a10:	08002994 	.word	0x08002994
 8001a14:	08002960 	.word	0x08002960
 8001a18:	08002966 	.word	0x08002966
 8001a1c:	0800296a 	.word	0x0800296a
 8001a20:	00000000 	.word	0x00000000
 8001a24:	0800178f 	.word	0x0800178f

08001a28 <_printf_common>:
 8001a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a2a:	0015      	movs	r5, r2
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	688a      	ldr	r2, [r1, #8]
 8001a30:	690b      	ldr	r3, [r1, #16]
 8001a32:	000c      	movs	r4, r1
 8001a34:	9000      	str	r0, [sp, #0]
 8001a36:	4293      	cmp	r3, r2
 8001a38:	da00      	bge.n	8001a3c <_printf_common+0x14>
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	0022      	movs	r2, r4
 8001a3e:	602b      	str	r3, [r5, #0]
 8001a40:	3243      	adds	r2, #67	; 0x43
 8001a42:	7812      	ldrb	r2, [r2, #0]
 8001a44:	2a00      	cmp	r2, #0
 8001a46:	d001      	beq.n	8001a4c <_printf_common+0x24>
 8001a48:	3301      	adds	r3, #1
 8001a4a:	602b      	str	r3, [r5, #0]
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	069b      	lsls	r3, r3, #26
 8001a50:	d502      	bpl.n	8001a58 <_printf_common+0x30>
 8001a52:	682b      	ldr	r3, [r5, #0]
 8001a54:	3302      	adds	r3, #2
 8001a56:	602b      	str	r3, [r5, #0]
 8001a58:	6822      	ldr	r2, [r4, #0]
 8001a5a:	2306      	movs	r3, #6
 8001a5c:	0017      	movs	r7, r2
 8001a5e:	401f      	ands	r7, r3
 8001a60:	421a      	tst	r2, r3
 8001a62:	d027      	beq.n	8001ab4 <_printf_common+0x8c>
 8001a64:	0023      	movs	r3, r4
 8001a66:	3343      	adds	r3, #67	; 0x43
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	1e5a      	subs	r2, r3, #1
 8001a6c:	4193      	sbcs	r3, r2
 8001a6e:	6822      	ldr	r2, [r4, #0]
 8001a70:	0692      	lsls	r2, r2, #26
 8001a72:	d430      	bmi.n	8001ad6 <_printf_common+0xae>
 8001a74:	0022      	movs	r2, r4
 8001a76:	9901      	ldr	r1, [sp, #4]
 8001a78:	9800      	ldr	r0, [sp, #0]
 8001a7a:	9e08      	ldr	r6, [sp, #32]
 8001a7c:	3243      	adds	r2, #67	; 0x43
 8001a7e:	47b0      	blx	r6
 8001a80:	1c43      	adds	r3, r0, #1
 8001a82:	d025      	beq.n	8001ad0 <_printf_common+0xa8>
 8001a84:	2306      	movs	r3, #6
 8001a86:	6820      	ldr	r0, [r4, #0]
 8001a88:	682a      	ldr	r2, [r5, #0]
 8001a8a:	68e1      	ldr	r1, [r4, #12]
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	4003      	ands	r3, r0
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d103      	bne.n	8001a9c <_printf_common+0x74>
 8001a94:	1a8d      	subs	r5, r1, r2
 8001a96:	43eb      	mvns	r3, r5
 8001a98:	17db      	asrs	r3, r3, #31
 8001a9a:	401d      	ands	r5, r3
 8001a9c:	68a3      	ldr	r3, [r4, #8]
 8001a9e:	6922      	ldr	r2, [r4, #16]
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	dd01      	ble.n	8001aa8 <_printf_common+0x80>
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	18ed      	adds	r5, r5, r3
 8001aa8:	2700      	movs	r7, #0
 8001aaa:	42bd      	cmp	r5, r7
 8001aac:	d120      	bne.n	8001af0 <_printf_common+0xc8>
 8001aae:	2000      	movs	r0, #0
 8001ab0:	e010      	b.n	8001ad4 <_printf_common+0xac>
 8001ab2:	3701      	adds	r7, #1
 8001ab4:	68e3      	ldr	r3, [r4, #12]
 8001ab6:	682a      	ldr	r2, [r5, #0]
 8001ab8:	1a9b      	subs	r3, r3, r2
 8001aba:	42bb      	cmp	r3, r7
 8001abc:	ddd2      	ble.n	8001a64 <_printf_common+0x3c>
 8001abe:	0022      	movs	r2, r4
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	9901      	ldr	r1, [sp, #4]
 8001ac4:	9800      	ldr	r0, [sp, #0]
 8001ac6:	9e08      	ldr	r6, [sp, #32]
 8001ac8:	3219      	adds	r2, #25
 8001aca:	47b0      	blx	r6
 8001acc:	1c43      	adds	r3, r0, #1
 8001ace:	d1f0      	bne.n	8001ab2 <_printf_common+0x8a>
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	4240      	negs	r0, r0
 8001ad4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001ad6:	2030      	movs	r0, #48	; 0x30
 8001ad8:	18e1      	adds	r1, r4, r3
 8001ada:	3143      	adds	r1, #67	; 0x43
 8001adc:	7008      	strb	r0, [r1, #0]
 8001ade:	0021      	movs	r1, r4
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	3145      	adds	r1, #69	; 0x45
 8001ae4:	7809      	ldrb	r1, [r1, #0]
 8001ae6:	18a2      	adds	r2, r4, r2
 8001ae8:	3243      	adds	r2, #67	; 0x43
 8001aea:	3302      	adds	r3, #2
 8001aec:	7011      	strb	r1, [r2, #0]
 8001aee:	e7c1      	b.n	8001a74 <_printf_common+0x4c>
 8001af0:	0022      	movs	r2, r4
 8001af2:	2301      	movs	r3, #1
 8001af4:	9901      	ldr	r1, [sp, #4]
 8001af6:	9800      	ldr	r0, [sp, #0]
 8001af8:	9e08      	ldr	r6, [sp, #32]
 8001afa:	321a      	adds	r2, #26
 8001afc:	47b0      	blx	r6
 8001afe:	1c43      	adds	r3, r0, #1
 8001b00:	d0e6      	beq.n	8001ad0 <_printf_common+0xa8>
 8001b02:	3701      	adds	r7, #1
 8001b04:	e7d1      	b.n	8001aaa <_printf_common+0x82>
 8001b06:	0000      	movs	r0, r0

08001b08 <_printf_i>:
 8001b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0a:	b08b      	sub	sp, #44	; 0x2c
 8001b0c:	9206      	str	r2, [sp, #24]
 8001b0e:	000a      	movs	r2, r1
 8001b10:	3243      	adds	r2, #67	; 0x43
 8001b12:	9307      	str	r3, [sp, #28]
 8001b14:	9005      	str	r0, [sp, #20]
 8001b16:	9204      	str	r2, [sp, #16]
 8001b18:	7e0a      	ldrb	r2, [r1, #24]
 8001b1a:	000c      	movs	r4, r1
 8001b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001b1e:	2a78      	cmp	r2, #120	; 0x78
 8001b20:	d807      	bhi.n	8001b32 <_printf_i+0x2a>
 8001b22:	2a62      	cmp	r2, #98	; 0x62
 8001b24:	d809      	bhi.n	8001b3a <_printf_i+0x32>
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d100      	bne.n	8001b2c <_printf_i+0x24>
 8001b2a:	e0c1      	b.n	8001cb0 <_printf_i+0x1a8>
 8001b2c:	2a58      	cmp	r2, #88	; 0x58
 8001b2e:	d100      	bne.n	8001b32 <_printf_i+0x2a>
 8001b30:	e08c      	b.n	8001c4c <_printf_i+0x144>
 8001b32:	0026      	movs	r6, r4
 8001b34:	3642      	adds	r6, #66	; 0x42
 8001b36:	7032      	strb	r2, [r6, #0]
 8001b38:	e022      	b.n	8001b80 <_printf_i+0x78>
 8001b3a:	0010      	movs	r0, r2
 8001b3c:	3863      	subs	r0, #99	; 0x63
 8001b3e:	2815      	cmp	r0, #21
 8001b40:	d8f7      	bhi.n	8001b32 <_printf_i+0x2a>
 8001b42:	f7fe fbdb 	bl	80002fc <__gnu_thumb1_case_shi>
 8001b46:	0016      	.short	0x0016
 8001b48:	fff6001f 	.word	0xfff6001f
 8001b4c:	fff6fff6 	.word	0xfff6fff6
 8001b50:	001ffff6 	.word	0x001ffff6
 8001b54:	fff6fff6 	.word	0xfff6fff6
 8001b58:	fff6fff6 	.word	0xfff6fff6
 8001b5c:	003600a8 	.word	0x003600a8
 8001b60:	fff6009a 	.word	0xfff6009a
 8001b64:	00b9fff6 	.word	0x00b9fff6
 8001b68:	0036fff6 	.word	0x0036fff6
 8001b6c:	fff6fff6 	.word	0xfff6fff6
 8001b70:	009e      	.short	0x009e
 8001b72:	0026      	movs	r6, r4
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	3642      	adds	r6, #66	; 0x42
 8001b78:	1d11      	adds	r1, r2, #4
 8001b7a:	6019      	str	r1, [r3, #0]
 8001b7c:	6813      	ldr	r3, [r2, #0]
 8001b7e:	7033      	strb	r3, [r6, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0a7      	b.n	8001cd4 <_printf_i+0x1cc>
 8001b84:	6808      	ldr	r0, [r1, #0]
 8001b86:	6819      	ldr	r1, [r3, #0]
 8001b88:	1d0a      	adds	r2, r1, #4
 8001b8a:	0605      	lsls	r5, r0, #24
 8001b8c:	d50b      	bpl.n	8001ba6 <_printf_i+0x9e>
 8001b8e:	680d      	ldr	r5, [r1, #0]
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	2d00      	cmp	r5, #0
 8001b94:	da03      	bge.n	8001b9e <_printf_i+0x96>
 8001b96:	232d      	movs	r3, #45	; 0x2d
 8001b98:	9a04      	ldr	r2, [sp, #16]
 8001b9a:	426d      	negs	r5, r5
 8001b9c:	7013      	strb	r3, [r2, #0]
 8001b9e:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <_printf_i+0x21c>)
 8001ba0:	270a      	movs	r7, #10
 8001ba2:	9303      	str	r3, [sp, #12]
 8001ba4:	e01b      	b.n	8001bde <_printf_i+0xd6>
 8001ba6:	680d      	ldr	r5, [r1, #0]
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	0641      	lsls	r1, r0, #25
 8001bac:	d5f1      	bpl.n	8001b92 <_printf_i+0x8a>
 8001bae:	b22d      	sxth	r5, r5
 8001bb0:	e7ef      	b.n	8001b92 <_printf_i+0x8a>
 8001bb2:	680d      	ldr	r5, [r1, #0]
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	1d08      	adds	r0, r1, #4
 8001bb8:	6018      	str	r0, [r3, #0]
 8001bba:	062e      	lsls	r6, r5, #24
 8001bbc:	d501      	bpl.n	8001bc2 <_printf_i+0xba>
 8001bbe:	680d      	ldr	r5, [r1, #0]
 8001bc0:	e003      	b.n	8001bca <_printf_i+0xc2>
 8001bc2:	066d      	lsls	r5, r5, #25
 8001bc4:	d5fb      	bpl.n	8001bbe <_printf_i+0xb6>
 8001bc6:	680d      	ldr	r5, [r1, #0]
 8001bc8:	b2ad      	uxth	r5, r5
 8001bca:	4b56      	ldr	r3, [pc, #344]	; (8001d24 <_printf_i+0x21c>)
 8001bcc:	2708      	movs	r7, #8
 8001bce:	9303      	str	r3, [sp, #12]
 8001bd0:	2a6f      	cmp	r2, #111	; 0x6f
 8001bd2:	d000      	beq.n	8001bd6 <_printf_i+0xce>
 8001bd4:	3702      	adds	r7, #2
 8001bd6:	0023      	movs	r3, r4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	3343      	adds	r3, #67	; 0x43
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	6863      	ldr	r3, [r4, #4]
 8001be0:	60a3      	str	r3, [r4, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db03      	blt.n	8001bee <_printf_i+0xe6>
 8001be6:	2204      	movs	r2, #4
 8001be8:	6821      	ldr	r1, [r4, #0]
 8001bea:	4391      	bics	r1, r2
 8001bec:	6021      	str	r1, [r4, #0]
 8001bee:	2d00      	cmp	r5, #0
 8001bf0:	d102      	bne.n	8001bf8 <_printf_i+0xf0>
 8001bf2:	9e04      	ldr	r6, [sp, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00c      	beq.n	8001c12 <_printf_i+0x10a>
 8001bf8:	9e04      	ldr	r6, [sp, #16]
 8001bfa:	0028      	movs	r0, r5
 8001bfc:	0039      	movs	r1, r7
 8001bfe:	f7fe fb77 	bl	80002f0 <__aeabi_uidivmod>
 8001c02:	9b03      	ldr	r3, [sp, #12]
 8001c04:	3e01      	subs	r6, #1
 8001c06:	5c5b      	ldrb	r3, [r3, r1]
 8001c08:	7033      	strb	r3, [r6, #0]
 8001c0a:	002b      	movs	r3, r5
 8001c0c:	0005      	movs	r5, r0
 8001c0e:	429f      	cmp	r7, r3
 8001c10:	d9f3      	bls.n	8001bfa <_printf_i+0xf2>
 8001c12:	2f08      	cmp	r7, #8
 8001c14:	d109      	bne.n	8001c2a <_printf_i+0x122>
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	07db      	lsls	r3, r3, #31
 8001c1a:	d506      	bpl.n	8001c2a <_printf_i+0x122>
 8001c1c:	6863      	ldr	r3, [r4, #4]
 8001c1e:	6922      	ldr	r2, [r4, #16]
 8001c20:	4293      	cmp	r3, r2
 8001c22:	dc02      	bgt.n	8001c2a <_printf_i+0x122>
 8001c24:	2330      	movs	r3, #48	; 0x30
 8001c26:	3e01      	subs	r6, #1
 8001c28:	7033      	strb	r3, [r6, #0]
 8001c2a:	9b04      	ldr	r3, [sp, #16]
 8001c2c:	1b9b      	subs	r3, r3, r6
 8001c2e:	6123      	str	r3, [r4, #16]
 8001c30:	9b07      	ldr	r3, [sp, #28]
 8001c32:	0021      	movs	r1, r4
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	9805      	ldr	r0, [sp, #20]
 8001c38:	9b06      	ldr	r3, [sp, #24]
 8001c3a:	aa09      	add	r2, sp, #36	; 0x24
 8001c3c:	f7ff fef4 	bl	8001a28 <_printf_common>
 8001c40:	1c43      	adds	r3, r0, #1
 8001c42:	d14c      	bne.n	8001cde <_printf_i+0x1d6>
 8001c44:	2001      	movs	r0, #1
 8001c46:	4240      	negs	r0, r0
 8001c48:	b00b      	add	sp, #44	; 0x2c
 8001c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c4c:	3145      	adds	r1, #69	; 0x45
 8001c4e:	700a      	strb	r2, [r1, #0]
 8001c50:	4a34      	ldr	r2, [pc, #208]	; (8001d24 <_printf_i+0x21c>)
 8001c52:	9203      	str	r2, [sp, #12]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	6821      	ldr	r1, [r4, #0]
 8001c58:	ca20      	ldmia	r2!, {r5}
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	0608      	lsls	r0, r1, #24
 8001c5e:	d516      	bpl.n	8001c8e <_printf_i+0x186>
 8001c60:	07cb      	lsls	r3, r1, #31
 8001c62:	d502      	bpl.n	8001c6a <_printf_i+0x162>
 8001c64:	2320      	movs	r3, #32
 8001c66:	4319      	orrs	r1, r3
 8001c68:	6021      	str	r1, [r4, #0]
 8001c6a:	2710      	movs	r7, #16
 8001c6c:	2d00      	cmp	r5, #0
 8001c6e:	d1b2      	bne.n	8001bd6 <_printf_i+0xce>
 8001c70:	2320      	movs	r3, #32
 8001c72:	6822      	ldr	r2, [r4, #0]
 8001c74:	439a      	bics	r2, r3
 8001c76:	6022      	str	r2, [r4, #0]
 8001c78:	e7ad      	b.n	8001bd6 <_printf_i+0xce>
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	6809      	ldr	r1, [r1, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	6022      	str	r2, [r4, #0]
 8001c82:	0022      	movs	r2, r4
 8001c84:	2178      	movs	r1, #120	; 0x78
 8001c86:	3245      	adds	r2, #69	; 0x45
 8001c88:	7011      	strb	r1, [r2, #0]
 8001c8a:	4a27      	ldr	r2, [pc, #156]	; (8001d28 <_printf_i+0x220>)
 8001c8c:	e7e1      	b.n	8001c52 <_printf_i+0x14a>
 8001c8e:	0648      	lsls	r0, r1, #25
 8001c90:	d5e6      	bpl.n	8001c60 <_printf_i+0x158>
 8001c92:	b2ad      	uxth	r5, r5
 8001c94:	e7e4      	b.n	8001c60 <_printf_i+0x158>
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	680d      	ldr	r5, [r1, #0]
 8001c9a:	1d10      	adds	r0, r2, #4
 8001c9c:	6949      	ldr	r1, [r1, #20]
 8001c9e:	6018      	str	r0, [r3, #0]
 8001ca0:	6813      	ldr	r3, [r2, #0]
 8001ca2:	062e      	lsls	r6, r5, #24
 8001ca4:	d501      	bpl.n	8001caa <_printf_i+0x1a2>
 8001ca6:	6019      	str	r1, [r3, #0]
 8001ca8:	e002      	b.n	8001cb0 <_printf_i+0x1a8>
 8001caa:	066d      	lsls	r5, r5, #25
 8001cac:	d5fb      	bpl.n	8001ca6 <_printf_i+0x19e>
 8001cae:	8019      	strh	r1, [r3, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9e04      	ldr	r6, [sp, #16]
 8001cb4:	6123      	str	r3, [r4, #16]
 8001cb6:	e7bb      	b.n	8001c30 <_printf_i+0x128>
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	1d11      	adds	r1, r2, #4
 8001cbc:	6019      	str	r1, [r3, #0]
 8001cbe:	6816      	ldr	r6, [r2, #0]
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	0030      	movs	r0, r6
 8001cc4:	6862      	ldr	r2, [r4, #4]
 8001cc6:	f000 fb57 	bl	8002378 <memchr>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d001      	beq.n	8001cd2 <_printf_i+0x1ca>
 8001cce:	1b80      	subs	r0, r0, r6
 8001cd0:	6060      	str	r0, [r4, #4]
 8001cd2:	6863      	ldr	r3, [r4, #4]
 8001cd4:	6123      	str	r3, [r4, #16]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9a04      	ldr	r2, [sp, #16]
 8001cda:	7013      	strb	r3, [r2, #0]
 8001cdc:	e7a8      	b.n	8001c30 <_printf_i+0x128>
 8001cde:	6923      	ldr	r3, [r4, #16]
 8001ce0:	0032      	movs	r2, r6
 8001ce2:	9906      	ldr	r1, [sp, #24]
 8001ce4:	9805      	ldr	r0, [sp, #20]
 8001ce6:	9d07      	ldr	r5, [sp, #28]
 8001ce8:	47a8      	blx	r5
 8001cea:	1c43      	adds	r3, r0, #1
 8001cec:	d0aa      	beq.n	8001c44 <_printf_i+0x13c>
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	079b      	lsls	r3, r3, #30
 8001cf2:	d415      	bmi.n	8001d20 <_printf_i+0x218>
 8001cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cf6:	68e0      	ldr	r0, [r4, #12]
 8001cf8:	4298      	cmp	r0, r3
 8001cfa:	daa5      	bge.n	8001c48 <_printf_i+0x140>
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	e7a3      	b.n	8001c48 <_printf_i+0x140>
 8001d00:	0022      	movs	r2, r4
 8001d02:	2301      	movs	r3, #1
 8001d04:	9906      	ldr	r1, [sp, #24]
 8001d06:	9805      	ldr	r0, [sp, #20]
 8001d08:	9e07      	ldr	r6, [sp, #28]
 8001d0a:	3219      	adds	r2, #25
 8001d0c:	47b0      	blx	r6
 8001d0e:	1c43      	adds	r3, r0, #1
 8001d10:	d098      	beq.n	8001c44 <_printf_i+0x13c>
 8001d12:	3501      	adds	r5, #1
 8001d14:	68e3      	ldr	r3, [r4, #12]
 8001d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	42ab      	cmp	r3, r5
 8001d1c:	dcf0      	bgt.n	8001d00 <_printf_i+0x1f8>
 8001d1e:	e7e9      	b.n	8001cf4 <_printf_i+0x1ec>
 8001d20:	2500      	movs	r5, #0
 8001d22:	e7f7      	b.n	8001d14 <_printf_i+0x20c>
 8001d24:	08002971 	.word	0x08002971
 8001d28:	08002982 	.word	0x08002982

08001d2c <_sbrk_r>:
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	b570      	push	{r4, r5, r6, lr}
 8001d30:	4d06      	ldr	r5, [pc, #24]	; (8001d4c <_sbrk_r+0x20>)
 8001d32:	0004      	movs	r4, r0
 8001d34:	0008      	movs	r0, r1
 8001d36:	602b      	str	r3, [r5, #0]
 8001d38:	f000 fc82 	bl	8002640 <_sbrk>
 8001d3c:	1c43      	adds	r3, r0, #1
 8001d3e:	d103      	bne.n	8001d48 <_sbrk_r+0x1c>
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d000      	beq.n	8001d48 <_sbrk_r+0x1c>
 8001d46:	6023      	str	r3, [r4, #0]
 8001d48:	bd70      	pop	{r4, r5, r6, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	200001e4 	.word	0x200001e4

08001d50 <__swbuf_r>:
 8001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d52:	0005      	movs	r5, r0
 8001d54:	000e      	movs	r6, r1
 8001d56:	0014      	movs	r4, r2
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	d004      	beq.n	8001d66 <__swbuf_r+0x16>
 8001d5c:	6983      	ldr	r3, [r0, #24]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <__swbuf_r+0x16>
 8001d62:	f000 f9f9 	bl	8002158 <__sinit>
 8001d66:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <__swbuf_r+0xa0>)
 8001d68:	429c      	cmp	r4, r3
 8001d6a:	d12e      	bne.n	8001dca <__swbuf_r+0x7a>
 8001d6c:	686c      	ldr	r4, [r5, #4]
 8001d6e:	69a3      	ldr	r3, [r4, #24]
 8001d70:	60a3      	str	r3, [r4, #8]
 8001d72:	89a3      	ldrh	r3, [r4, #12]
 8001d74:	071b      	lsls	r3, r3, #28
 8001d76:	d532      	bpl.n	8001dde <__swbuf_r+0x8e>
 8001d78:	6923      	ldr	r3, [r4, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d02f      	beq.n	8001dde <__swbuf_r+0x8e>
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	6922      	ldr	r2, [r4, #16]
 8001d82:	b2f7      	uxtb	r7, r6
 8001d84:	1a98      	subs	r0, r3, r2
 8001d86:	6963      	ldr	r3, [r4, #20]
 8001d88:	b2f6      	uxtb	r6, r6
 8001d8a:	4283      	cmp	r3, r0
 8001d8c:	dc05      	bgt.n	8001d9a <__swbuf_r+0x4a>
 8001d8e:	0021      	movs	r1, r4
 8001d90:	0028      	movs	r0, r5
 8001d92:	f000 f93f 	bl	8002014 <_fflush_r>
 8001d96:	2800      	cmp	r0, #0
 8001d98:	d127      	bne.n	8001dea <__swbuf_r+0x9a>
 8001d9a:	68a3      	ldr	r3, [r4, #8]
 8001d9c:	3001      	adds	r0, #1
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	60a3      	str	r3, [r4, #8]
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	6022      	str	r2, [r4, #0]
 8001da8:	701f      	strb	r7, [r3, #0]
 8001daa:	6963      	ldr	r3, [r4, #20]
 8001dac:	4283      	cmp	r3, r0
 8001dae:	d004      	beq.n	8001dba <__swbuf_r+0x6a>
 8001db0:	89a3      	ldrh	r3, [r4, #12]
 8001db2:	07db      	lsls	r3, r3, #31
 8001db4:	d507      	bpl.n	8001dc6 <__swbuf_r+0x76>
 8001db6:	2e0a      	cmp	r6, #10
 8001db8:	d105      	bne.n	8001dc6 <__swbuf_r+0x76>
 8001dba:	0021      	movs	r1, r4
 8001dbc:	0028      	movs	r0, r5
 8001dbe:	f000 f929 	bl	8002014 <_fflush_r>
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	d111      	bne.n	8001dea <__swbuf_r+0x9a>
 8001dc6:	0030      	movs	r0, r6
 8001dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <__swbuf_r+0xa4>)
 8001dcc:	429c      	cmp	r4, r3
 8001dce:	d101      	bne.n	8001dd4 <__swbuf_r+0x84>
 8001dd0:	68ac      	ldr	r4, [r5, #8]
 8001dd2:	e7cc      	b.n	8001d6e <__swbuf_r+0x1e>
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <__swbuf_r+0xa8>)
 8001dd6:	429c      	cmp	r4, r3
 8001dd8:	d1c9      	bne.n	8001d6e <__swbuf_r+0x1e>
 8001dda:	68ec      	ldr	r4, [r5, #12]
 8001ddc:	e7c7      	b.n	8001d6e <__swbuf_r+0x1e>
 8001dde:	0021      	movs	r1, r4
 8001de0:	0028      	movs	r0, r5
 8001de2:	f000 f80b 	bl	8001dfc <__swsetup_r>
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d0c9      	beq.n	8001d7e <__swbuf_r+0x2e>
 8001dea:	2601      	movs	r6, #1
 8001dec:	4276      	negs	r6, r6
 8001dee:	e7ea      	b.n	8001dc6 <__swbuf_r+0x76>
 8001df0:	080029b4 	.word	0x080029b4
 8001df4:	080029d4 	.word	0x080029d4
 8001df8:	08002994 	.word	0x08002994

08001dfc <__swsetup_r>:
 8001dfc:	4b37      	ldr	r3, [pc, #220]	; (8001edc <__swsetup_r+0xe0>)
 8001dfe:	b570      	push	{r4, r5, r6, lr}
 8001e00:	681d      	ldr	r5, [r3, #0]
 8001e02:	0006      	movs	r6, r0
 8001e04:	000c      	movs	r4, r1
 8001e06:	2d00      	cmp	r5, #0
 8001e08:	d005      	beq.n	8001e16 <__swsetup_r+0x1a>
 8001e0a:	69ab      	ldr	r3, [r5, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <__swsetup_r+0x1a>
 8001e10:	0028      	movs	r0, r5
 8001e12:	f000 f9a1 	bl	8002158 <__sinit>
 8001e16:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <__swsetup_r+0xe4>)
 8001e18:	429c      	cmp	r4, r3
 8001e1a:	d10f      	bne.n	8001e3c <__swsetup_r+0x40>
 8001e1c:	686c      	ldr	r4, [r5, #4]
 8001e1e:	230c      	movs	r3, #12
 8001e20:	5ee2      	ldrsh	r2, [r4, r3]
 8001e22:	b293      	uxth	r3, r2
 8001e24:	0711      	lsls	r1, r2, #28
 8001e26:	d42d      	bmi.n	8001e84 <__swsetup_r+0x88>
 8001e28:	06d9      	lsls	r1, r3, #27
 8001e2a:	d411      	bmi.n	8001e50 <__swsetup_r+0x54>
 8001e2c:	2309      	movs	r3, #9
 8001e2e:	2001      	movs	r0, #1
 8001e30:	6033      	str	r3, [r6, #0]
 8001e32:	3337      	adds	r3, #55	; 0x37
 8001e34:	4313      	orrs	r3, r2
 8001e36:	81a3      	strh	r3, [r4, #12]
 8001e38:	4240      	negs	r0, r0
 8001e3a:	bd70      	pop	{r4, r5, r6, pc}
 8001e3c:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <__swsetup_r+0xe8>)
 8001e3e:	429c      	cmp	r4, r3
 8001e40:	d101      	bne.n	8001e46 <__swsetup_r+0x4a>
 8001e42:	68ac      	ldr	r4, [r5, #8]
 8001e44:	e7eb      	b.n	8001e1e <__swsetup_r+0x22>
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <__swsetup_r+0xec>)
 8001e48:	429c      	cmp	r4, r3
 8001e4a:	d1e8      	bne.n	8001e1e <__swsetup_r+0x22>
 8001e4c:	68ec      	ldr	r4, [r5, #12]
 8001e4e:	e7e6      	b.n	8001e1e <__swsetup_r+0x22>
 8001e50:	075b      	lsls	r3, r3, #29
 8001e52:	d513      	bpl.n	8001e7c <__swsetup_r+0x80>
 8001e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e56:	2900      	cmp	r1, #0
 8001e58:	d008      	beq.n	8001e6c <__swsetup_r+0x70>
 8001e5a:	0023      	movs	r3, r4
 8001e5c:	3344      	adds	r3, #68	; 0x44
 8001e5e:	4299      	cmp	r1, r3
 8001e60:	d002      	beq.n	8001e68 <__swsetup_r+0x6c>
 8001e62:	0030      	movs	r0, r6
 8001e64:	f7ff fbd6 	bl	8001614 <_free_r>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	6363      	str	r3, [r4, #52]	; 0x34
 8001e6c:	2224      	movs	r2, #36	; 0x24
 8001e6e:	89a3      	ldrh	r3, [r4, #12]
 8001e70:	4393      	bics	r3, r2
 8001e72:	81a3      	strh	r3, [r4, #12]
 8001e74:	2300      	movs	r3, #0
 8001e76:	6063      	str	r3, [r4, #4]
 8001e78:	6923      	ldr	r3, [r4, #16]
 8001e7a:	6023      	str	r3, [r4, #0]
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	89a2      	ldrh	r2, [r4, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	81a3      	strh	r3, [r4, #12]
 8001e84:	6923      	ldr	r3, [r4, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10b      	bne.n	8001ea2 <__swsetup_r+0xa6>
 8001e8a:	21a0      	movs	r1, #160	; 0xa0
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	89a3      	ldrh	r3, [r4, #12]
 8001e90:	0089      	lsls	r1, r1, #2
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	400b      	ands	r3, r1
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <__swsetup_r+0xa6>
 8001e9a:	0021      	movs	r1, r4
 8001e9c:	0030      	movs	r0, r6
 8001e9e:	f000 fa27 	bl	80022f0 <__smakebuf_r>
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	5ea3      	ldrsh	r3, [r4, r2]
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	b299      	uxth	r1, r3
 8001eac:	4002      	ands	r2, r0
 8001eae:	4203      	tst	r3, r0
 8001eb0:	d00f      	beq.n	8001ed2 <__swsetup_r+0xd6>
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60a2      	str	r2, [r4, #8]
 8001eb6:	6962      	ldr	r2, [r4, #20]
 8001eb8:	4252      	negs	r2, r2
 8001eba:	61a2      	str	r2, [r4, #24]
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	6922      	ldr	r2, [r4, #16]
 8001ec0:	4282      	cmp	r2, r0
 8001ec2:	d1ba      	bne.n	8001e3a <__swsetup_r+0x3e>
 8001ec4:	060a      	lsls	r2, r1, #24
 8001ec6:	d5b8      	bpl.n	8001e3a <__swsetup_r+0x3e>
 8001ec8:	2240      	movs	r2, #64	; 0x40
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	81a3      	strh	r3, [r4, #12]
 8001ece:	3801      	subs	r0, #1
 8001ed0:	e7b3      	b.n	8001e3a <__swsetup_r+0x3e>
 8001ed2:	0788      	lsls	r0, r1, #30
 8001ed4:	d400      	bmi.n	8001ed8 <__swsetup_r+0xdc>
 8001ed6:	6962      	ldr	r2, [r4, #20]
 8001ed8:	60a2      	str	r2, [r4, #8]
 8001eda:	e7ef      	b.n	8001ebc <__swsetup_r+0xc0>
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	080029b4 	.word	0x080029b4
 8001ee4:	080029d4 	.word	0x080029d4
 8001ee8:	08002994 	.word	0x08002994

08001eec <abort>:
 8001eec:	2006      	movs	r0, #6
 8001eee:	b510      	push	{r4, lr}
 8001ef0:	f000 fa88 	bl	8002404 <raise>
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f000 fbb9 	bl	800266c <_exit>
 8001efa:	0000      	movs	r0, r0

08001efc <__sflush_r>:
 8001efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001efe:	898b      	ldrh	r3, [r1, #12]
 8001f00:	0005      	movs	r5, r0
 8001f02:	000c      	movs	r4, r1
 8001f04:	071a      	lsls	r2, r3, #28
 8001f06:	d45f      	bmi.n	8001fc8 <__sflush_r+0xcc>
 8001f08:	684a      	ldr	r2, [r1, #4]
 8001f0a:	2a00      	cmp	r2, #0
 8001f0c:	dc04      	bgt.n	8001f18 <__sflush_r+0x1c>
 8001f0e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001f10:	2a00      	cmp	r2, #0
 8001f12:	dc01      	bgt.n	8001f18 <__sflush_r+0x1c>
 8001f14:	2000      	movs	r0, #0
 8001f16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001f18:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001f1a:	2f00      	cmp	r7, #0
 8001f1c:	d0fa      	beq.n	8001f14 <__sflush_r+0x18>
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2180      	movs	r1, #128	; 0x80
 8001f22:	682e      	ldr	r6, [r5, #0]
 8001f24:	602a      	str	r2, [r5, #0]
 8001f26:	001a      	movs	r2, r3
 8001f28:	0149      	lsls	r1, r1, #5
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	420b      	tst	r3, r1
 8001f2e:	d034      	beq.n	8001f9a <__sflush_r+0x9e>
 8001f30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f32:	89a3      	ldrh	r3, [r4, #12]
 8001f34:	075b      	lsls	r3, r3, #29
 8001f36:	d506      	bpl.n	8001f46 <__sflush_r+0x4a>
 8001f38:	6863      	ldr	r3, [r4, #4]
 8001f3a:	1ac0      	subs	r0, r0, r3
 8001f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <__sflush_r+0x4a>
 8001f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f44:	1ac0      	subs	r0, r0, r3
 8001f46:	0002      	movs	r2, r0
 8001f48:	6a21      	ldr	r1, [r4, #32]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	0028      	movs	r0, r5
 8001f4e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001f50:	47b8      	blx	r7
 8001f52:	89a1      	ldrh	r1, [r4, #12]
 8001f54:	1c43      	adds	r3, r0, #1
 8001f56:	d106      	bne.n	8001f66 <__sflush_r+0x6a>
 8001f58:	682b      	ldr	r3, [r5, #0]
 8001f5a:	2b1d      	cmp	r3, #29
 8001f5c:	d831      	bhi.n	8001fc2 <__sflush_r+0xc6>
 8001f5e:	4a2c      	ldr	r2, [pc, #176]	; (8002010 <__sflush_r+0x114>)
 8001f60:	40da      	lsrs	r2, r3
 8001f62:	07d3      	lsls	r3, r2, #31
 8001f64:	d52d      	bpl.n	8001fc2 <__sflush_r+0xc6>
 8001f66:	2300      	movs	r3, #0
 8001f68:	6063      	str	r3, [r4, #4]
 8001f6a:	6923      	ldr	r3, [r4, #16]
 8001f6c:	6023      	str	r3, [r4, #0]
 8001f6e:	04cb      	lsls	r3, r1, #19
 8001f70:	d505      	bpl.n	8001f7e <__sflush_r+0x82>
 8001f72:	1c43      	adds	r3, r0, #1
 8001f74:	d102      	bne.n	8001f7c <__sflush_r+0x80>
 8001f76:	682b      	ldr	r3, [r5, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d100      	bne.n	8001f7e <__sflush_r+0x82>
 8001f7c:	6560      	str	r0, [r4, #84]	; 0x54
 8001f7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f80:	602e      	str	r6, [r5, #0]
 8001f82:	2900      	cmp	r1, #0
 8001f84:	d0c6      	beq.n	8001f14 <__sflush_r+0x18>
 8001f86:	0023      	movs	r3, r4
 8001f88:	3344      	adds	r3, #68	; 0x44
 8001f8a:	4299      	cmp	r1, r3
 8001f8c:	d002      	beq.n	8001f94 <__sflush_r+0x98>
 8001f8e:	0028      	movs	r0, r5
 8001f90:	f7ff fb40 	bl	8001614 <_free_r>
 8001f94:	2000      	movs	r0, #0
 8001f96:	6360      	str	r0, [r4, #52]	; 0x34
 8001f98:	e7bd      	b.n	8001f16 <__sflush_r+0x1a>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	0028      	movs	r0, r5
 8001f9e:	6a21      	ldr	r1, [r4, #32]
 8001fa0:	47b8      	blx	r7
 8001fa2:	1c43      	adds	r3, r0, #1
 8001fa4:	d1c5      	bne.n	8001f32 <__sflush_r+0x36>
 8001fa6:	682b      	ldr	r3, [r5, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0c2      	beq.n	8001f32 <__sflush_r+0x36>
 8001fac:	2b1d      	cmp	r3, #29
 8001fae:	d001      	beq.n	8001fb4 <__sflush_r+0xb8>
 8001fb0:	2b16      	cmp	r3, #22
 8001fb2:	d101      	bne.n	8001fb8 <__sflush_r+0xbc>
 8001fb4:	602e      	str	r6, [r5, #0]
 8001fb6:	e7ad      	b.n	8001f14 <__sflush_r+0x18>
 8001fb8:	2340      	movs	r3, #64	; 0x40
 8001fba:	89a2      	ldrh	r2, [r4, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	81a3      	strh	r3, [r4, #12]
 8001fc0:	e7a9      	b.n	8001f16 <__sflush_r+0x1a>
 8001fc2:	2340      	movs	r3, #64	; 0x40
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	e7fa      	b.n	8001fbe <__sflush_r+0xc2>
 8001fc8:	690f      	ldr	r7, [r1, #16]
 8001fca:	2f00      	cmp	r7, #0
 8001fcc:	d0a2      	beq.n	8001f14 <__sflush_r+0x18>
 8001fce:	680a      	ldr	r2, [r1, #0]
 8001fd0:	600f      	str	r7, [r1, #0]
 8001fd2:	1bd2      	subs	r2, r2, r7
 8001fd4:	9201      	str	r2, [sp, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	079b      	lsls	r3, r3, #30
 8001fda:	d100      	bne.n	8001fde <__sflush_r+0xe2>
 8001fdc:	694a      	ldr	r2, [r1, #20]
 8001fde:	60a2      	str	r2, [r4, #8]
 8001fe0:	9b01      	ldr	r3, [sp, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	dc00      	bgt.n	8001fe8 <__sflush_r+0xec>
 8001fe6:	e795      	b.n	8001f14 <__sflush_r+0x18>
 8001fe8:	003a      	movs	r2, r7
 8001fea:	0028      	movs	r0, r5
 8001fec:	9b01      	ldr	r3, [sp, #4]
 8001fee:	6a21      	ldr	r1, [r4, #32]
 8001ff0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ff2:	47b0      	blx	r6
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	dc06      	bgt.n	8002006 <__sflush_r+0x10a>
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	89a2      	ldrh	r2, [r4, #12]
 8001ffe:	4240      	negs	r0, r0
 8002000:	4313      	orrs	r3, r2
 8002002:	81a3      	strh	r3, [r4, #12]
 8002004:	e787      	b.n	8001f16 <__sflush_r+0x1a>
 8002006:	9b01      	ldr	r3, [sp, #4]
 8002008:	183f      	adds	r7, r7, r0
 800200a:	1a1b      	subs	r3, r3, r0
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	e7e7      	b.n	8001fe0 <__sflush_r+0xe4>
 8002010:	20400001 	.word	0x20400001

08002014 <_fflush_r>:
 8002014:	690b      	ldr	r3, [r1, #16]
 8002016:	b570      	push	{r4, r5, r6, lr}
 8002018:	0005      	movs	r5, r0
 800201a:	000c      	movs	r4, r1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_fflush_r+0x12>
 8002020:	2500      	movs	r5, #0
 8002022:	0028      	movs	r0, r5
 8002024:	bd70      	pop	{r4, r5, r6, pc}
 8002026:	2800      	cmp	r0, #0
 8002028:	d004      	beq.n	8002034 <_fflush_r+0x20>
 800202a:	6983      	ldr	r3, [r0, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <_fflush_r+0x20>
 8002030:	f000 f892 	bl	8002158 <__sinit>
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <_fflush_r+0x74>)
 8002036:	429c      	cmp	r4, r3
 8002038:	d11b      	bne.n	8002072 <_fflush_r+0x5e>
 800203a:	686c      	ldr	r4, [r5, #4]
 800203c:	220c      	movs	r2, #12
 800203e:	5ea3      	ldrsh	r3, [r4, r2]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0ed      	beq.n	8002020 <_fflush_r+0xc>
 8002044:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002046:	07d2      	lsls	r2, r2, #31
 8002048:	d404      	bmi.n	8002054 <_fflush_r+0x40>
 800204a:	059b      	lsls	r3, r3, #22
 800204c:	d402      	bmi.n	8002054 <_fflush_r+0x40>
 800204e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002050:	f000 f923 	bl	800229a <__retarget_lock_acquire_recursive>
 8002054:	0028      	movs	r0, r5
 8002056:	0021      	movs	r1, r4
 8002058:	f7ff ff50 	bl	8001efc <__sflush_r>
 800205c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800205e:	0005      	movs	r5, r0
 8002060:	07db      	lsls	r3, r3, #31
 8002062:	d4de      	bmi.n	8002022 <_fflush_r+0xe>
 8002064:	89a3      	ldrh	r3, [r4, #12]
 8002066:	059b      	lsls	r3, r3, #22
 8002068:	d4db      	bmi.n	8002022 <_fflush_r+0xe>
 800206a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800206c:	f000 f916 	bl	800229c <__retarget_lock_release_recursive>
 8002070:	e7d7      	b.n	8002022 <_fflush_r+0xe>
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <_fflush_r+0x78>)
 8002074:	429c      	cmp	r4, r3
 8002076:	d101      	bne.n	800207c <_fflush_r+0x68>
 8002078:	68ac      	ldr	r4, [r5, #8]
 800207a:	e7df      	b.n	800203c <_fflush_r+0x28>
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <_fflush_r+0x7c>)
 800207e:	429c      	cmp	r4, r3
 8002080:	d1dc      	bne.n	800203c <_fflush_r+0x28>
 8002082:	68ec      	ldr	r4, [r5, #12]
 8002084:	e7da      	b.n	800203c <_fflush_r+0x28>
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	080029b4 	.word	0x080029b4
 800208c:	080029d4 	.word	0x080029d4
 8002090:	08002994 	.word	0x08002994

08002094 <std>:
 8002094:	2300      	movs	r3, #0
 8002096:	b510      	push	{r4, lr}
 8002098:	0004      	movs	r4, r0
 800209a:	6003      	str	r3, [r0, #0]
 800209c:	6043      	str	r3, [r0, #4]
 800209e:	6083      	str	r3, [r0, #8]
 80020a0:	8181      	strh	r1, [r0, #12]
 80020a2:	6643      	str	r3, [r0, #100]	; 0x64
 80020a4:	0019      	movs	r1, r3
 80020a6:	81c2      	strh	r2, [r0, #14]
 80020a8:	6103      	str	r3, [r0, #16]
 80020aa:	6143      	str	r3, [r0, #20]
 80020ac:	6183      	str	r3, [r0, #24]
 80020ae:	2208      	movs	r2, #8
 80020b0:	305c      	adds	r0, #92	; 0x5c
 80020b2:	f7ff f9d4 	bl	800145e <memset>
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <std+0x38>)
 80020b8:	6224      	str	r4, [r4, #32]
 80020ba:	6263      	str	r3, [r4, #36]	; 0x24
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <std+0x3c>)
 80020be:	62a3      	str	r3, [r4, #40]	; 0x28
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <std+0x40>)
 80020c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <std+0x44>)
 80020c6:	6323      	str	r3, [r4, #48]	; 0x30
 80020c8:	bd10      	pop	{r4, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	08002445 	.word	0x08002445
 80020d0:	0800246d 	.word	0x0800246d
 80020d4:	080024a5 	.word	0x080024a5
 80020d8:	080024d1 	.word	0x080024d1

080020dc <_cleanup_r>:
 80020dc:	b510      	push	{r4, lr}
 80020de:	4902      	ldr	r1, [pc, #8]	; (80020e8 <_cleanup_r+0xc>)
 80020e0:	f000 f8ba 	bl	8002258 <_fwalk_reent>
 80020e4:	bd10      	pop	{r4, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	08002015 	.word	0x08002015

080020ec <__sfmoreglue>:
 80020ec:	b570      	push	{r4, r5, r6, lr}
 80020ee:	2568      	movs	r5, #104	; 0x68
 80020f0:	1e4a      	subs	r2, r1, #1
 80020f2:	4355      	muls	r5, r2
 80020f4:	000e      	movs	r6, r1
 80020f6:	0029      	movs	r1, r5
 80020f8:	3174      	adds	r1, #116	; 0x74
 80020fa:	f7ff fad5 	bl	80016a8 <_malloc_r>
 80020fe:	1e04      	subs	r4, r0, #0
 8002100:	d008      	beq.n	8002114 <__sfmoreglue+0x28>
 8002102:	2100      	movs	r1, #0
 8002104:	002a      	movs	r2, r5
 8002106:	6001      	str	r1, [r0, #0]
 8002108:	6046      	str	r6, [r0, #4]
 800210a:	300c      	adds	r0, #12
 800210c:	60a0      	str	r0, [r4, #8]
 800210e:	3268      	adds	r2, #104	; 0x68
 8002110:	f7ff f9a5 	bl	800145e <memset>
 8002114:	0020      	movs	r0, r4
 8002116:	bd70      	pop	{r4, r5, r6, pc}

08002118 <__sfp_lock_acquire>:
 8002118:	b510      	push	{r4, lr}
 800211a:	4802      	ldr	r0, [pc, #8]	; (8002124 <__sfp_lock_acquire+0xc>)
 800211c:	f000 f8bd 	bl	800229a <__retarget_lock_acquire_recursive>
 8002120:	bd10      	pop	{r4, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	200001e9 	.word	0x200001e9

08002128 <__sfp_lock_release>:
 8002128:	b510      	push	{r4, lr}
 800212a:	4802      	ldr	r0, [pc, #8]	; (8002134 <__sfp_lock_release+0xc>)
 800212c:	f000 f8b6 	bl	800229c <__retarget_lock_release_recursive>
 8002130:	bd10      	pop	{r4, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	200001e9 	.word	0x200001e9

08002138 <__sinit_lock_acquire>:
 8002138:	b510      	push	{r4, lr}
 800213a:	4802      	ldr	r0, [pc, #8]	; (8002144 <__sinit_lock_acquire+0xc>)
 800213c:	f000 f8ad 	bl	800229a <__retarget_lock_acquire_recursive>
 8002140:	bd10      	pop	{r4, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	200001ea 	.word	0x200001ea

08002148 <__sinit_lock_release>:
 8002148:	b510      	push	{r4, lr}
 800214a:	4802      	ldr	r0, [pc, #8]	; (8002154 <__sinit_lock_release+0xc>)
 800214c:	f000 f8a6 	bl	800229c <__retarget_lock_release_recursive>
 8002150:	bd10      	pop	{r4, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	200001ea 	.word	0x200001ea

08002158 <__sinit>:
 8002158:	b513      	push	{r0, r1, r4, lr}
 800215a:	0004      	movs	r4, r0
 800215c:	f7ff ffec 	bl	8002138 <__sinit_lock_acquire>
 8002160:	69a3      	ldr	r3, [r4, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <__sinit+0x14>
 8002166:	f7ff ffef 	bl	8002148 <__sinit_lock_release>
 800216a:	bd13      	pop	{r0, r1, r4, pc}
 800216c:	64a3      	str	r3, [r4, #72]	; 0x48
 800216e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002170:	6523      	str	r3, [r4, #80]	; 0x50
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <__sinit+0x68>)
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <__sinit+0x6c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	62a2      	str	r2, [r4, #40]	; 0x28
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	42a3      	cmp	r3, r4
 800217e:	d101      	bne.n	8002184 <__sinit+0x2c>
 8002180:	2301      	movs	r3, #1
 8002182:	61a3      	str	r3, [r4, #24]
 8002184:	0020      	movs	r0, r4
 8002186:	f000 f81f 	bl	80021c8 <__sfp>
 800218a:	6060      	str	r0, [r4, #4]
 800218c:	0020      	movs	r0, r4
 800218e:	f000 f81b 	bl	80021c8 <__sfp>
 8002192:	60a0      	str	r0, [r4, #8]
 8002194:	0020      	movs	r0, r4
 8002196:	f000 f817 	bl	80021c8 <__sfp>
 800219a:	2200      	movs	r2, #0
 800219c:	2104      	movs	r1, #4
 800219e:	60e0      	str	r0, [r4, #12]
 80021a0:	6860      	ldr	r0, [r4, #4]
 80021a2:	f7ff ff77 	bl	8002094 <std>
 80021a6:	2201      	movs	r2, #1
 80021a8:	2109      	movs	r1, #9
 80021aa:	68a0      	ldr	r0, [r4, #8]
 80021ac:	f7ff ff72 	bl	8002094 <std>
 80021b0:	2202      	movs	r2, #2
 80021b2:	2112      	movs	r1, #18
 80021b4:	68e0      	ldr	r0, [r4, #12]
 80021b6:	f7ff ff6d 	bl	8002094 <std>
 80021ba:	2301      	movs	r3, #1
 80021bc:	61a3      	str	r3, [r4, #24]
 80021be:	e7d2      	b.n	8002166 <__sinit+0xe>
 80021c0:	0800288c 	.word	0x0800288c
 80021c4:	080020dd 	.word	0x080020dd

080021c8 <__sfp>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	0007      	movs	r7, r0
 80021cc:	f7ff ffa4 	bl	8002118 <__sfp_lock_acquire>
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <__sfp+0x88>)
 80021d2:	681e      	ldr	r6, [r3, #0]
 80021d4:	69b3      	ldr	r3, [r6, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <__sfp+0x18>
 80021da:	0030      	movs	r0, r6
 80021dc:	f7ff ffbc 	bl	8002158 <__sinit>
 80021e0:	3648      	adds	r6, #72	; 0x48
 80021e2:	68b4      	ldr	r4, [r6, #8]
 80021e4:	6873      	ldr	r3, [r6, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	d504      	bpl.n	80021f4 <__sfp+0x2c>
 80021ea:	6833      	ldr	r3, [r6, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d022      	beq.n	8002236 <__sfp+0x6e>
 80021f0:	6836      	ldr	r6, [r6, #0]
 80021f2:	e7f6      	b.n	80021e2 <__sfp+0x1a>
 80021f4:	220c      	movs	r2, #12
 80021f6:	5ea5      	ldrsh	r5, [r4, r2]
 80021f8:	2d00      	cmp	r5, #0
 80021fa:	d11a      	bne.n	8002232 <__sfp+0x6a>
 80021fc:	0020      	movs	r0, r4
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <__sfp+0x8c>)
 8002200:	3058      	adds	r0, #88	; 0x58
 8002202:	60e3      	str	r3, [r4, #12]
 8002204:	6665      	str	r5, [r4, #100]	; 0x64
 8002206:	f000 f847 	bl	8002298 <__retarget_lock_init_recursive>
 800220a:	f7ff ff8d 	bl	8002128 <__sfp_lock_release>
 800220e:	0020      	movs	r0, r4
 8002210:	2208      	movs	r2, #8
 8002212:	0029      	movs	r1, r5
 8002214:	6025      	str	r5, [r4, #0]
 8002216:	60a5      	str	r5, [r4, #8]
 8002218:	6065      	str	r5, [r4, #4]
 800221a:	6125      	str	r5, [r4, #16]
 800221c:	6165      	str	r5, [r4, #20]
 800221e:	61a5      	str	r5, [r4, #24]
 8002220:	305c      	adds	r0, #92	; 0x5c
 8002222:	f7ff f91c 	bl	800145e <memset>
 8002226:	6365      	str	r5, [r4, #52]	; 0x34
 8002228:	63a5      	str	r5, [r4, #56]	; 0x38
 800222a:	64a5      	str	r5, [r4, #72]	; 0x48
 800222c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800222e:	0020      	movs	r0, r4
 8002230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002232:	3468      	adds	r4, #104	; 0x68
 8002234:	e7d7      	b.n	80021e6 <__sfp+0x1e>
 8002236:	2104      	movs	r1, #4
 8002238:	0038      	movs	r0, r7
 800223a:	f7ff ff57 	bl	80020ec <__sfmoreglue>
 800223e:	1e04      	subs	r4, r0, #0
 8002240:	6030      	str	r0, [r6, #0]
 8002242:	d1d5      	bne.n	80021f0 <__sfp+0x28>
 8002244:	f7ff ff70 	bl	8002128 <__sfp_lock_release>
 8002248:	230c      	movs	r3, #12
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	e7ef      	b.n	800222e <__sfp+0x66>
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	0800288c 	.word	0x0800288c
 8002254:	ffff0001 	.word	0xffff0001

08002258 <_fwalk_reent>:
 8002258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800225a:	0004      	movs	r4, r0
 800225c:	0006      	movs	r6, r0
 800225e:	2700      	movs	r7, #0
 8002260:	9101      	str	r1, [sp, #4]
 8002262:	3448      	adds	r4, #72	; 0x48
 8002264:	6863      	ldr	r3, [r4, #4]
 8002266:	68a5      	ldr	r5, [r4, #8]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	9b00      	ldr	r3, [sp, #0]
 800226c:	3b01      	subs	r3, #1
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	d504      	bpl.n	800227c <_fwalk_reent+0x24>
 8002272:	6824      	ldr	r4, [r4, #0]
 8002274:	2c00      	cmp	r4, #0
 8002276:	d1f5      	bne.n	8002264 <_fwalk_reent+0xc>
 8002278:	0038      	movs	r0, r7
 800227a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800227c:	89ab      	ldrh	r3, [r5, #12]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d908      	bls.n	8002294 <_fwalk_reent+0x3c>
 8002282:	220e      	movs	r2, #14
 8002284:	5eab      	ldrsh	r3, [r5, r2]
 8002286:	3301      	adds	r3, #1
 8002288:	d004      	beq.n	8002294 <_fwalk_reent+0x3c>
 800228a:	0029      	movs	r1, r5
 800228c:	0030      	movs	r0, r6
 800228e:	9b01      	ldr	r3, [sp, #4]
 8002290:	4798      	blx	r3
 8002292:	4307      	orrs	r7, r0
 8002294:	3568      	adds	r5, #104	; 0x68
 8002296:	e7e8      	b.n	800226a <_fwalk_reent+0x12>

08002298 <__retarget_lock_init_recursive>:
 8002298:	4770      	bx	lr

0800229a <__retarget_lock_acquire_recursive>:
 800229a:	4770      	bx	lr

0800229c <__retarget_lock_release_recursive>:
 800229c:	4770      	bx	lr
 800229e:	0000      	movs	r0, r0

080022a0 <__swhatbuf_r>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	000e      	movs	r6, r1
 80022a4:	001d      	movs	r5, r3
 80022a6:	230e      	movs	r3, #14
 80022a8:	5ec9      	ldrsh	r1, [r1, r3]
 80022aa:	0014      	movs	r4, r2
 80022ac:	b096      	sub	sp, #88	; 0x58
 80022ae:	2900      	cmp	r1, #0
 80022b0:	da08      	bge.n	80022c4 <__swhatbuf_r+0x24>
 80022b2:	220c      	movs	r2, #12
 80022b4:	5eb3      	ldrsh	r3, [r6, r2]
 80022b6:	2200      	movs	r2, #0
 80022b8:	602a      	str	r2, [r5, #0]
 80022ba:	061b      	lsls	r3, r3, #24
 80022bc:	d411      	bmi.n	80022e2 <__swhatbuf_r+0x42>
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	e00f      	b.n	80022e4 <__swhatbuf_r+0x44>
 80022c4:	466a      	mov	r2, sp
 80022c6:	f000 f92f 	bl	8002528 <_fstat_r>
 80022ca:	2800      	cmp	r0, #0
 80022cc:	dbf1      	blt.n	80022b2 <__swhatbuf_r+0x12>
 80022ce:	23f0      	movs	r3, #240	; 0xf0
 80022d0:	9901      	ldr	r1, [sp, #4]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	4019      	ands	r1, r3
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <__swhatbuf_r+0x4c>)
 80022d8:	18c9      	adds	r1, r1, r3
 80022da:	424b      	negs	r3, r1
 80022dc:	4159      	adcs	r1, r3
 80022de:	6029      	str	r1, [r5, #0]
 80022e0:	e7ed      	b.n	80022be <__swhatbuf_r+0x1e>
 80022e2:	2340      	movs	r3, #64	; 0x40
 80022e4:	2000      	movs	r0, #0
 80022e6:	6023      	str	r3, [r4, #0]
 80022e8:	b016      	add	sp, #88	; 0x58
 80022ea:	bd70      	pop	{r4, r5, r6, pc}
 80022ec:	ffffe000 	.word	0xffffe000

080022f0 <__smakebuf_r>:
 80022f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022f2:	2602      	movs	r6, #2
 80022f4:	898b      	ldrh	r3, [r1, #12]
 80022f6:	0005      	movs	r5, r0
 80022f8:	000c      	movs	r4, r1
 80022fa:	4233      	tst	r3, r6
 80022fc:	d006      	beq.n	800230c <__smakebuf_r+0x1c>
 80022fe:	0023      	movs	r3, r4
 8002300:	3347      	adds	r3, #71	; 0x47
 8002302:	6023      	str	r3, [r4, #0]
 8002304:	6123      	str	r3, [r4, #16]
 8002306:	2301      	movs	r3, #1
 8002308:	6163      	str	r3, [r4, #20]
 800230a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800230c:	466a      	mov	r2, sp
 800230e:	ab01      	add	r3, sp, #4
 8002310:	f7ff ffc6 	bl	80022a0 <__swhatbuf_r>
 8002314:	9900      	ldr	r1, [sp, #0]
 8002316:	0007      	movs	r7, r0
 8002318:	0028      	movs	r0, r5
 800231a:	f7ff f9c5 	bl	80016a8 <_malloc_r>
 800231e:	2800      	cmp	r0, #0
 8002320:	d108      	bne.n	8002334 <__smakebuf_r+0x44>
 8002322:	220c      	movs	r2, #12
 8002324:	5ea3      	ldrsh	r3, [r4, r2]
 8002326:	059a      	lsls	r2, r3, #22
 8002328:	d4ef      	bmi.n	800230a <__smakebuf_r+0x1a>
 800232a:	2203      	movs	r2, #3
 800232c:	4393      	bics	r3, r2
 800232e:	431e      	orrs	r6, r3
 8002330:	81a6      	strh	r6, [r4, #12]
 8002332:	e7e4      	b.n	80022fe <__smakebuf_r+0xe>
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <__smakebuf_r+0x84>)
 8002336:	62ab      	str	r3, [r5, #40]	; 0x28
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	89a2      	ldrh	r2, [r4, #12]
 800233c:	6020      	str	r0, [r4, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	81a3      	strh	r3, [r4, #12]
 8002342:	9b00      	ldr	r3, [sp, #0]
 8002344:	6120      	str	r0, [r4, #16]
 8002346:	6163      	str	r3, [r4, #20]
 8002348:	9b01      	ldr	r3, [sp, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <__smakebuf_r+0x7a>
 800234e:	0028      	movs	r0, r5
 8002350:	230e      	movs	r3, #14
 8002352:	5ee1      	ldrsh	r1, [r4, r3]
 8002354:	f000 f8fa 	bl	800254c <_isatty_r>
 8002358:	2800      	cmp	r0, #0
 800235a:	d006      	beq.n	800236a <__smakebuf_r+0x7a>
 800235c:	2203      	movs	r2, #3
 800235e:	89a3      	ldrh	r3, [r4, #12]
 8002360:	4393      	bics	r3, r2
 8002362:	001a      	movs	r2, r3
 8002364:	2301      	movs	r3, #1
 8002366:	4313      	orrs	r3, r2
 8002368:	81a3      	strh	r3, [r4, #12]
 800236a:	89a0      	ldrh	r0, [r4, #12]
 800236c:	4307      	orrs	r7, r0
 800236e:	81a7      	strh	r7, [r4, #12]
 8002370:	e7cb      	b.n	800230a <__smakebuf_r+0x1a>
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	080020dd 	.word	0x080020dd

08002378 <memchr>:
 8002378:	b2c9      	uxtb	r1, r1
 800237a:	1882      	adds	r2, r0, r2
 800237c:	4290      	cmp	r0, r2
 800237e:	d101      	bne.n	8002384 <memchr+0xc>
 8002380:	2000      	movs	r0, #0
 8002382:	4770      	bx	lr
 8002384:	7803      	ldrb	r3, [r0, #0]
 8002386:	428b      	cmp	r3, r1
 8002388:	d0fb      	beq.n	8002382 <memchr+0xa>
 800238a:	3001      	adds	r0, #1
 800238c:	e7f6      	b.n	800237c <memchr+0x4>
 800238e:	0000      	movs	r0, r0

08002390 <__malloc_lock>:
 8002390:	b510      	push	{r4, lr}
 8002392:	4802      	ldr	r0, [pc, #8]	; (800239c <__malloc_lock+0xc>)
 8002394:	f7ff ff81 	bl	800229a <__retarget_lock_acquire_recursive>
 8002398:	bd10      	pop	{r4, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	200001e8 	.word	0x200001e8

080023a0 <__malloc_unlock>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	4802      	ldr	r0, [pc, #8]	; (80023ac <__malloc_unlock+0xc>)
 80023a4:	f7ff ff7a 	bl	800229c <__retarget_lock_release_recursive>
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	200001e8 	.word	0x200001e8

080023b0 <_raise_r>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	0004      	movs	r4, r0
 80023b4:	000d      	movs	r5, r1
 80023b6:	291f      	cmp	r1, #31
 80023b8:	d904      	bls.n	80023c4 <_raise_r+0x14>
 80023ba:	2316      	movs	r3, #22
 80023bc:	6003      	str	r3, [r0, #0]
 80023be:	2001      	movs	r0, #1
 80023c0:	4240      	negs	r0, r0
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
 80023c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <_raise_r+0x24>
 80023ca:	008a      	lsls	r2, r1, #2
 80023cc:	189b      	adds	r3, r3, r2
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2a00      	cmp	r2, #0
 80023d2:	d108      	bne.n	80023e6 <_raise_r+0x36>
 80023d4:	0020      	movs	r0, r4
 80023d6:	f000 f831 	bl	800243c <_getpid_r>
 80023da:	002a      	movs	r2, r5
 80023dc:	0001      	movs	r1, r0
 80023de:	0020      	movs	r0, r4
 80023e0:	f000 f81a 	bl	8002418 <_kill_r>
 80023e4:	e7ed      	b.n	80023c2 <_raise_r+0x12>
 80023e6:	2000      	movs	r0, #0
 80023e8:	2a01      	cmp	r2, #1
 80023ea:	d0ea      	beq.n	80023c2 <_raise_r+0x12>
 80023ec:	1c51      	adds	r1, r2, #1
 80023ee:	d103      	bne.n	80023f8 <_raise_r+0x48>
 80023f0:	2316      	movs	r3, #22
 80023f2:	3001      	adds	r0, #1
 80023f4:	6023      	str	r3, [r4, #0]
 80023f6:	e7e4      	b.n	80023c2 <_raise_r+0x12>
 80023f8:	2400      	movs	r4, #0
 80023fa:	0028      	movs	r0, r5
 80023fc:	601c      	str	r4, [r3, #0]
 80023fe:	4790      	blx	r2
 8002400:	0020      	movs	r0, r4
 8002402:	e7de      	b.n	80023c2 <_raise_r+0x12>

08002404 <raise>:
 8002404:	b510      	push	{r4, lr}
 8002406:	4b03      	ldr	r3, [pc, #12]	; (8002414 <raise+0x10>)
 8002408:	0001      	movs	r1, r0
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	f7ff ffd0 	bl	80023b0 <_raise_r>
 8002410:	bd10      	pop	{r4, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	20000004 	.word	0x20000004

08002418 <_kill_r>:
 8002418:	2300      	movs	r3, #0
 800241a:	b570      	push	{r4, r5, r6, lr}
 800241c:	4d06      	ldr	r5, [pc, #24]	; (8002438 <_kill_r+0x20>)
 800241e:	0004      	movs	r4, r0
 8002420:	0008      	movs	r0, r1
 8002422:	0011      	movs	r1, r2
 8002424:	602b      	str	r3, [r5, #0]
 8002426:	f000 f8f3 	bl	8002610 <_kill>
 800242a:	1c43      	adds	r3, r0, #1
 800242c:	d103      	bne.n	8002436 <_kill_r+0x1e>
 800242e:	682b      	ldr	r3, [r5, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d000      	beq.n	8002436 <_kill_r+0x1e>
 8002434:	6023      	str	r3, [r4, #0]
 8002436:	bd70      	pop	{r4, r5, r6, pc}
 8002438:	200001e4 	.word	0x200001e4

0800243c <_getpid_r>:
 800243c:	b510      	push	{r4, lr}
 800243e:	f000 f8cf 	bl	80025e0 <_getpid>
 8002442:	bd10      	pop	{r4, pc}

08002444 <__sread>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	000c      	movs	r4, r1
 8002448:	250e      	movs	r5, #14
 800244a:	5f49      	ldrsh	r1, [r1, r5]
 800244c:	f000 f8a4 	bl	8002598 <_read_r>
 8002450:	2800      	cmp	r0, #0
 8002452:	db03      	blt.n	800245c <__sread+0x18>
 8002454:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002456:	181b      	adds	r3, r3, r0
 8002458:	6563      	str	r3, [r4, #84]	; 0x54
 800245a:	bd70      	pop	{r4, r5, r6, pc}
 800245c:	89a3      	ldrh	r3, [r4, #12]
 800245e:	4a02      	ldr	r2, [pc, #8]	; (8002468 <__sread+0x24>)
 8002460:	4013      	ands	r3, r2
 8002462:	81a3      	strh	r3, [r4, #12]
 8002464:	e7f9      	b.n	800245a <__sread+0x16>
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	ffffefff 	.word	0xffffefff

0800246c <__swrite>:
 800246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246e:	001f      	movs	r7, r3
 8002470:	898b      	ldrh	r3, [r1, #12]
 8002472:	0005      	movs	r5, r0
 8002474:	000c      	movs	r4, r1
 8002476:	0016      	movs	r6, r2
 8002478:	05db      	lsls	r3, r3, #23
 800247a:	d505      	bpl.n	8002488 <__swrite+0x1c>
 800247c:	230e      	movs	r3, #14
 800247e:	5ec9      	ldrsh	r1, [r1, r3]
 8002480:	2200      	movs	r2, #0
 8002482:	2302      	movs	r3, #2
 8002484:	f000 f874 	bl	8002570 <_lseek_r>
 8002488:	89a3      	ldrh	r3, [r4, #12]
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <__swrite+0x34>)
 800248c:	0028      	movs	r0, r5
 800248e:	4013      	ands	r3, r2
 8002490:	81a3      	strh	r3, [r4, #12]
 8002492:	0032      	movs	r2, r6
 8002494:	230e      	movs	r3, #14
 8002496:	5ee1      	ldrsh	r1, [r4, r3]
 8002498:	003b      	movs	r3, r7
 800249a:	f000 f81f 	bl	80024dc <_write_r>
 800249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024a0:	ffffefff 	.word	0xffffefff

080024a4 <__sseek>:
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	000c      	movs	r4, r1
 80024a8:	250e      	movs	r5, #14
 80024aa:	5f49      	ldrsh	r1, [r1, r5]
 80024ac:	f000 f860 	bl	8002570 <_lseek_r>
 80024b0:	89a3      	ldrh	r3, [r4, #12]
 80024b2:	1c42      	adds	r2, r0, #1
 80024b4:	d103      	bne.n	80024be <__sseek+0x1a>
 80024b6:	4a05      	ldr	r2, [pc, #20]	; (80024cc <__sseek+0x28>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	81a3      	strh	r3, [r4, #12]
 80024bc:	bd70      	pop	{r4, r5, r6, pc}
 80024be:	2280      	movs	r2, #128	; 0x80
 80024c0:	0152      	lsls	r2, r2, #5
 80024c2:	4313      	orrs	r3, r2
 80024c4:	81a3      	strh	r3, [r4, #12]
 80024c6:	6560      	str	r0, [r4, #84]	; 0x54
 80024c8:	e7f8      	b.n	80024bc <__sseek+0x18>
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	ffffefff 	.word	0xffffefff

080024d0 <__sclose>:
 80024d0:	b510      	push	{r4, lr}
 80024d2:	230e      	movs	r3, #14
 80024d4:	5ec9      	ldrsh	r1, [r1, r3]
 80024d6:	f000 f815 	bl	8002504 <_close_r>
 80024da:	bd10      	pop	{r4, pc}

080024dc <_write_r>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	0004      	movs	r4, r0
 80024e0:	0008      	movs	r0, r1
 80024e2:	0011      	movs	r1, r2
 80024e4:	001a      	movs	r2, r3
 80024e6:	2300      	movs	r3, #0
 80024e8:	4d05      	ldr	r5, [pc, #20]	; (8002500 <_write_r+0x24>)
 80024ea:	602b      	str	r3, [r5, #0]
 80024ec:	f000 f8b6 	bl	800265c <_write>
 80024f0:	1c43      	adds	r3, r0, #1
 80024f2:	d103      	bne.n	80024fc <_write_r+0x20>
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d000      	beq.n	80024fc <_write_r+0x20>
 80024fa:	6023      	str	r3, [r4, #0]
 80024fc:	bd70      	pop	{r4, r5, r6, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	200001e4 	.word	0x200001e4

08002504 <_close_r>:
 8002504:	2300      	movs	r3, #0
 8002506:	b570      	push	{r4, r5, r6, lr}
 8002508:	4d06      	ldr	r5, [pc, #24]	; (8002524 <_close_r+0x20>)
 800250a:	0004      	movs	r4, r0
 800250c:	0008      	movs	r0, r1
 800250e:	602b      	str	r3, [r5, #0]
 8002510:	f000 f856 	bl	80025c0 <_close>
 8002514:	1c43      	adds	r3, r0, #1
 8002516:	d103      	bne.n	8002520 <_close_r+0x1c>
 8002518:	682b      	ldr	r3, [r5, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d000      	beq.n	8002520 <_close_r+0x1c>
 800251e:	6023      	str	r3, [r4, #0]
 8002520:	bd70      	pop	{r4, r5, r6, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	200001e4 	.word	0x200001e4

08002528 <_fstat_r>:
 8002528:	2300      	movs	r3, #0
 800252a:	b570      	push	{r4, r5, r6, lr}
 800252c:	4d06      	ldr	r5, [pc, #24]	; (8002548 <_fstat_r+0x20>)
 800252e:	0004      	movs	r4, r0
 8002530:	0008      	movs	r0, r1
 8002532:	0011      	movs	r1, r2
 8002534:	602b      	str	r3, [r5, #0]
 8002536:	f000 f84b 	bl	80025d0 <_fstat>
 800253a:	1c43      	adds	r3, r0, #1
 800253c:	d103      	bne.n	8002546 <_fstat_r+0x1e>
 800253e:	682b      	ldr	r3, [r5, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d000      	beq.n	8002546 <_fstat_r+0x1e>
 8002544:	6023      	str	r3, [r4, #0]
 8002546:	bd70      	pop	{r4, r5, r6, pc}
 8002548:	200001e4 	.word	0x200001e4

0800254c <_isatty_r>:
 800254c:	2300      	movs	r3, #0
 800254e:	b570      	push	{r4, r5, r6, lr}
 8002550:	4d06      	ldr	r5, [pc, #24]	; (800256c <_isatty_r+0x20>)
 8002552:	0004      	movs	r4, r0
 8002554:	0008      	movs	r0, r1
 8002556:	602b      	str	r3, [r5, #0]
 8002558:	f000 f852 	bl	8002600 <_isatty>
 800255c:	1c43      	adds	r3, r0, #1
 800255e:	d103      	bne.n	8002568 <_isatty_r+0x1c>
 8002560:	682b      	ldr	r3, [r5, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d000      	beq.n	8002568 <_isatty_r+0x1c>
 8002566:	6023      	str	r3, [r4, #0]
 8002568:	bd70      	pop	{r4, r5, r6, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	200001e4 	.word	0x200001e4

08002570 <_lseek_r>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	0004      	movs	r4, r0
 8002574:	0008      	movs	r0, r1
 8002576:	0011      	movs	r1, r2
 8002578:	001a      	movs	r2, r3
 800257a:	2300      	movs	r3, #0
 800257c:	4d05      	ldr	r5, [pc, #20]	; (8002594 <_lseek_r+0x24>)
 800257e:	602b      	str	r3, [r5, #0]
 8002580:	f000 f84e 	bl	8002620 <_lseek>
 8002584:	1c43      	adds	r3, r0, #1
 8002586:	d103      	bne.n	8002590 <_lseek_r+0x20>
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d000      	beq.n	8002590 <_lseek_r+0x20>
 800258e:	6023      	str	r3, [r4, #0]
 8002590:	bd70      	pop	{r4, r5, r6, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	200001e4 	.word	0x200001e4

08002598 <_read_r>:
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	0004      	movs	r4, r0
 800259c:	0008      	movs	r0, r1
 800259e:	0011      	movs	r1, r2
 80025a0:	001a      	movs	r2, r3
 80025a2:	2300      	movs	r3, #0
 80025a4:	4d05      	ldr	r5, [pc, #20]	; (80025bc <_read_r+0x24>)
 80025a6:	602b      	str	r3, [r5, #0]
 80025a8:	f000 f842 	bl	8002630 <_read>
 80025ac:	1c43      	adds	r3, r0, #1
 80025ae:	d103      	bne.n	80025b8 <_read_r+0x20>
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d000      	beq.n	80025b8 <_read_r+0x20>
 80025b6:	6023      	str	r3, [r4, #0]
 80025b8:	bd70      	pop	{r4, r5, r6, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	200001e4 	.word	0x200001e4

080025c0 <_close>:
 80025c0:	2258      	movs	r2, #88	; 0x58
 80025c2:	2001      	movs	r0, #1
 80025c4:	4b01      	ldr	r3, [pc, #4]	; (80025cc <_close+0xc>)
 80025c6:	4240      	negs	r0, r0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	4770      	bx	lr
 80025cc:	200001e4 	.word	0x200001e4

080025d0 <_fstat>:
 80025d0:	2258      	movs	r2, #88	; 0x58
 80025d2:	2001      	movs	r0, #1
 80025d4:	4b01      	ldr	r3, [pc, #4]	; (80025dc <_fstat+0xc>)
 80025d6:	4240      	negs	r0, r0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	4770      	bx	lr
 80025dc:	200001e4 	.word	0x200001e4

080025e0 <_getpid>:
 80025e0:	2258      	movs	r2, #88	; 0x58
 80025e2:	2001      	movs	r0, #1
 80025e4:	4b01      	ldr	r3, [pc, #4]	; (80025ec <_getpid+0xc>)
 80025e6:	4240      	negs	r0, r0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	4770      	bx	lr
 80025ec:	200001e4 	.word	0x200001e4

080025f0 <_gettimeofday>:
 80025f0:	2258      	movs	r2, #88	; 0x58
 80025f2:	2001      	movs	r0, #1
 80025f4:	4b01      	ldr	r3, [pc, #4]	; (80025fc <_gettimeofday+0xc>)
 80025f6:	4240      	negs	r0, r0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	4770      	bx	lr
 80025fc:	200001e4 	.word	0x200001e4

08002600 <_isatty>:
 8002600:	2258      	movs	r2, #88	; 0x58
 8002602:	4b02      	ldr	r3, [pc, #8]	; (800260c <_isatty+0xc>)
 8002604:	2000      	movs	r0, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	4770      	bx	lr
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	200001e4 	.word	0x200001e4

08002610 <_kill>:
 8002610:	2258      	movs	r2, #88	; 0x58
 8002612:	2001      	movs	r0, #1
 8002614:	4b01      	ldr	r3, [pc, #4]	; (800261c <_kill+0xc>)
 8002616:	4240      	negs	r0, r0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	4770      	bx	lr
 800261c:	200001e4 	.word	0x200001e4

08002620 <_lseek>:
 8002620:	2258      	movs	r2, #88	; 0x58
 8002622:	2001      	movs	r0, #1
 8002624:	4b01      	ldr	r3, [pc, #4]	; (800262c <_lseek+0xc>)
 8002626:	4240      	negs	r0, r0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	4770      	bx	lr
 800262c:	200001e4 	.word	0x200001e4

08002630 <_read>:
 8002630:	2258      	movs	r2, #88	; 0x58
 8002632:	2001      	movs	r0, #1
 8002634:	4b01      	ldr	r3, [pc, #4]	; (800263c <_read+0xc>)
 8002636:	4240      	negs	r0, r0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	4770      	bx	lr
 800263c:	200001e4 	.word	0x200001e4

08002640 <_sbrk>:
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <_sbrk+0x14>)
 8002642:	0003      	movs	r3, r0
 8002644:	6810      	ldr	r0, [r2, #0]
 8002646:	2800      	cmp	r0, #0
 8002648:	d002      	beq.n	8002650 <_sbrk+0x10>
 800264a:	18c3      	adds	r3, r0, r3
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4770      	bx	lr
 8002650:	4801      	ldr	r0, [pc, #4]	; (8002658 <_sbrk+0x18>)
 8002652:	e7fa      	b.n	800264a <_sbrk+0xa>
 8002654:	200001ec 	.word	0x200001ec
 8002658:	200001f0 	.word	0x200001f0

0800265c <_write>:
 800265c:	2258      	movs	r2, #88	; 0x58
 800265e:	2001      	movs	r0, #1
 8002660:	4b01      	ldr	r3, [pc, #4]	; (8002668 <_write+0xc>)
 8002662:	4240      	negs	r0, r0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	4770      	bx	lr
 8002668:	200001e4 	.word	0x200001e4

0800266c <_exit>:
 800266c:	e7fe      	b.n	800266c <_exit>
 800266e:	46c0      	nop			; (mov r8, r8)

08002670 <_init>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr

0800267c <_fini>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr
