
simpleserial-aes-CWNANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029a8  080029a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080029a8  080029a8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029a8  080029a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029ac  080029ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080029b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000068  08002a18  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200001e0  08002a18  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036ea  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000092d  00000000  00000000  0002377a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000026ba  00000000  00000000  000240a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00026761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000410  00000000  00000000  00026949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000251a  00000000  00000000  00026d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000e91  00000000  00000000  00029273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0002a104  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001170  00000000  00000000  0002a154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000204  00000000  00000000  0002b2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000201  00000000  00000000  0002b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c06      	ldr	r4, [pc, #24]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d107      	bne.n	80001a2 <__do_global_dtors_aux+0x1a>
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <__do_global_dtors_aux+0x16>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x24>)
 800019a:	e000      	b.n	800019e <__do_global_dtors_aux+0x16>
 800019c:	bf00      	nop
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000068 	.word	0x20000068
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002624 	.word	0x08002624

080001b0 <frame_dummy>:
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <frame_dummy+0x14>)
 80001b2:	b510      	push	{r4, lr}
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <frame_dummy+0x10>
 80001b8:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	4804      	ldr	r0, [pc, #16]	; (80001cc <frame_dummy+0x1c>)
 80001bc:	e000      	b.n	80001c0 <frame_dummy+0x10>
 80001be:	bf00      	nop
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	46c0      	nop			; (mov r8, r8)
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002624 	.word	0x08002624

080001d0 <__gnu_thumb1_case_uqi>:
 80001d0:	b402      	push	{r1}
 80001d2:	4671      	mov	r1, lr
 80001d4:	0849      	lsrs	r1, r1, #1
 80001d6:	0049      	lsls	r1, r1, #1
 80001d8:	5c09      	ldrb	r1, [r1, r0]
 80001da:	0049      	lsls	r1, r1, #1
 80001dc:	448e      	add	lr, r1
 80001de:	bc02      	pop	{r1}
 80001e0:	4770      	bx	lr
 80001e2:	46c0      	nop			; (mov r8, r8)

080001e4 <__udivsi3>:
 80001e4:	2200      	movs	r2, #0
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d374      	bcc.n	80002d6 <__udivsi3+0xf2>
 80001ec:	0903      	lsrs	r3, r0, #4
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d35f      	bcc.n	80002b2 <__udivsi3+0xce>
 80001f2:	0a03      	lsrs	r3, r0, #8
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d344      	bcc.n	8000282 <__udivsi3+0x9e>
 80001f8:	0b03      	lsrs	r3, r0, #12
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d328      	bcc.n	8000250 <__udivsi3+0x6c>
 80001fe:	0c03      	lsrs	r3, r0, #16
 8000200:	428b      	cmp	r3, r1
 8000202:	d30d      	bcc.n	8000220 <__udivsi3+0x3c>
 8000204:	22ff      	movs	r2, #255	; 0xff
 8000206:	0209      	lsls	r1, r1, #8
 8000208:	ba12      	rev	r2, r2
 800020a:	0c03      	lsrs	r3, r0, #16
 800020c:	428b      	cmp	r3, r1
 800020e:	d302      	bcc.n	8000216 <__udivsi3+0x32>
 8000210:	1212      	asrs	r2, r2, #8
 8000212:	0209      	lsls	r1, r1, #8
 8000214:	d065      	beq.n	80002e2 <__udivsi3+0xfe>
 8000216:	0b03      	lsrs	r3, r0, #12
 8000218:	428b      	cmp	r3, r1
 800021a:	d319      	bcc.n	8000250 <__udivsi3+0x6c>
 800021c:	e000      	b.n	8000220 <__udivsi3+0x3c>
 800021e:	0a09      	lsrs	r1, r1, #8
 8000220:	0bc3      	lsrs	r3, r0, #15
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x46>
 8000226:	03cb      	lsls	r3, r1, #15
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	0b83      	lsrs	r3, r0, #14
 800022e:	428b      	cmp	r3, r1
 8000230:	d301      	bcc.n	8000236 <__udivsi3+0x52>
 8000232:	038b      	lsls	r3, r1, #14
 8000234:	1ac0      	subs	r0, r0, r3
 8000236:	4152      	adcs	r2, r2
 8000238:	0b43      	lsrs	r3, r0, #13
 800023a:	428b      	cmp	r3, r1
 800023c:	d301      	bcc.n	8000242 <__udivsi3+0x5e>
 800023e:	034b      	lsls	r3, r1, #13
 8000240:	1ac0      	subs	r0, r0, r3
 8000242:	4152      	adcs	r2, r2
 8000244:	0b03      	lsrs	r3, r0, #12
 8000246:	428b      	cmp	r3, r1
 8000248:	d301      	bcc.n	800024e <__udivsi3+0x6a>
 800024a:	030b      	lsls	r3, r1, #12
 800024c:	1ac0      	subs	r0, r0, r3
 800024e:	4152      	adcs	r2, r2
 8000250:	0ac3      	lsrs	r3, r0, #11
 8000252:	428b      	cmp	r3, r1
 8000254:	d301      	bcc.n	800025a <__udivsi3+0x76>
 8000256:	02cb      	lsls	r3, r1, #11
 8000258:	1ac0      	subs	r0, r0, r3
 800025a:	4152      	adcs	r2, r2
 800025c:	0a83      	lsrs	r3, r0, #10
 800025e:	428b      	cmp	r3, r1
 8000260:	d301      	bcc.n	8000266 <__udivsi3+0x82>
 8000262:	028b      	lsls	r3, r1, #10
 8000264:	1ac0      	subs	r0, r0, r3
 8000266:	4152      	adcs	r2, r2
 8000268:	0a43      	lsrs	r3, r0, #9
 800026a:	428b      	cmp	r3, r1
 800026c:	d301      	bcc.n	8000272 <__udivsi3+0x8e>
 800026e:	024b      	lsls	r3, r1, #9
 8000270:	1ac0      	subs	r0, r0, r3
 8000272:	4152      	adcs	r2, r2
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d301      	bcc.n	800027e <__udivsi3+0x9a>
 800027a:	020b      	lsls	r3, r1, #8
 800027c:	1ac0      	subs	r0, r0, r3
 800027e:	4152      	adcs	r2, r2
 8000280:	d2cd      	bcs.n	800021e <__udivsi3+0x3a>
 8000282:	09c3      	lsrs	r3, r0, #7
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__udivsi3+0xa8>
 8000288:	01cb      	lsls	r3, r1, #7
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0983      	lsrs	r3, r0, #6
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__udivsi3+0xb4>
 8000294:	018b      	lsls	r3, r1, #6
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0943      	lsrs	r3, r0, #5
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__udivsi3+0xc0>
 80002a0:	014b      	lsls	r3, r1, #5
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0903      	lsrs	r3, r0, #4
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__udivsi3+0xcc>
 80002ac:	010b      	lsls	r3, r1, #4
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	08c3      	lsrs	r3, r0, #3
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__udivsi3+0xd8>
 80002b8:	00cb      	lsls	r3, r1, #3
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0883      	lsrs	r3, r0, #2
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__udivsi3+0xe4>
 80002c4:	008b      	lsls	r3, r1, #2
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0843      	lsrs	r3, r0, #1
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__udivsi3+0xf0>
 80002d0:	004b      	lsls	r3, r1, #1
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	1a41      	subs	r1, r0, r1
 80002d8:	d200      	bcs.n	80002dc <__udivsi3+0xf8>
 80002da:	4601      	mov	r1, r0
 80002dc:	4152      	adcs	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	4770      	bx	lr
 80002e2:	e7ff      	b.n	80002e4 <__udivsi3+0x100>
 80002e4:	b501      	push	{r0, lr}
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 f806 	bl	80002f8 <__aeabi_idiv0>
 80002ec:	bd02      	pop	{r1, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)

080002f0 <__aeabi_uidivmod>:
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d0f7      	beq.n	80002e4 <__udivsi3+0x100>
 80002f4:	e776      	b.n	80001e4 <__udivsi3>
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_idiv0>:
 80002f8:	4770      	bx	lr
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__gnu_thumb1_case_shi>:
 80002fc:	b403      	push	{r0, r1}
 80002fe:	4671      	mov	r1, lr
 8000300:	0849      	lsrs	r1, r1, #1
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	0049      	lsls	r1, r1, #1
 8000306:	5e09      	ldrsh	r1, [r1, r0]
 8000308:	0049      	lsls	r1, r1, #1
 800030a:	448e      	add	lr, r1
 800030c:	bc03      	pop	{r0, r1}
 800030e:	4770      	bx	lr

08000310 <__aeabi_lmul>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	46ce      	mov	lr, r9
 8000314:	4647      	mov	r7, r8
 8000316:	b580      	push	{r7, lr}
 8000318:	0007      	movs	r7, r0
 800031a:	4699      	mov	r9, r3
 800031c:	0c3b      	lsrs	r3, r7, #16
 800031e:	469c      	mov	ip, r3
 8000320:	0413      	lsls	r3, r2, #16
 8000322:	0c1b      	lsrs	r3, r3, #16
 8000324:	001d      	movs	r5, r3
 8000326:	000e      	movs	r6, r1
 8000328:	4661      	mov	r1, ip
 800032a:	0400      	lsls	r0, r0, #16
 800032c:	0c14      	lsrs	r4, r2, #16
 800032e:	0c00      	lsrs	r0, r0, #16
 8000330:	4345      	muls	r5, r0
 8000332:	434b      	muls	r3, r1
 8000334:	4360      	muls	r0, r4
 8000336:	4361      	muls	r1, r4
 8000338:	18c0      	adds	r0, r0, r3
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	1820      	adds	r0, r4, r0
 800033e:	468c      	mov	ip, r1
 8000340:	4283      	cmp	r3, r0
 8000342:	d903      	bls.n	800034c <__aeabi_lmul+0x3c>
 8000344:	2380      	movs	r3, #128	; 0x80
 8000346:	025b      	lsls	r3, r3, #9
 8000348:	4698      	mov	r8, r3
 800034a:	44c4      	add	ip, r8
 800034c:	4649      	mov	r1, r9
 800034e:	4379      	muls	r1, r7
 8000350:	4372      	muls	r2, r6
 8000352:	0c03      	lsrs	r3, r0, #16
 8000354:	4463      	add	r3, ip
 8000356:	042d      	lsls	r5, r5, #16
 8000358:	0c2d      	lsrs	r5, r5, #16
 800035a:	18c9      	adds	r1, r1, r3
 800035c:	0400      	lsls	r0, r0, #16
 800035e:	1940      	adds	r0, r0, r5
 8000360:	1889      	adds	r1, r1, r2
 8000362:	bcc0      	pop	{r6, r7}
 8000364:	46b9      	mov	r9, r7
 8000366:	46b0      	mov	r8, r6
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036a:	46c0      	nop			; (mov r8, r8)

0800036c <substitute_byte>:


// Function to substitute a byte using a constant-time lookup
uint8_t substitute_byte(uint8_t byte) {
    uint8_t result = 0;
    for (int i = 0; i < 256; i++) {
 800036c:	2200      	movs	r2, #0
uint8_t substitute_byte(uint8_t byte) {
 800036e:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < 256; i++) {
 8000370:	2480      	movs	r4, #128	; 0x80
uint8_t substitute_byte(uint8_t byte) {
 8000372:	0001      	movs	r1, r0
    uint8_t result = 0;
 8000374:	0010      	movs	r0, r2
        uint8_t match = (byte == i);         // 1 if true, 0 if false
        result |= match * SBox[i];           // Add SBox[i] to result only if match
 8000376:	4d06      	ldr	r5, [pc, #24]	; (8000390 <substitute_byte+0x24>)
    for (int i = 0; i < 256; i++) {
 8000378:	0064      	lsls	r4, r4, #1
        uint8_t match = (byte == i);         // 1 if true, 0 if false
 800037a:	1a8b      	subs	r3, r1, r2
 800037c:	425e      	negs	r6, r3
 800037e:	4173      	adcs	r3, r6
        result |= match * SBox[i];           // Add SBox[i] to result only if match
 8000380:	5cae      	ldrb	r6, [r5, r2]
    for (int i = 0; i < 256; i++) {
 8000382:	3201      	adds	r2, #1
        result |= match * SBox[i];           // Add SBox[i] to result only if match
 8000384:	4373      	muls	r3, r6
 8000386:	4318      	orrs	r0, r3
 8000388:	b2c0      	uxtb	r0, r0
    for (int i = 0; i < 256; i++) {
 800038a:	42a2      	cmp	r2, r4
 800038c:	d1f5      	bne.n	800037a <substitute_byte+0xe>
    }
    return result;
}
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	0800273c 	.word	0x0800273c

08000394 <substitute>:

// Apply the substitution step (constant-time)
void substitute(uint8_t *block) {
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	0005      	movs	r5, r0
 8000398:	0004      	movs	r4, r0
 800039a:	3510      	adds	r5, #16
    for (int i = 0; i < BLOCK_SIZE; i++) {
        block[i] = substitute_byte(block[i]);
 800039c:	7820      	ldrb	r0, [r4, #0]
 800039e:	f7ff ffe5 	bl	800036c <substitute_byte>
 80003a2:	7020      	strb	r0, [r4, #0]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 80003a4:	3401      	adds	r4, #1
 80003a6:	42ac      	cmp	r4, r5
 80003a8:	d1f8      	bne.n	800039c <substitute+0x8>
    }
}
 80003aa:	bd70      	pop	{r4, r5, r6, pc}

080003ac <balanced_xor>:

// Perform XOR in constant time
void balanced_xor(uint8_t *block, const uint8_t *mask) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
 80003ac:	2300      	movs	r3, #0
void balanced_xor(uint8_t *block, const uint8_t *mask) {
 80003ae:	b510      	push	{r4, lr}
        block[i] ^= mask[i];  // XOR is already constant-time
 80003b0:	5cc2      	ldrb	r2, [r0, r3]
 80003b2:	5ccc      	ldrb	r4, [r1, r3]
 80003b4:	4062      	eors	r2, r4
 80003b6:	54c2      	strb	r2, [r0, r3]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 80003b8:	3301      	adds	r3, #1
 80003ba:	2b10      	cmp	r3, #16
 80003bc:	d1f8      	bne.n	80003b0 <balanced_xor+0x4>
    }
}
 80003be:	bd10      	pop	{r4, pc}

080003c0 <permute>:

// Perform a constant-time permutation (avoid data-dependent indexing)
void permute(uint8_t *block) {
 80003c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t temp[BLOCK_SIZE];
    memcpy(temp, block, BLOCK_SIZE);
 80003c2:	0001      	movs	r1, r0
void permute(uint8_t *block) {
 80003c4:	0004      	movs	r4, r0
    memcpy(temp, block, BLOCK_SIZE);
 80003c6:	2210      	movs	r2, #16
 80003c8:	4668      	mov	r0, sp
 80003ca:	f001 f84d 	bl	8001468 <memcpy>

    // Example permutation: Rotate bytes left by 3 (constant-time)
    for (int i = 0; i < BLOCK_SIZE; i++) {
 80003ce:	2300      	movs	r3, #0
        block[i] = temp[(i + 3) % BLOCK_SIZE];
 80003d0:	210f      	movs	r1, #15
 80003d2:	4668      	mov	r0, sp
 80003d4:	1cda      	adds	r2, r3, #3
 80003d6:	400a      	ands	r2, r1
 80003d8:	5c82      	ldrb	r2, [r0, r2]
 80003da:	54e2      	strb	r2, [r4, r3]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 80003dc:	3301      	adds	r3, #1
 80003de:	2b10      	cmp	r3, #16
 80003e0:	d1f7      	bne.n	80003d2 <permute+0x12>
    }
}
 80003e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080003e4 <encrypt_block>:

// Encryption function
void encrypt_block(uint8_t *block, const uint8_t *key, const uint8_t *mask) {
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	0004      	movs	r4, r0
 80003e8:	000e      	movs	r6, r1
 80003ea:	0017      	movs	r7, r2
 80003ec:	250a      	movs	r5, #10
    for (int round = 0; round < ROUNDS; round++) {
        balanced_xor(block, mask);        // Masking step
 80003ee:	0039      	movs	r1, r7
 80003f0:	0020      	movs	r0, r4
 80003f2:	f7ff ffdb 	bl	80003ac <balanced_xor>
        substitute(block);               // Substitution step
 80003f6:	0020      	movs	r0, r4
 80003f8:	f7ff ffcc 	bl	8000394 <substitute>
        permute(block);                  // Permutation step
 80003fc:	0020      	movs	r0, r4
 80003fe:	f7ff ffdf 	bl	80003c0 <permute>
    for (int round = 0; round < ROUNDS; round++) {
 8000402:	3d01      	subs	r5, #1
        balanced_xor(block, key);        // XOR with key
 8000404:	0031      	movs	r1, r6
 8000406:	0020      	movs	r0, r4
 8000408:	f7ff ffd0 	bl	80003ac <balanced_xor>
    for (int round = 0; round < ROUNDS; round++) {
 800040c:	2d00      	cmp	r5, #0
 800040e:	d1ee      	bne.n	80003ee <encrypt_block+0xa>
    }
}
 8000410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000412:	0000      	movs	r0, r0

08000414 <inverse_substitute_byte>:


uint8_t inverse_substitute_byte(uint8_t byte) {
    uint8_t result = 0;
    for (int i = 0; i < 256; i++) {
 8000414:	2200      	movs	r2, #0
uint8_t inverse_substitute_byte(uint8_t byte) {
 8000416:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < 256; i++) {
 8000418:	2480      	movs	r4, #128	; 0x80
uint8_t inverse_substitute_byte(uint8_t byte) {
 800041a:	0001      	movs	r1, r0
    uint8_t result = 0;
 800041c:	0010      	movs	r0, r2
        uint8_t match = (byte == i);         // 1 if true, 0 if false
        result |= match * InvSBox[i];           // Add SBox[i] to result only if match
 800041e:	4d06      	ldr	r5, [pc, #24]	; (8000438 <inverse_substitute_byte+0x24>)
    for (int i = 0; i < 256; i++) {
 8000420:	0064      	lsls	r4, r4, #1
        uint8_t match = (byte == i);         // 1 if true, 0 if false
 8000422:	1a8b      	subs	r3, r1, r2
 8000424:	425e      	negs	r6, r3
 8000426:	4173      	adcs	r3, r6
        result |= match * InvSBox[i];           // Add SBox[i] to result only if match
 8000428:	5cae      	ldrb	r6, [r5, r2]
    for (int i = 0; i < 256; i++) {
 800042a:	3201      	adds	r2, #1
        result |= match * InvSBox[i];           // Add SBox[i] to result only if match
 800042c:	4373      	muls	r3, r6
 800042e:	4318      	orrs	r0, r3
 8000430:	b2c0      	uxtb	r0, r0
    for (int i = 0; i < 256; i++) {
 8000432:	42a2      	cmp	r2, r4
 8000434:	d1f5      	bne.n	8000422 <inverse_substitute_byte+0xe>
    }
    return result;
}
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	0800263c 	.word	0x0800263c

0800043c <inverse_substitute>:

// Apply the substitution step (constant-time)

void inverse_substitute(uint8_t *block) {
 800043c:	b570      	push	{r4, r5, r6, lr}
 800043e:	0005      	movs	r5, r0
 8000440:	0004      	movs	r4, r0
 8000442:	3510      	adds	r5, #16
    for (int i = 0; i < BLOCK_SIZE; i++) {
        block[i] = inverse_substitute_byte(block[i]);
 8000444:	7820      	ldrb	r0, [r4, #0]
 8000446:	f7ff ffe5 	bl	8000414 <inverse_substitute_byte>
 800044a:	7020      	strb	r0, [r4, #0]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 800044c:	3401      	adds	r4, #1
 800044e:	42ac      	cmp	r4, r5
 8000450:	d1f8      	bne.n	8000444 <inverse_substitute+0x8>
    }
}
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <reverse_permute>:

// Perform reverse permutation (rotate bytes right by 3)
void reverse_permute(uint8_t *block) {
 8000454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t temp[BLOCK_SIZE];
    memcpy(temp, block, BLOCK_SIZE);
 8000456:	0001      	movs	r1, r0
void reverse_permute(uint8_t *block) {
 8000458:	0004      	movs	r4, r0
    memcpy(temp, block, BLOCK_SIZE);
 800045a:	2210      	movs	r2, #16
 800045c:	4668      	mov	r0, sp
 800045e:	f001 f803 	bl	8001468 <memcpy>

    for (int i = 0; i < BLOCK_SIZE; i++) {
 8000462:	2300      	movs	r3, #0
        block[i] = temp[(i - 3 + BLOCK_SIZE) % BLOCK_SIZE]; // Rotate right
 8000464:	210f      	movs	r1, #15
 8000466:	001a      	movs	r2, r3
 8000468:	4668      	mov	r0, sp
 800046a:	320d      	adds	r2, #13
 800046c:	400a      	ands	r2, r1
 800046e:	5c82      	ldrb	r2, [r0, r2]
 8000470:	54e2      	strb	r2, [r4, r3]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 8000472:	3301      	adds	r3, #1
 8000474:	2b10      	cmp	r3, #16
 8000476:	d1f6      	bne.n	8000466 <reverse_permute+0x12>
    }
}
 8000478:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800047a <decrypt_block>:

//Decryption function
void decrypt_block(uint8_t *block, const uint8_t *key, const uint8_t *mask) {
 800047a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047c:	0004      	movs	r4, r0
 800047e:	000f      	movs	r7, r1
 8000480:	0016      	movs	r6, r2
 8000482:	250a      	movs	r5, #10
    for (int round = 0; round < ROUNDS; round++) {
        balanced_xor(block, key);        // Reverse XOR with key
 8000484:	0039      	movs	r1, r7
 8000486:	0020      	movs	r0, r4
 8000488:	f7ff ff90 	bl	80003ac <balanced_xor>
        reverse_permute(block);          // Reverse permutation
 800048c:	0020      	movs	r0, r4
 800048e:	f7ff ffe1 	bl	8000454 <reverse_permute>
        inverse_substitute(block);       // Reverse substitution
 8000492:	0020      	movs	r0, r4
 8000494:	f7ff ffd2 	bl	800043c <inverse_substitute>
    for (int round = 0; round < ROUNDS; round++) {
 8000498:	3d01      	subs	r5, #1
        balanced_xor(block, mask);       // Reverse XOR with mask
 800049a:	0031      	movs	r1, r6
 800049c:	0020      	movs	r0, r4
 800049e:	f7ff ff85 	bl	80003ac <balanced_xor>
    for (int round = 0; round < ROUNDS; round++) {
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d1ee      	bne.n	8000484 <decrypt_block+0xa>
    }
}
 80004a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080004a8 <get_pt>:


// Function to get the plaintext from UART and perform encryption
uint8_t get_pt(uint8_t* pt, uint8_t len)
{
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	0005      	movs	r5, r0
 80004ac:	b085      	sub	sp, #20

    uint8_t mask[BLOCK_SIZE];

    srand(69);
 80004ae:	2045      	movs	r0, #69	; 0x45
 80004b0:	f000 ffec 	bl	800148c <srand>

    // Fill the array with random values

    for (int i = 0; i < 16; i++) {
 80004b4:	2400      	movs	r4, #0
        mask[i] = rand() % 256; // Random value between 0x00 and 0xFF
 80004b6:	f001 f819 	bl	80014ec <rand>
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <get_pt+0x4c>)
 80004bc:	4018      	ands	r0, r3
 80004be:	d503      	bpl.n	80004c8 <get_pt+0x20>
 80004c0:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <get_pt+0x50>)
 80004c2:	3801      	subs	r0, #1
 80004c4:	4318      	orrs	r0, r3
 80004c6:	3001      	adds	r0, #1
 80004c8:	466b      	mov	r3, sp
 80004ca:	54e0      	strb	r0, [r4, r3]
    for (int i = 0; i < 16; i++) {
 80004cc:	3401      	adds	r4, #1
 80004ce:	2c10      	cmp	r4, #16
 80004d0:	d1f1      	bne.n	80004b6 <get_pt+0xe>

    //uint8_t key[BLOCK_SIZE] = {0xA1, 0xB2, 0xC3, 0xD4, 0xE5, 0xF6, 0x07, 0x18,
    //                       0x29, 0x3A, 0x4B, 0x5C, 0x6D, 0x7E, 0x8F, 0x90};


	trigger_high();
 80004d2:	f000 fa57 	bl	8000984 <trigger_high>

  #ifdef ADD_JITTER
  for (volatile uint8_t k = 0; k < (*pt & 0x0F); k++);
  #endif

	encrypt_block(pt, key, mask); /* encrypting the data block */
 80004d6:	466a      	mov	r2, sp
 80004d8:	0028      	movs	r0, r5
 80004da:	4908      	ldr	r1, [pc, #32]	; (80004fc <get_pt+0x54>)
 80004dc:	f7ff ff82 	bl	80003e4 <encrypt_block>
	trigger_low();
 80004e0:	f000 fa58 	bl	8000994 <trigger_low>

	simpleserial_put('r', 16, pt);
 80004e4:	002a      	movs	r2, r5
 80004e6:	0021      	movs	r1, r4
 80004e8:	2072      	movs	r0, #114	; 0x72
 80004ea:	f000 f8df 	bl	80006ac <simpleserial_put>

	return 0x00;
}
 80004ee:	2000      	movs	r0, #0
 80004f0:	b005      	add	sp, #20
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	800000ff 	.word	0x800000ff
 80004f8:	ffffff00 	.word	0xffffff00
 80004fc:	20000084 	.word	0x20000084

08000500 <get_pt_wrapper>:

}


uint8_t get_pt_wrapper(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8000500:	b510      	push	{r4, lr}
 8000502:	0011      	movs	r1, r2
 8000504:	0018      	movs	r0, r3
    uint8_t err = 0;
    err = get_pt(buf, len);
 8000506:	f7ff ffcf 	bl	80004a8 <get_pt>
        return err;
    
    return 0x00;
}
 800050a:	bd10      	pop	{r4, pc}

0800050c <give_dt>:
{
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	0005      	movs	r5, r0
 8000510:	b085      	sub	sp, #20
    srand(69);
 8000512:	2045      	movs	r0, #69	; 0x45
 8000514:	f000 ffba 	bl	800148c <srand>
    for (int i = 0; i < 16; i++) {
 8000518:	2400      	movs	r4, #0
        mask[i] = rand() % 256; // Random value between 0x00 and 0xFF
 800051a:	f000 ffe7 	bl	80014ec <rand>
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <give_dt+0x50>)
 8000520:	4018      	ands	r0, r3
 8000522:	d503      	bpl.n	800052c <give_dt+0x20>
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <give_dt+0x54>)
 8000526:	3801      	subs	r0, #1
 8000528:	4318      	orrs	r0, r3
 800052a:	3001      	adds	r0, #1
 800052c:	466b      	mov	r3, sp
 800052e:	54e0      	strb	r0, [r4, r3]
    for (int i = 0; i < 16; i++) {
 8000530:	3401      	adds	r4, #1
 8000532:	2c10      	cmp	r4, #16
 8000534:	d1f1      	bne.n	800051a <give_dt+0xe>
	trigger_high();
 8000536:	f000 fa25 	bl	8000984 <trigger_high>
	trigger_high();
 800053a:	f000 fa23 	bl	8000984 <trigger_high>
	decrypt_block(dt, key, mask); /* encrypting the data block */
 800053e:	466a      	mov	r2, sp
 8000540:	0028      	movs	r0, r5
 8000542:	4908      	ldr	r1, [pc, #32]	; (8000564 <give_dt+0x58>)
 8000544:	f7ff ff99 	bl	800047a <decrypt_block>
	trigger_low();
 8000548:	f000 fa24 	bl	8000994 <trigger_low>
	simpleserial_put('r', 16, dt);
 800054c:	002a      	movs	r2, r5
 800054e:	0021      	movs	r1, r4
 8000550:	2072      	movs	r0, #114	; 0x72
 8000552:	f000 f8ab 	bl	80006ac <simpleserial_put>
}
 8000556:	2000      	movs	r0, #0
 8000558:	b005      	add	sp, #20
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	800000ff 	.word	0x800000ff
 8000560:	ffffff00 	.word	0xffffff00
 8000564:	20000084 	.word	0x20000084

08000568 <give_dt_wrapper>:

uint8_t give_dt_wrapper(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8000568:	b510      	push	{r4, lr}
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
    uint8_t err = 0;
    err = give_dt(buf, len);
 800056e:	f7ff ffcd 	bl	800050c <give_dt>
        return err;
    
    return 0x00;
}
 8000572:	bd10      	pop	{r4, pc}

08000574 <get_key>:
{
 8000574:	2300      	movs	r3, #0
        key[i] = pykey[i];
 8000576:	4a04      	ldr	r2, [pc, #16]	; (8000588 <get_key+0x14>)
 8000578:	5cc1      	ldrb	r1, [r0, r3]
 800057a:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < 16; i++){
 800057c:	3301      	adds	r3, #1
 800057e:	2b10      	cmp	r3, #16
 8000580:	d1fa      	bne.n	8000578 <get_key+0x4>
}
 8000582:	2000      	movs	r0, #0
 8000584:	4770      	bx	lr
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	20000084 	.word	0x20000084

0800058c <get_key_wrapper>:

uint8_t get_key_wrapper(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 800058c:	b510      	push	{r4, lr}
 800058e:	0018      	movs	r0, r3
    uint8_t err = 0;
    err = get_key(buf);
 8000590:	f7ff fff0 	bl	8000574 <get_key>
        return err;
    
    return 0x00;
}
 8000594:	bd10      	pop	{r4, pc}
 8000596:	0000      	movs	r0, r0

08000598 <main>:
//     return 0x00;
// }
// #endif

int main(void)
{
 8000598:	b510      	push	{r4, lr}
    platform_init();
 800059a:	f000 f947 	bl	800082c <platform_init>
    init_uart();
 800059e:	f000 f971 	bl	8000884 <init_uart>
    trigger_setup();
 80005a2:	f000 f9af 	bl	8000904 <trigger_setup>

    simpleserial_init();
 80005a6:	f000 f871 	bl	800068c <simpleserial_init>
    #if SS_VER == SS_VER_2_1
    // simpleserial_addcmd(0x01, 16, aes);  // Add AES command for testing 
    simpleserial_addcmd('d', 16, give_dt_wrapper); // Use 'd' command to get cyphertext and decrypt
 80005aa:	2110      	movs	r1, #16
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <main+0x38>)
 80005ae:	2064      	movs	r0, #100	; 0x64
 80005b0:	f000 f84e 	bl	8000650 <simpleserial_addcmd>
    simpleserial_addcmd('e', 16, get_pt_wrapper);  // Use 'p' command to get plaintext and encrypt
 80005b4:	2110      	movs	r1, #16
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <main+0x3c>)
 80005b8:	2065      	movs	r0, #101	; 0x65
 80005ba:	f000 f849 	bl	8000650 <simpleserial_addcmd>
    simpleserial_addcmd('l', 16, get_key_wrapper); // Use 'k' command to get the key
 80005be:	2110      	movs	r1, #16
 80005c0:	206c      	movs	r0, #108	; 0x6c
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <main+0x40>)
 80005c4:	f000 f844 	bl	8000650 <simpleserial_addcmd>
    #else
	
    #endif

    while(1)
        simpleserial_get();  // Wait for UART commands
 80005c8:	f000 f8c0 	bl	800074c <simpleserial_get>
    while(1)
 80005cc:	e7fc      	b.n	80005c8 <main+0x30>
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	08000569 	.word	0x08000569
 80005d4:	08000501 	.word	0x08000501
 80005d8:	0800058d 	.word	0x0800058d

080005dc <ss_crc>:
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 80005dc:	0003      	movs	r3, r0
{
 80005de:	b570      	push	{r4, r5, r6, lr}
 80005e0:	1841      	adds	r1, r0, r1
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80005e2:	254d      	movs	r5, #77	; 0x4d
	uint8_t crc = 0x00;
 80005e4:	2000      	movs	r0, #0
	while (len--) {
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d100      	bne.n	80005ec <ss_crc+0x10>
		}
	}
	return crc;

}
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
		crc ^= *buf++;
 80005ec:	2408      	movs	r4, #8
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4050      	eors	r0, r2
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80005f2:	b246      	sxtb	r6, r0
 80005f4:	0042      	lsls	r2, r0, #1
 80005f6:	b2d0      	uxtb	r0, r2
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	da01      	bge.n	8000600 <ss_crc+0x24>
 80005fc:	406a      	eors	r2, r5
 80005fe:	b2d0      	uxtb	r0, r2
		for (k = 0; k < 8; k++) {
 8000600:	3c01      	subs	r4, #1
 8000602:	2c00      	cmp	r4, #0
 8000604:	d1f5      	bne.n	80005f2 <ss_crc+0x16>
 8000606:	3301      	adds	r3, #1
 8000608:	e7ed      	b.n	80005e6 <ss_crc+0xa>

0800060a <stuff_data>:
}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
	uint8_t i = 1;
	uint8_t last = 0;
 800060a:	2200      	movs	r2, #0
	uint8_t i = 1;
 800060c:	2301      	movs	r3, #1
{
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	1c44      	adds	r4, r0, #1
	for (; i < len; i++) {
 8000612:	428b      	cmp	r3, r1
 8000614:	d301      	bcc.n	800061a <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8000616:	2000      	movs	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 800061a:	7825      	ldrb	r5, [r4, #0]
 800061c:	2d00      	cmp	r5, #0
 800061e:	d102      	bne.n	8000626 <stuff_data+0x1c>
			buf[last] = i - last;
 8000620:	1a9d      	subs	r5, r3, r2
 8000622:	5485      	strb	r5, [r0, r2]
 8000624:	001a      	movs	r2, r3
	for (; i < len; i++) {
 8000626:	3301      	adds	r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	3401      	adds	r4, #1
 800062c:	e7f1      	b.n	8000612 <stuff_data+0x8>

0800062e <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 800062e:	b530      	push	{r4, r5, lr}
	uint8_t next = buf[0];
	buf[0] = 0x00;
 8000630:	2400      	movs	r4, #0
	uint8_t next = buf[0];
 8000632:	7802      	ldrb	r2, [r0, #0]
{
 8000634:	0003      	movs	r3, r0
	buf[0] = 0x00;
 8000636:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0];
 8000638:	0010      	movs	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 800063a:	4288      	cmp	r0, r1
 800063c:	d201      	bcs.n	8000642 <unstuff_data+0x14>
 800063e:	2a00      	cmp	r2, #0
 8000640:	d100      	bne.n	8000644 <unstuff_data+0x16>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 8000642:	bd30      	pop	{r4, r5, pc}
		tmp = buf[next];
 8000644:	5c1a      	ldrb	r2, [r3, r0]
 8000646:	181d      	adds	r5, r3, r0
		next += tmp;
 8000648:	1880      	adds	r0, r0, r2
		buf[next] = FRAME_BYTE;
 800064a:	702c      	strb	r4, [r5, #0]
		next += tmp;
 800064c:	b2c0      	uxtb	r0, r0
 800064e:	e7f4      	b.n	800063a <unstuff_data+0xc>

08000650 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8000650:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8000652:	4e0c      	ldr	r6, [pc, #48]	; (8000684 <simpleserial_addcmd+0x34>)
{
 8000654:	0005      	movs	r5, r0
	if(num_commands >= MAX_SS_CMDS) {
 8000656:	6833      	ldr	r3, [r6, #0]
		putch('a');
 8000658:	2061      	movs	r0, #97	; 0x61
	if(num_commands >= MAX_SS_CMDS) {
 800065a:	2b0f      	cmp	r3, #15
 800065c:	dc02      	bgt.n	8000664 <simpleserial_addcmd+0x14>
		return 1;
	}

	if(len >= MAX_SS_LEN) {
 800065e:	29ff      	cmp	r1, #255	; 0xff
 8000660:	d904      	bls.n	800066c <simpleserial_addcmd+0x1c>
		putch('b');
 8000662:	2062      	movs	r0, #98	; 0x62
 8000664:	f000 f9b6 	bl	80009d4 <putch>
		return 1;
 8000668:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 800066a:	bd70      	pop	{r4, r5, r6, pc}
	commands[num_commands].c   = c;
 800066c:	240c      	movs	r4, #12
 800066e:	435c      	muls	r4, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <simpleserial_addcmd+0x38>)
	num_commands++;
 8000672:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 8000674:	5425      	strb	r5, [r4, r0]
	commands[num_commands].len = len;
 8000676:	1900      	adds	r0, r0, r4
 8000678:	6041      	str	r1, [r0, #4]
	commands[num_commands].fp  = fp;
 800067a:	6082      	str	r2, [r0, #8]
	num_commands++;
 800067c:	6033      	str	r3, [r6, #0]
	return 0;
 800067e:	2000      	movs	r0, #0
 8000680:	e7f3      	b.n	800066a <simpleserial_addcmd+0x1a>
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	20000094 	.word	0x20000094
 8000688:	20000098 	.word	0x20000098

0800068c <simpleserial_init>:
{
 800068c:	b510      	push	{r4, lr}
	simpleserial_addcmd('v', 0, check_version);
 800068e:	2100      	movs	r1, #0
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <simpleserial_init+0x18>)
 8000692:	2076      	movs	r0, #118	; 0x76
 8000694:	f7ff ffdc 	bl	8000650 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8000698:	2100      	movs	r1, #0
 800069a:	2077      	movs	r0, #119	; 0x77
 800069c:	4a02      	ldr	r2, [pc, #8]	; (80006a8 <simpleserial_init+0x1c>)
 800069e:	f7ff ffd7 	bl	8000650 <simpleserial_addcmd>
}
 80006a2:	bd10      	pop	{r4, pc}
 80006a4:	080006fb 	.word	0x080006fb
 80006a8:	08000711 	.word	0x08000711

080006ac <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	b0c0      	sub	sp, #256	; 0x100
 80006b0:	000c      	movs	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 80006b2:	466b      	mov	r3, sp
 80006b4:	2500      	movs	r5, #0
{
 80006b6:	0011      	movs	r1, r2
	data_buf[1] = c;
 80006b8:	7058      	strb	r0, [r3, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 80006ba:	0022      	movs	r2, r4
	data_buf[2] = size;
 80006bc:	709c      	strb	r4, [r3, #2]
	data_buf[0] = 0x00;
 80006be:	701d      	strb	r5, [r3, #0]
		data_buf[i + 3] = output[i];
 80006c0:	1cd8      	adds	r0, r3, #3
 80006c2:	f000 fed1 	bl	8001468 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80006c6:	466b      	mov	r3, sp
 80006c8:	1ca1      	adds	r1, r4, #2
 80006ca:	b2c9      	uxtb	r1, r1
 80006cc:	1c58      	adds	r0, r3, #1
 80006ce:	f7ff ff85 	bl	80005dc <ss_crc>
 80006d2:	0023      	movs	r3, r4
 80006d4:	446b      	add	r3, sp
 80006d6:	70d8      	strb	r0, [r3, #3]
	data_buf[i + 4] = 0x00;
 80006d8:	466b      	mov	r3, sp
 80006da:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 80006dc:	3405      	adds	r4, #5
 80006de:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 80006e0:	559d      	strb	r5, [r3, r6]
	stuff_data(data_buf, i + 5);
 80006e2:	b2e1      	uxtb	r1, r4
 80006e4:	f7ff ff91 	bl	800060a <stuff_data>
	for (int i = 0; i < size + 5; i++) {
		putch(data_buf[i]);
 80006e8:	466b      	mov	r3, sp
 80006ea:	5d58      	ldrb	r0, [r3, r5]
	for (int i = 0; i < size + 5; i++) {
 80006ec:	3501      	adds	r5, #1
		putch(data_buf[i]);
 80006ee:	f000 f971 	bl	80009d4 <putch>
	for (int i = 0; i < size + 5; i++) {
 80006f2:	42ae      	cmp	r6, r5
 80006f4:	daf8      	bge.n	80006e8 <simpleserial_put+0x3c>
	}
}
 80006f6:	b040      	add	sp, #256	; 0x100
 80006f8:	bd70      	pop	{r4, r5, r6, pc}

080006fa <check_version>:
{
 80006fa:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 80006fc:	466b      	mov	r3, sp
 80006fe:	1dda      	adds	r2, r3, #7
 8000700:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 8000702:	2072      	movs	r0, #114	; 0x72
 8000704:	2101      	movs	r1, #1
	uint8_t ver = SS_VER;
 8000706:	7013      	strb	r3, [r2, #0]
	simpleserial_put('r', 1, &ver);
 8000708:	f7ff ffd0 	bl	80006ac <simpleserial_put>
}
 800070c:	2000      	movs	r0, #0
 800070e:	bd0e      	pop	{r1, r2, r3, pc}

08000710 <ss_get_commands>:
{
 8000710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <ss_get_commands+0x34>)
        cmd_chars[i] = commands[i].c;
 8000714:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000716:	6819      	ldr	r1, [r3, #0]
 8000718:	2300      	movs	r3, #0
        cmd_chars[i] = commands[i].c;
 800071a:	480b      	ldr	r0, [pc, #44]	; (8000748 <ss_get_commands+0x38>)
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800071c:	b2ca      	uxtb	r2, r1
 800071e:	4293      	cmp	r3, r2
 8000720:	db07      	blt.n	8000732 <ss_get_commands+0x22>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 8000722:	466a      	mov	r2, sp
 8000724:	2072      	movs	r0, #114	; 0x72
 8000726:	b2c9      	uxtb	r1, r1
 8000728:	f7ff ffc0 	bl	80006ac <simpleserial_put>
}
 800072c:	2000      	movs	r0, #0
 800072e:	b004      	add	sp, #16
 8000730:	bd70      	pop	{r4, r5, r6, pc}
        cmd_chars[i] = commands[i].c;
 8000732:	0025      	movs	r5, r4
 8000734:	466e      	mov	r6, sp
 8000736:	435d      	muls	r5, r3
 8000738:	5c2d      	ldrb	r5, [r5, r0]
 800073a:	54f5      	strb	r5, [r6, r3]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800073c:	3301      	adds	r3, #1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	e7ed      	b.n	800071e <ss_get_commands+0xe>
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000094 	.word	0x20000094
 8000748:	20000098 	.word	0x20000098

0800074c <simpleserial_get>:
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t err = 0;
 800074e:	2500      	movs	r5, #0
{
 8000750:	b0c5      	sub	sp, #276	; 0x114
	uint8_t err = 0;
 8000752:	ab02      	add	r3, sp, #8
 8000754:	1ddf      	adds	r7, r3, #7
 8000756:	703d      	strb	r5, [r7, #0]
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8000758:	f000 f924 	bl	80009a4 <getch>
 800075c:	ac04      	add	r4, sp, #16
 800075e:	5528      	strb	r0, [r5, r4]
		if (data_buf[i] == FRAME_BYTE) {
 8000760:	2800      	cmp	r0, #0
 8000762:	d108      	bne.n	8000776 <simpleserial_get+0x2a>
			err = SS_ERR_FRAME_BYTE;
 8000764:	2305      	movs	r3, #5
		err = SS_ERR_CRC;
 8000766:	703b      	strb	r3, [r7, #0]
	simpleserial_put('e', 0x01, &err);
 8000768:	003a      	movs	r2, r7
 800076a:	2101      	movs	r1, #1
 800076c:	2065      	movs	r0, #101	; 0x65
 800076e:	f7ff ff9d 	bl	80006ac <simpleserial_put>
}
 8000772:	b045      	add	sp, #276	; 0x114
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 0; i < 4; i++) {
 8000776:	3501      	adds	r5, #1
 8000778:	2d04      	cmp	r5, #4
 800077a:	d1ed      	bne.n	8000758 <simpleserial_get+0xc>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 800077c:	0029      	movs	r1, r5
 800077e:	0020      	movs	r0, r4
 8000780:	f7ff ff55 	bl	800062e <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8000784:	2100      	movs	r1, #0
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8000786:	9001      	str	r0, [sp, #4]
		if(commands[c].c == data_buf[1])
 8000788:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <simpleserial_get+0xd8>)
		if(commands[c].c == data_buf[1])
 800078c:	7862      	ldrb	r2, [r4, #1]
	for(c = 0; c < num_commands; c++)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	9100      	str	r1, [sp, #0]
		if(commands[c].c == data_buf[1])
 8000792:	4925      	ldr	r1, [pc, #148]	; (8000828 <simpleserial_get+0xdc>)
	for(c = 0; c < num_commands; c++)
 8000794:	9e00      	ldr	r6, [sp, #0]
 8000796:	429e      	cmp	r6, r3
 8000798:	db02      	blt.n	80007a0 <simpleserial_get+0x54>
	if (c == num_commands) {
 800079a:	d10b      	bne.n	80007b4 <simpleserial_get+0x68>
		err = SS_ERR_CMD;
 800079c:	2301      	movs	r3, #1
 800079e:	e7e2      	b.n	8000766 <simpleserial_get+0x1a>
		if(commands[c].c == data_buf[1])
 80007a0:	9e00      	ldr	r6, [sp, #0]
 80007a2:	4346      	muls	r6, r0
 80007a4:	5c76      	ldrb	r6, [r6, r1]
 80007a6:	4296      	cmp	r6, r2
 80007a8:	d004      	beq.n	80007b4 <simpleserial_get+0x68>
	for(c = 0; c < num_commands; c++)
 80007aa:	9e00      	ldr	r6, [sp, #0]
 80007ac:	3601      	adds	r6, #1
 80007ae:	b2f6      	uxtb	r6, r6
 80007b0:	9600      	str	r6, [sp, #0]
 80007b2:	e7ef      	b.n	8000794 <simpleserial_get+0x48>
	if ((data_buf[3] + 5) < next_frame) {
 80007b4:	78e3      	ldrb	r3, [r4, #3]
 80007b6:	9a01      	ldr	r2, [sp, #4]
 80007b8:	3305      	adds	r3, #5
 80007ba:	4293      	cmp	r3, r2
 80007bc:	da02      	bge.n	80007c4 <simpleserial_get+0x78>
		err = SS_ERR_LEN;
 80007be:	2304      	movs	r3, #4
 80007c0:	e7d1      	b.n	8000766 <simpleserial_get+0x1a>
 80007c2:	0035      	movs	r5, r6
		data_buf[i] = getch();
 80007c4:	f000 f8ee 	bl	80009a4 <getch>
 80007c8:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d0ca      	beq.n	8000764 <simpleserial_get+0x18>
	for (; i < data_buf[3] + 5; i++) {
 80007ce:	78e3      	ldrb	r3, [r4, #3]
 80007d0:	1c6e      	adds	r6, r5, #1
 80007d2:	3304      	adds	r3, #4
 80007d4:	42b3      	cmp	r3, r6
 80007d6:	daf4      	bge.n	80007c2 <simpleserial_get+0x76>
	data_buf[i] = getch();
 80007d8:	f000 f8e4 	bl	80009a4 <getch>
 80007dc:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 80007de:	2800      	cmp	r0, #0
 80007e0:	d1ed      	bne.n	80007be <simpleserial_get+0x72>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 80007e2:	9b01      	ldr	r3, [sp, #4]
 80007e4:	b2f6      	uxtb	r6, r6
 80007e6:	1af1      	subs	r1, r6, r3
 80007e8:	3101      	adds	r1, #1
 80007ea:	b2c9      	uxtb	r1, r1
 80007ec:	18e0      	adds	r0, r4, r3
 80007ee:	f7ff ff1e 	bl	800062e <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 80007f2:	2009      	movs	r0, #9
 80007f4:	ab02      	add	r3, sp, #8
 80007f6:	3e02      	subs	r6, #2
 80007f8:	18c0      	adds	r0, r0, r3
 80007fa:	b2f1      	uxtb	r1, r6
 80007fc:	f7ff feee 	bl	80005dc <ss_crc>
	if (crc != data_buf[i-1]) {
 8000800:	5d63      	ldrb	r3, [r4, r5]
 8000802:	4283      	cmp	r3, r0
 8000804:	d001      	beq.n	800080a <simpleserial_get+0xbe>
		err = SS_ERR_CRC;
 8000806:	2302      	movs	r3, #2
 8000808:	e7ad      	b.n	8000766 <simpleserial_get+0x1a>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 800080a:	78e2      	ldrb	r2, [r4, #3]
 800080c:	78a1      	ldrb	r1, [r4, #2]
 800080e:	7860      	ldrb	r0, [r4, #1]
 8000810:	240c      	movs	r4, #12
 8000812:	9b00      	ldr	r3, [sp, #0]
 8000814:	435c      	muls	r4, r3
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <simpleserial_get+0xdc>)
 8000818:	191b      	adds	r3, r3, r4
 800081a:	689c      	ldr	r4, [r3, #8]
 800081c:	ab05      	add	r3, sp, #20
 800081e:	47a0      	blx	r4
 8000820:	7038      	strb	r0, [r7, #0]
 8000822:	e7a1      	b.n	8000768 <simpleserial_get+0x1c>
 8000824:	20000094 	.word	0x20000094
 8000828:	20000098 	.word	0x20000098

0800082c <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 800082c:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_2;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800082e:	2790      	movs	r7, #144	; 0x90
	GpioInit.Pull      = GPIO_NOPULL;
 8000830:	2400      	movs	r4, #0
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000832:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000834:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_2;
 8000836:	2304      	movs	r3, #4
{
 8000838:	b097      	sub	sp, #92	; 0x5c
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800083a:	05ff      	lsls	r7, r7, #23
 800083c:	0038      	movs	r0, r7
 800083e:	a905      	add	r1, sp, #20
	GpioInit.Pin       = GPIO_PIN_2;
 8000840:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000842:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 8000844:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000846:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000848:	f000 fb46 	bl	8000ed8 <HAL_GPIO_Init>
    
	GpioInit.Pin       = GPIO_PIN_4;
 800084c:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800084e:	a905      	add	r1, sp, #20
 8000850:	0038      	movs	r0, r7
	GpioInit.Pin       = GPIO_PIN_4;
 8000852:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000854:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 8000856:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000858:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800085a:	f000 fb3d 	bl	8000ed8 <HAL_GPIO_Init>
  uint32_t flash_latency = 0;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800085e:	2305      	movs	r3, #5
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000860:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000862:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000864:	960a      	str	r6, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000866:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000868:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800086a:	f000 f8c9 	bl	8000a00 <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800086e:	2307      	movs	r3, #7
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000870:	0021      	movs	r1, r4
 8000872:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000874:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000876:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000878:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087a:	9404      	str	r4, [sp, #16]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800087c:	f000 faa2 	bl	8000dc4 <HAL_RCC_ClockConfig>
#endif
}
 8000880:	b017      	add	sp, #92	; 0x5c
 8000882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000884 <init_uart>:

void init_uart(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	2180      	movs	r1, #128	; 0x80
{
 8000886:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4c1b      	ldr	r4, [pc, #108]	; (80008f8 <init_uart+0x74>)
 800088a:	0289      	lsls	r1, r1, #10
 800088c:	6962      	ldr	r2, [r4, #20]
{
 800088e:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	430a      	orrs	r2, r1
 8000892:	6162      	str	r2, [r4, #20]
 8000894:	6963      	ldr	r3, [r4, #20]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	GpioInit.Alternate = GPIO_AF1_USART1;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000896:	2090      	movs	r0, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	400b      	ands	r3, r1
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	9b01      	ldr	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 800089e:	23c0      	movs	r3, #192	; 0xc0
 80008a0:	00db      	lsls	r3, r3, #3
	GpioInit.Pull      = GPIO_PULLUP;
 80008a2:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80008a4:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80008a6:	9303      	str	r3, [sp, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80008aa:	a903      	add	r1, sp, #12
 80008ac:	05c0      	lsls	r0, r0, #23
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 80008ae:	9304      	str	r3, [sp, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 80008b0:	9505      	str	r5, [sp, #20]
	GpioInit.Alternate = GPIO_AF1_USART1;
 80008b2:	9507      	str	r5, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80008b4:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80008b6:	f000 fb0f 	bl	8000ed8 <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 80008ba:	2180      	movs	r1, #128	; 0x80
 80008bc:	69a2      	ldr	r2, [r4, #24]
 80008be:	01c9      	lsls	r1, r1, #7
 80008c0:	430a      	orrs	r2, r1
 80008c2:	61a2      	str	r2, [r4, #24]
 80008c4:	69a3      	ldr	r3, [r4, #24]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
	UartHandle.Instance        = USART1;
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <init_uart+0x78>)
	__HAL_RCC_USART1_CLK_ENABLE();
 80008c8:	400b      	ands	r3, r1
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80008ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008d0:	43b3      	bics	r3, r6
 80008d2:	431d      	orrs	r5, r3
	UartHandle.Instance        = USART1;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <init_uart+0x7c>)
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80008d6:	6325      	str	r5, [r4, #48]	; 0x30
	UartHandle.Instance        = USART1;
 80008d8:	6003      	str	r3, [r0, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 80008da:	23e1      	movs	r3, #225	; 0xe1
 80008dc:	029b      	lsls	r3, r3, #10
 80008de:	6043      	str	r3, [r0, #4]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80008e0:	2300      	movs	r3, #0
 80008e2:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80008e4:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80008e6:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80008e8:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80008ea:	330c      	adds	r3, #12
 80008ec:	6143      	str	r3, [r0, #20]
	HAL_UART_Init(&UartHandle);
 80008ee:	f000 fc5d 	bl	80011ac <HAL_UART_Init>
}
 80008f2:	b008      	add	sp, #32
 80008f4:	bd70      	pop	{r4, r5, r6, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40021000 	.word	0x40021000
 80008fc:	20000158 	.word	0x20000158
 8000900:	40013800 	.word	0x40013800

08000904 <trigger_setup>:

void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	2080      	movs	r0, #128	; 0x80
 8000906:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <trigger_setup+0x7c>)
{
 8000908:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	6951      	ldr	r1, [r2, #20]
 800090c:	0280      	lsls	r0, r0, #10
 800090e:	4301      	orrs	r1, r0
 8000910:	6151      	str	r1, [r2, #20]
 8000912:	6953      	ldr	r3, [r2, #20]
{
 8000914:	b087      	sub	sp, #28
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4003      	ands	r3, r0
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_7;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000918:	2490      	movs	r4, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	9300      	str	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800091c:	2501      	movs	r5, #1
	GpioInit.Pull      = GPIO_NOPULL;
 800091e:	2600      	movs	r6, #0
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000920:	2703      	movs	r7, #3
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Pin       = GPIO_PIN_7;
 8000924:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000926:	05e4      	lsls	r4, r4, #23
 8000928:	0020      	movs	r0, r4
 800092a:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_7;
 800092c:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800092e:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8000930:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000932:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000934:	f000 fad0 	bl	8000ed8 <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_4;
 8000938:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800093a:	0020      	movs	r0, r4
 800093c:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_4;
 800093e:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000940:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8000942:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000944:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000946:	f000 fac7 	bl	8000ed8 <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_2;
 800094a:	2304      	movs	r3, #4
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800094c:	0020      	movs	r0, r4
 800094e:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_2;
 8000950:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000952:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8000954:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000956:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000958:	f000 fabe 	bl	8000ed8 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800095c:	0032      	movs	r2, r6
 800095e:	0020      	movs	r0, r4
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	f000 fb6b 	bl	800103c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000966:	002a      	movs	r2, r5
 8000968:	0020      	movs	r0, r4
 800096a:	2110      	movs	r1, #16
 800096c:	f000 fb66 	bl	800103c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000970:	002a      	movs	r2, r5
 8000972:	2104      	movs	r1, #4
 8000974:	0020      	movs	r0, r4
 8000976:	f000 fb61 	bl	800103c <HAL_GPIO_WritePin>
}
 800097a:	b007      	add	sp, #28
 800097c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40021000 	.word	0x40021000

08000984 <trigger_high>:

void trigger_high(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000984:	2090      	movs	r0, #144	; 0x90
{
 8000986:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	05c0      	lsls	r0, r0, #23
 800098e:	f000 fb55 	bl	800103c <HAL_GPIO_WritePin>
}
 8000992:	bd10      	pop	{r4, pc}

08000994 <trigger_low>:

void trigger_low(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000994:	2090      	movs	r0, #144	; 0x90
{
 8000996:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	05c0      	lsls	r0, r0, #23
 800099e:	f000 fb4d 	bl	800103c <HAL_GPIO_WritePin>
}   
 80009a2:	bd10      	pop	{r4, pc}

080009a4 <getch>:

char getch(void)
{
 80009a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t d;
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80009a6:	2508      	movs	r5, #8
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
 80009a8:	466b      	mov	r3, sp
 80009aa:	1ddc      	adds	r4, r3, #7
 80009ac:	2201      	movs	r2, #1
 80009ae:	2332      	movs	r3, #50	; 0x32
 80009b0:	0021      	movs	r1, r4
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <getch+0x28>)
 80009b4:	f000 fc2c 	bl	8001210 <HAL_UART_Receive>
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d101      	bne.n	80009c0 <getch+0x1c>
	return d;
 80009bc:	7820      	ldrb	r0, [r4, #0]
}
 80009be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80009c0:	4a03      	ldr	r2, [pc, #12]	; (80009d0 <getch+0x2c>)
 80009c2:	6a13      	ldr	r3, [r2, #32]
 80009c4:	432b      	orrs	r3, r5
 80009c6:	6213      	str	r3, [r2, #32]
 80009c8:	e7ee      	b.n	80009a8 <getch+0x4>
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	20000158 	.word	0x20000158
 80009d0:	40013800 	.word	0x40013800

080009d4 <putch>:

void putch(char c)
{
 80009d4:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
 80009d6:	466b      	mov	r3, sp
 80009d8:	1dd9      	adds	r1, r3, #7
 80009da:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80009dc:	2201      	movs	r2, #1
 80009de:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <putch+0x14>)
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <putch+0x18>)
 80009e2:	f000 fc8d 	bl	8001300 <HAL_UART_Transmit>
}
 80009e6:	bd07      	pop	{r0, r1, r2, pc}
 80009e8:	00001388 	.word	0x00001388
 80009ec:	20000158 	.word	0x20000158

080009f0 <HAL_GetTick>:
#define assert_param(expr) ((void)0U)

uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <HAL_GetTick+0xc>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	1c42      	adds	r2, r0, #1
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	4770      	bx	lr
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	200001c8 	.word	0x200001c8

08000a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a02:	6803      	ldr	r3, [r0, #0]
{
 8000a04:	0004      	movs	r4, r0
 8000a06:	b085      	sub	sp, #20
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a08:	07db      	lsls	r3, r3, #31
 8000a0a:	d42f      	bmi.n	8000a6c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	079b      	lsls	r3, r3, #30
 8000a10:	d500      	bpl.n	8000a14 <HAL_RCC_OscConfig+0x14>
 8000a12:	e081      	b.n	8000b18 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a14:	6823      	ldr	r3, [r4, #0]
 8000a16:	071b      	lsls	r3, r3, #28
 8000a18:	d500      	bpl.n	8000a1c <HAL_RCC_OscConfig+0x1c>
 8000a1a:	e0bc      	b.n	8000b96 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a1c:	6823      	ldr	r3, [r4, #0]
 8000a1e:	075b      	lsls	r3, r3, #29
 8000a20:	d500      	bpl.n	8000a24 <HAL_RCC_OscConfig+0x24>
 8000a22:	e0df      	b.n	8000be4 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000a24:	6823      	ldr	r3, [r4, #0]
 8000a26:	06db      	lsls	r3, r3, #27
 8000a28:	d51a      	bpl.n	8000a60 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000a2a:	6962      	ldr	r2, [r4, #20]
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	4db5      	ldr	r5, [pc, #724]	; (8000d04 <HAL_RCC_OscConfig+0x304>)
 8000a30:	2a01      	cmp	r2, #1
 8000a32:	d000      	beq.n	8000a36 <HAL_RCC_OscConfig+0x36>
 8000a34:	e14a      	b.n	8000ccc <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a36:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a38:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a3a:	430b      	orrs	r3, r1
 8000a3c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000a3e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a40:	431a      	orrs	r2, r3
 8000a42:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a44:	f7ff ffd4 	bl	80009f0 <HAL_GetTick>
 8000a48:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a4a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a4c:	423b      	tst	r3, r7
 8000a4e:	d100      	bne.n	8000a52 <HAL_RCC_OscConfig+0x52>
 8000a50:	e135      	b.n	8000cbe <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000a52:	21f8      	movs	r1, #248	; 0xf8
 8000a54:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000a56:	69a3      	ldr	r3, [r4, #24]
 8000a58:	438a      	bics	r2, r1
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a60:	6a21      	ldr	r1, [r4, #32]
 8000a62:	2900      	cmp	r1, #0
 8000a64:	d000      	beq.n	8000a68 <HAL_RCC_OscConfig+0x68>
 8000a66:	e159      	b.n	8000d1c <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000a68:	2000      	movs	r0, #0
 8000a6a:	e013      	b.n	8000a94 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a6c:	210c      	movs	r1, #12
 8000a6e:	4da5      	ldr	r5, [pc, #660]	; (8000d04 <HAL_RCC_OscConfig+0x304>)
 8000a70:	686a      	ldr	r2, [r5, #4]
 8000a72:	400a      	ands	r2, r1
 8000a74:	2a04      	cmp	r2, #4
 8000a76:	d006      	beq.n	8000a86 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a78:	686b      	ldr	r3, [r5, #4]
 8000a7a:	400b      	ands	r3, r1
 8000a7c:	2b08      	cmp	r3, #8
 8000a7e:	d10b      	bne.n	8000a98 <HAL_RCC_OscConfig+0x98>
 8000a80:	686b      	ldr	r3, [r5, #4]
 8000a82:	03db      	lsls	r3, r3, #15
 8000a84:	d508      	bpl.n	8000a98 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a86:	682b      	ldr	r3, [r5, #0]
 8000a88:	039b      	lsls	r3, r3, #14
 8000a8a:	d5bf      	bpl.n	8000a0c <HAL_RCC_OscConfig+0xc>
 8000a8c:	6863      	ldr	r3, [r4, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1bc      	bne.n	8000a0c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000a92:	2001      	movs	r0, #1
}
 8000a94:	b005      	add	sp, #20
 8000a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a98:	6863      	ldr	r3, [r4, #4]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d113      	bne.n	8000ac6 <HAL_RCC_OscConfig+0xc6>
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	682a      	ldr	r2, [r5, #0]
 8000aa2:	025b      	lsls	r3, r3, #9
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000aa8:	f7ff ffa2 	bl	80009f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aac:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000aae:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab0:	02bf      	lsls	r7, r7, #10
 8000ab2:	682b      	ldr	r3, [r5, #0]
 8000ab4:	423b      	tst	r3, r7
 8000ab6:	d1a9      	bne.n	8000a0c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ab8:	f7ff ff9a 	bl	80009f0 <HAL_GetTick>
 8000abc:	1b80      	subs	r0, r0, r6
 8000abe:	2864      	cmp	r0, #100	; 0x64
 8000ac0:	d9f7      	bls.n	8000ab2 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	e7e6      	b.n	8000a94 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d116      	bne.n	8000af8 <HAL_RCC_OscConfig+0xf8>
 8000aca:	682b      	ldr	r3, [r5, #0]
 8000acc:	4a8e      	ldr	r2, [pc, #568]	; (8000d08 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ace:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	602b      	str	r3, [r5, #0]
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	4a8d      	ldr	r2, [pc, #564]	; (8000d0c <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ad8:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ada:	4013      	ands	r3, r2
 8000adc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ade:	f7ff ff87 	bl	80009f0 <HAL_GetTick>
 8000ae2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ae4:	682b      	ldr	r3, [r5, #0]
 8000ae6:	423b      	tst	r3, r7
 8000ae8:	d100      	bne.n	8000aec <HAL_RCC_OscConfig+0xec>
 8000aea:	e78f      	b.n	8000a0c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aec:	f7ff ff80 	bl	80009f0 <HAL_GetTick>
 8000af0:	1b80      	subs	r0, r0, r6
 8000af2:	2864      	cmp	r0, #100	; 0x64
 8000af4:	d9f6      	bls.n	8000ae4 <HAL_RCC_OscConfig+0xe4>
 8000af6:	e7e4      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af8:	2b05      	cmp	r3, #5
 8000afa:	d105      	bne.n	8000b08 <HAL_RCC_OscConfig+0x108>
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	682a      	ldr	r2, [r5, #0]
 8000b00:	02db      	lsls	r3, r3, #11
 8000b02:	4313      	orrs	r3, r2
 8000b04:	602b      	str	r3, [r5, #0]
 8000b06:	e7ca      	b.n	8000a9e <HAL_RCC_OscConfig+0x9e>
 8000b08:	682b      	ldr	r3, [r5, #0]
 8000b0a:	4a7f      	ldr	r2, [pc, #508]	; (8000d08 <HAL_RCC_OscConfig+0x308>)
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	602b      	str	r3, [r5, #0]
 8000b10:	682b      	ldr	r3, [r5, #0]
 8000b12:	4a7e      	ldr	r2, [pc, #504]	; (8000d0c <HAL_RCC_OscConfig+0x30c>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	e7c6      	b.n	8000aa6 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b18:	220c      	movs	r2, #12
 8000b1a:	4d7a      	ldr	r5, [pc, #488]	; (8000d04 <HAL_RCC_OscConfig+0x304>)
 8000b1c:	686b      	ldr	r3, [r5, #4]
 8000b1e:	4213      	tst	r3, r2
 8000b20:	d006      	beq.n	8000b30 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b22:	686b      	ldr	r3, [r5, #4]
 8000b24:	4013      	ands	r3, r2
 8000b26:	2b08      	cmp	r3, #8
 8000b28:	d110      	bne.n	8000b4c <HAL_RCC_OscConfig+0x14c>
 8000b2a:	686b      	ldr	r3, [r5, #4]
 8000b2c:	03db      	lsls	r3, r3, #15
 8000b2e:	d40d      	bmi.n	8000b4c <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b30:	682b      	ldr	r3, [r5, #0]
 8000b32:	079b      	lsls	r3, r3, #30
 8000b34:	d502      	bpl.n	8000b3c <HAL_RCC_OscConfig+0x13c>
 8000b36:	68e3      	ldr	r3, [r4, #12]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d1aa      	bne.n	8000a92 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3c:	21f8      	movs	r1, #248	; 0xf8
 8000b3e:	682a      	ldr	r2, [r5, #0]
 8000b40:	6923      	ldr	r3, [r4, #16]
 8000b42:	438a      	bics	r2, r1
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	602b      	str	r3, [r5, #0]
 8000b4a:	e763      	b.n	8000a14 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b4c:	68e2      	ldr	r2, [r4, #12]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	d00f      	beq.n	8000b74 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000b54:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b56:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b5c:	f7ff ff48 	bl	80009f0 <HAL_GetTick>
 8000b60:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b62:	682b      	ldr	r3, [r5, #0]
 8000b64:	423b      	tst	r3, r7
 8000b66:	d1e9      	bne.n	8000b3c <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b68:	f7ff ff42 	bl	80009f0 <HAL_GetTick>
 8000b6c:	1b80      	subs	r0, r0, r6
 8000b6e:	2802      	cmp	r0, #2
 8000b70:	d9f7      	bls.n	8000b62 <HAL_RCC_OscConfig+0x162>
 8000b72:	e7a6      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000b74:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b76:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000b78:	439a      	bics	r2, r3
 8000b7a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000b7c:	f7ff ff38 	bl	80009f0 <HAL_GetTick>
 8000b80:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b82:	682b      	ldr	r3, [r5, #0]
 8000b84:	423b      	tst	r3, r7
 8000b86:	d100      	bne.n	8000b8a <HAL_RCC_OscConfig+0x18a>
 8000b88:	e744      	b.n	8000a14 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b8a:	f7ff ff31 	bl	80009f0 <HAL_GetTick>
 8000b8e:	1b80      	subs	r0, r0, r6
 8000b90:	2802      	cmp	r0, #2
 8000b92:	d9f6      	bls.n	8000b82 <HAL_RCC_OscConfig+0x182>
 8000b94:	e795      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b96:	69e2      	ldr	r2, [r4, #28]
 8000b98:	2301      	movs	r3, #1
 8000b9a:	4d5a      	ldr	r5, [pc, #360]	; (8000d04 <HAL_RCC_OscConfig+0x304>)
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	d010      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000ba0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ba2:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000ba8:	f7ff ff22 	bl	80009f0 <HAL_GetTick>
 8000bac:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000bb0:	423b      	tst	r3, r7
 8000bb2:	d000      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x1b6>
 8000bb4:	e732      	b.n	8000a1c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bb6:	f7ff ff1b 	bl	80009f0 <HAL_GetTick>
 8000bba:	1b80      	subs	r0, r0, r6
 8000bbc:	2802      	cmp	r0, #2
 8000bbe:	d9f6      	bls.n	8000bae <HAL_RCC_OscConfig+0x1ae>
 8000bc0:	e77f      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000bc2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bc4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000bc6:	439a      	bics	r2, r3
 8000bc8:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000bca:	f7ff ff11 	bl	80009f0 <HAL_GetTick>
 8000bce:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000bd2:	423b      	tst	r3, r7
 8000bd4:	d100      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x1d8>
 8000bd6:	e721      	b.n	8000a1c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bd8:	f7ff ff0a 	bl	80009f0 <HAL_GetTick>
 8000bdc:	1b80      	subs	r0, r0, r6
 8000bde:	2802      	cmp	r0, #2
 8000be0:	d9f6      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x1d0>
 8000be2:	e76e      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000be4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000be6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000be8:	4d46      	ldr	r5, [pc, #280]	; (8000d04 <HAL_RCC_OscConfig+0x304>)
 8000bea:	0552      	lsls	r2, r2, #21
 8000bec:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000bee:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bf0:	4213      	tst	r3, r2
 8000bf2:	d108      	bne.n	8000c06 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bf4:	69eb      	ldr	r3, [r5, #28]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61eb      	str	r3, [r5, #28]
 8000bfa:	69eb      	ldr	r3, [r5, #28]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	9303      	str	r3, [sp, #12]
 8000c00:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000c02:	2301      	movs	r3, #1
 8000c04:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c06:	2780      	movs	r7, #128	; 0x80
 8000c08:	4e41      	ldr	r6, [pc, #260]	; (8000d10 <HAL_RCC_OscConfig+0x310>)
 8000c0a:	007f      	lsls	r7, r7, #1
 8000c0c:	6833      	ldr	r3, [r6, #0]
 8000c0e:	423b      	tst	r3, r7
 8000c10:	d006      	beq.n	8000c20 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c12:	68a3      	ldr	r3, [r4, #8]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d113      	bne.n	8000c40 <HAL_RCC_OscConfig+0x240>
 8000c18:	6a2a      	ldr	r2, [r5, #32]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	622b      	str	r3, [r5, #32]
 8000c1e:	e030      	b.n	8000c82 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c20:	6833      	ldr	r3, [r6, #0]
 8000c22:	433b      	orrs	r3, r7
 8000c24:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c26:	f7ff fee3 	bl	80009f0 <HAL_GetTick>
 8000c2a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c2c:	6833      	ldr	r3, [r6, #0]
 8000c2e:	423b      	tst	r3, r7
 8000c30:	d1ef      	bne.n	8000c12 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c32:	f7ff fedd 	bl	80009f0 <HAL_GetTick>
 8000c36:	9b01      	ldr	r3, [sp, #4]
 8000c38:	1ac0      	subs	r0, r0, r3
 8000c3a:	2864      	cmp	r0, #100	; 0x64
 8000c3c:	d9f6      	bls.n	8000c2c <HAL_RCC_OscConfig+0x22c>
 8000c3e:	e740      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d114      	bne.n	8000c70 <HAL_RCC_OscConfig+0x270>
 8000c46:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c48:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c4a:	4393      	bics	r3, r2
 8000c4c:	622b      	str	r3, [r5, #32]
 8000c4e:	6a2b      	ldr	r3, [r5, #32]
 8000c50:	3203      	adds	r2, #3
 8000c52:	4393      	bics	r3, r2
 8000c54:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000c56:	f7ff fecb 	bl	80009f0 <HAL_GetTick>
 8000c5a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c5c:	6a2b      	ldr	r3, [r5, #32]
 8000c5e:	423b      	tst	r3, r7
 8000c60:	d016      	beq.n	8000c90 <HAL_RCC_OscConfig+0x290>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c62:	f7ff fec5 	bl	80009f0 <HAL_GetTick>
 8000c66:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <HAL_RCC_OscConfig+0x314>)
 8000c68:	1b80      	subs	r0, r0, r6
 8000c6a:	4298      	cmp	r0, r3
 8000c6c:	d9f6      	bls.n	8000c5c <HAL_RCC_OscConfig+0x25c>
 8000c6e:	e728      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	d116      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x2a2>
 8000c74:	6a29      	ldr	r1, [r5, #32]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	622b      	str	r3, [r5, #32]
 8000c7c:	6a2b      	ldr	r3, [r5, #32]
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8000c82:	f7ff feb5 	bl	80009f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c86:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000c88:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c8a:	6a2b      	ldr	r3, [r5, #32]
 8000c8c:	423b      	tst	r3, r7
 8000c8e:	d00f      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8000c90:	9b00      	ldr	r3, [sp, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d000      	beq.n	8000c98 <HAL_RCC_OscConfig+0x298>
 8000c96:	e6c5      	b.n	8000a24 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c98:	69eb      	ldr	r3, [r5, #28]
 8000c9a:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <HAL_RCC_OscConfig+0x318>)
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61eb      	str	r3, [r5, #28]
 8000ca0:	e6c0      	b.n	8000a24 <HAL_RCC_OscConfig+0x24>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca2:	6a2b      	ldr	r3, [r5, #32]
 8000ca4:	4393      	bics	r3, r2
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	622b      	str	r3, [r5, #32]
 8000caa:	6a2b      	ldr	r3, [r5, #32]
 8000cac:	4393      	bics	r3, r2
 8000cae:	e7b5      	b.n	8000c1c <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cb0:	f7ff fe9e 	bl	80009f0 <HAL_GetTick>
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_RCC_OscConfig+0x314>)
 8000cb6:	1b80      	subs	r0, r0, r6
 8000cb8:	4298      	cmp	r0, r3
 8000cba:	d9e6      	bls.n	8000c8a <HAL_RCC_OscConfig+0x28a>
 8000cbc:	e701      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cbe:	f7ff fe97 	bl	80009f0 <HAL_GetTick>
 8000cc2:	1b80      	subs	r0, r0, r6
 8000cc4:	2802      	cmp	r0, #2
 8000cc6:	d800      	bhi.n	8000cca <HAL_RCC_OscConfig+0x2ca>
 8000cc8:	e6bf      	b.n	8000a4a <HAL_RCC_OscConfig+0x4a>
 8000cca:	e6fa      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ccc:	3205      	adds	r2, #5
 8000cce:	d103      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000cd0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000cd2:	439a      	bics	r2, r3
 8000cd4:	636a      	str	r2, [r5, #52]	; 0x34
 8000cd6:	e6bc      	b.n	8000a52 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cd8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cda:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cdc:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000cde:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ce0:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000ce2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ce4:	4393      	bics	r3, r2
 8000ce6:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ce8:	f7ff fe82 	bl	80009f0 <HAL_GetTick>
 8000cec:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000cf0:	423b      	tst	r3, r7
 8000cf2:	d100      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x2f6>
 8000cf4:	e6b4      	b.n	8000a60 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cf6:	f7ff fe7b 	bl	80009f0 <HAL_GetTick>
 8000cfa:	1b80      	subs	r0, r0, r6
 8000cfc:	2802      	cmp	r0, #2
 8000cfe:	d9f6      	bls.n	8000cee <HAL_RCC_OscConfig+0x2ee>
 8000d00:	e6df      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40021000 	.word	0x40021000
 8000d08:	fffeffff 	.word	0xfffeffff
 8000d0c:	fffbffff 	.word	0xfffbffff
 8000d10:	40007000 	.word	0x40007000
 8000d14:	00001388 	.word	0x00001388
 8000d18:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d1c:	220c      	movs	r2, #12
 8000d1e:	4d26      	ldr	r5, [pc, #152]	; (8000db8 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000d20:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d22:	686b      	ldr	r3, [r5, #4]
 8000d24:	4013      	ands	r3, r2
 8000d26:	2b08      	cmp	r3, #8
 8000d28:	d100      	bne.n	8000d2c <HAL_RCC_OscConfig+0x32c>
 8000d2a:	e6b3      	b.n	8000a94 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000d2c:	682b      	ldr	r3, [r5, #0]
 8000d2e:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <HAL_RCC_OscConfig+0x3bc>)
 8000d30:	4013      	ands	r3, r2
 8000d32:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d34:	2902      	cmp	r1, #2
 8000d36:	d12f      	bne.n	8000d98 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000d38:	f7ff fe5a 	bl	80009f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d3c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000d3e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d40:	04bf      	lsls	r7, r7, #18
 8000d42:	682b      	ldr	r3, [r5, #0]
 8000d44:	423b      	tst	r3, r7
 8000d46:	d121      	bne.n	8000d8c <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d48:	220f      	movs	r2, #15
 8000d4a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d4c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d4e:	4393      	bics	r3, r2
 8000d50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d52:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d54:	4313      	orrs	r3, r2
 8000d56:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000d58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000d5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d5c:	686a      	ldr	r2, [r5, #4]
 8000d5e:	430b      	orrs	r3, r1
 8000d60:	4917      	ldr	r1, [pc, #92]	; (8000dc0 <HAL_RCC_OscConfig+0x3c0>)
 8000d62:	400a      	ands	r2, r1
 8000d64:	4313      	orrs	r3, r2
 8000d66:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	682a      	ldr	r2, [r5, #0]
 8000d6c:	045b      	lsls	r3, r3, #17
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d72:	f7ff fe3d 	bl	80009f0 <HAL_GetTick>
 8000d76:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d78:	682b      	ldr	r3, [r5, #0]
 8000d7a:	4233      	tst	r3, r6
 8000d7c:	d000      	beq.n	8000d80 <HAL_RCC_OscConfig+0x380>
 8000d7e:	e673      	b.n	8000a68 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d80:	f7ff fe36 	bl	80009f0 <HAL_GetTick>
 8000d84:	1b00      	subs	r0, r0, r4
 8000d86:	2802      	cmp	r0, #2
 8000d88:	d9f6      	bls.n	8000d78 <HAL_RCC_OscConfig+0x378>
 8000d8a:	e69a      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d8c:	f7ff fe30 	bl	80009f0 <HAL_GetTick>
 8000d90:	1b80      	subs	r0, r0, r6
 8000d92:	2802      	cmp	r0, #2
 8000d94:	d9d5      	bls.n	8000d42 <HAL_RCC_OscConfig+0x342>
 8000d96:	e694      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000d98:	f7ff fe2a 	bl	80009f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d9c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000d9e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000da0:	04b6      	lsls	r6, r6, #18
 8000da2:	682b      	ldr	r3, [r5, #0]
 8000da4:	4233      	tst	r3, r6
 8000da6:	d100      	bne.n	8000daa <HAL_RCC_OscConfig+0x3aa>
 8000da8:	e65e      	b.n	8000a68 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000daa:	f7ff fe21 	bl	80009f0 <HAL_GetTick>
 8000dae:	1b00      	subs	r0, r0, r4
 8000db0:	2802      	cmp	r0, #2
 8000db2:	d9f6      	bls.n	8000da2 <HAL_RCC_OscConfig+0x3a2>
 8000db4:	e685      	b.n	8000ac2 <HAL_RCC_OscConfig+0xc2>
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	feffffff 	.word	0xfeffffff
 8000dc0:	ffc2ffff 	.word	0xffc2ffff

08000dc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4d3e      	ldr	r5, [pc, #248]	; (8000ec4 <HAL_RCC_ClockConfig+0x100>)
{
 8000dca:	0004      	movs	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dcc:	682b      	ldr	r3, [r5, #0]
{
 8000dce:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d312      	bcc.n	8000dfc <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dd6:	6822      	ldr	r2, [r4, #0]
 8000dd8:	0793      	lsls	r3, r2, #30
 8000dda:	d419      	bmi.n	8000e10 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ddc:	07d3      	lsls	r3, r2, #31
 8000dde:	d41f      	bmi.n	8000e20 <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000de0:	2301      	movs	r3, #1
 8000de2:	682a      	ldr	r2, [r5, #0]
 8000de4:	401a      	ands	r2, r3
 8000de6:	42ba      	cmp	r2, r7
 8000de8:	d85d      	bhi.n	8000ea6 <HAL_RCC_ClockConfig+0xe2>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	075b      	lsls	r3, r3, #29
 8000dee:	d461      	bmi.n	8000eb4 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /* Update the SystemCoreClock global variable */
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
  SystemCoreClock = 7372800;
 8000df0:	22e1      	movs	r2, #225	; 0xe1
 8000df2:	4b35      	ldr	r3, [pc, #212]	; (8000ec8 <HAL_RCC_ClockConfig+0x104>)
 8000df4:	03d2      	lsls	r2, r2, #15
  
  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8000df6:	2000      	movs	r0, #0
  SystemCoreClock = 7372800;
 8000df8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	4393      	bics	r3, r2
 8000e00:	430b      	orrs	r3, r1
 8000e02:	602b      	str	r3, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e04:	682b      	ldr	r3, [r5, #0]
 8000e06:	4013      	ands	r3, r2
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d0e4      	beq.n	8000dd6 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000e0c:	2001      	movs	r0, #1
}
 8000e0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e10:	20f0      	movs	r0, #240	; 0xf0
 8000e12:	492e      	ldr	r1, [pc, #184]	; (8000ecc <HAL_RCC_ClockConfig+0x108>)
 8000e14:	684b      	ldr	r3, [r1, #4]
 8000e16:	4383      	bics	r3, r0
 8000e18:	68a0      	ldr	r0, [r4, #8]
 8000e1a:	4303      	orrs	r3, r0
 8000e1c:	604b      	str	r3, [r1, #4]
 8000e1e:	e7dd      	b.n	8000ddc <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e20:	4e2a      	ldr	r6, [pc, #168]	; (8000ecc <HAL_RCC_ClockConfig+0x108>)
 8000e22:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e24:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e26:	2a01      	cmp	r2, #1
 8000e28:	d11a      	bne.n	8000e60 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2a:	039b      	lsls	r3, r3, #14
 8000e2c:	d5ee      	bpl.n	8000e0c <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e2e:	2103      	movs	r1, #3
 8000e30:	6873      	ldr	r3, [r6, #4]
 8000e32:	438b      	bics	r3, r1
 8000e34:	4313      	orrs	r3, r2
 8000e36:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000e38:	f7ff fdda 	bl	80009f0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e3c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000e3e:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d115      	bne.n	8000e70 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e44:	220c      	movs	r2, #12
 8000e46:	6873      	ldr	r3, [r6, #4]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	d0c8      	beq.n	8000de0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e4e:	f7ff fdcf 	bl	80009f0 <HAL_GetTick>
 8000e52:	9b01      	ldr	r3, [sp, #4]
 8000e54:	1ac0      	subs	r0, r0, r3
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <HAL_RCC_ClockConfig+0x10c>)
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	d9f3      	bls.n	8000e44 <HAL_RCC_ClockConfig+0x80>
          return HAL_TIMEOUT;
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	e7d6      	b.n	8000e0e <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e60:	2a02      	cmp	r2, #2
 8000e62:	d102      	bne.n	8000e6a <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	d4e2      	bmi.n	8000e2e <HAL_RCC_ClockConfig+0x6a>
 8000e68:	e7d0      	b.n	8000e0c <HAL_RCC_ClockConfig+0x48>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6a:	079b      	lsls	r3, r3, #30
 8000e6c:	d4df      	bmi.n	8000e2e <HAL_RCC_ClockConfig+0x6a>
 8000e6e:	e7cd      	b.n	8000e0c <HAL_RCC_ClockConfig+0x48>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d012      	beq.n	8000e9a <HAL_RCC_ClockConfig+0xd6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e74:	220c      	movs	r2, #12
 8000e76:	6873      	ldr	r3, [r6, #4]
 8000e78:	4213      	tst	r3, r2
 8000e7a:	d0b1      	beq.n	8000de0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7c:	f7ff fdb8 	bl	80009f0 <HAL_GetTick>
 8000e80:	9b01      	ldr	r3, [sp, #4]
 8000e82:	1ac0      	subs	r0, r0, r3
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_RCC_ClockConfig+0x10c>)
 8000e86:	4298      	cmp	r0, r3
 8000e88:	d9f4      	bls.n	8000e74 <HAL_RCC_ClockConfig+0xb0>
 8000e8a:	e7e7      	b.n	8000e5c <HAL_RCC_ClockConfig+0x98>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e8c:	f7ff fdb0 	bl	80009f0 <HAL_GetTick>
 8000e90:	9b01      	ldr	r3, [sp, #4]
 8000e92:	1ac0      	subs	r0, r0, r3
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_RCC_ClockConfig+0x10c>)
 8000e96:	4298      	cmp	r0, r3
 8000e98:	d8e0      	bhi.n	8000e5c <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	6873      	ldr	r3, [r6, #4]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b08      	cmp	r3, #8
 8000ea2:	d1f3      	bne.n	8000e8c <HAL_RCC_ClockConfig+0xc8>
 8000ea4:	e79c      	b.n	8000de0 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea6:	682a      	ldr	r2, [r5, #0]
 8000ea8:	439a      	bics	r2, r3
 8000eaa:	602a      	str	r2, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eac:	682a      	ldr	r2, [r5, #0]
 8000eae:	421a      	tst	r2, r3
 8000eb0:	d09b      	beq.n	8000dea <HAL_RCC_ClockConfig+0x26>
 8000eb2:	e7ab      	b.n	8000e0c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000eb4:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <HAL_RCC_ClockConfig+0x108>)
 8000eb6:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <HAL_RCC_ClockConfig+0x110>)
 8000eb8:	6853      	ldr	r3, [r2, #4]
 8000eba:	400b      	ands	r3, r1
 8000ebc:	68e1      	ldr	r1, [r4, #12]
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	6053      	str	r3, [r2, #4]
 8000ec2:	e795      	b.n	8000df0 <HAL_RCC_ClockConfig+0x2c>
 8000ec4:	40022000 	.word	0x40022000
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	00001388 	.word	0x00001388
 8000ed4:	fffff8ff 	.word	0xfffff8ff

08000ed8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00U;
 8000ed8:	2300      	movs	r3, #0
{ 
 8000eda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000edc:	b087      	sub	sp, #28
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ede:	680a      	ldr	r2, [r1, #0]
 8000ee0:	0014      	movs	r4, r2
 8000ee2:	40dc      	lsrs	r4, r3
 8000ee4:	d101      	bne.n	8000eea <HAL_GPIO_Init+0x12>
      }
    }
    
    position++;
  } 
}
 8000ee6:	b007      	add	sp, #28
 8000ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eea:	2601      	movs	r6, #1
 8000eec:	0014      	movs	r4, r2
 8000eee:	409e      	lsls	r6, r3
 8000ef0:	4034      	ands	r4, r6
 8000ef2:	9402      	str	r4, [sp, #8]
    if(iocurrent)
 8000ef4:	4232      	tst	r2, r6
 8000ef6:	d100      	bne.n	8000efa <HAL_GPIO_Init+0x22>
 8000ef8:	e092      	b.n	8001020 <HAL_GPIO_Init+0x148>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000efa:	684a      	ldr	r2, [r1, #4]
 8000efc:	0015      	movs	r5, r2
 8000efe:	9201      	str	r2, [sp, #4]
 8000f00:	2210      	movs	r2, #16
 8000f02:	4395      	bics	r5, r2
 8000f04:	9503      	str	r5, [sp, #12]
 8000f06:	2d02      	cmp	r5, #2
 8000f08:	d10d      	bne.n	8000f26 <HAL_GPIO_Init+0x4e>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000f0a:	2407      	movs	r4, #7
 8000f0c:	250f      	movs	r5, #15
 8000f0e:	401c      	ands	r4, r3
 8000f10:	00a4      	lsls	r4, r4, #2
 8000f12:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3];
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	1882      	adds	r2, r0, r2
 8000f1a:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000f1c:	43af      	bics	r7, r5
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000f1e:	690d      	ldr	r5, [r1, #16]
 8000f20:	40a5      	lsls	r5, r4
 8000f22:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3U] = temp;
 8000f24:	6217      	str	r7, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f26:	2203      	movs	r2, #3
 8000f28:	005c      	lsls	r4, r3, #1
 8000f2a:	40a2      	lsls	r2, r4
 8000f2c:	43d5      	mvns	r5, r2
 8000f2e:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f30:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000f32:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f34:	4397      	bics	r7, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f36:	9a01      	ldr	r2, [sp, #4]
 8000f38:	402a      	ands	r2, r5
 8000f3a:	40a2      	lsls	r2, r4
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3c:	9d03      	ldr	r5, [sp, #12]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3e:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f40:	3d01      	subs	r5, #1
      GPIOx->MODER = temp;
 8000f42:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f44:	2d01      	cmp	r5, #1
 8000f46:	d80f      	bhi.n	8000f68 <HAL_GPIO_Init+0x90>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f48:	4662      	mov	r2, ip
        temp = GPIOx->OSPEEDR; 
 8000f4a:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f4c:	4015      	ands	r5, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000f4e:	68ca      	ldr	r2, [r1, #12]
 8000f50:	40a2      	lsls	r2, r4
 8000f52:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 8000f54:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f56:	6845      	ldr	r5, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f58:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f5a:	43b5      	bics	r5, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f5c:	2601      	movs	r6, #1
 8000f5e:	0912      	lsrs	r2, r2, #4
 8000f60:	4032      	ands	r2, r6
 8000f62:	409a      	lsls	r2, r3
 8000f64:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000f66:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f68:	4665      	mov	r5, ip
      temp = GPIOx->PUPDR;
 8000f6a:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6c:	402a      	ands	r2, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000f6e:	688d      	ldr	r5, [r1, #8]
 8000f70:	40a5      	lsls	r5, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f72:	2480      	movs	r4, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000f74:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000f76:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f78:	9a01      	ldr	r2, [sp, #4]
 8000f7a:	0564      	lsls	r4, r4, #21
 8000f7c:	4222      	tst	r2, r4
 8000f7e:	d04f      	beq.n	8001020 <HAL_GPIO_Init+0x148>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f80:	2501      	movs	r5, #1
 8000f82:	4a28      	ldr	r2, [pc, #160]	; (8001024 <HAL_GPIO_Init+0x14c>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f84:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	6994      	ldr	r4, [r2, #24]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f88:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	432c      	orrs	r4, r5
 8000f8c:	6194      	str	r4, [r2, #24]
 8000f8e:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000f90:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	402a      	ands	r2, r5
 8000f94:	9205      	str	r2, [sp, #20]
 8000f96:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8000f98:	4a23      	ldr	r2, [pc, #140]	; (8001028 <HAL_GPIO_Init+0x150>)
 8000f9a:	00a4      	lsls	r4, r4, #2
 8000f9c:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	3502      	adds	r5, #2
 8000fa2:	401d      	ands	r5, r3
 8000fa4:	00ad      	lsls	r5, r5, #2
 8000fa6:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2];
 8000fa8:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000faa:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fac:	2200      	movs	r2, #0
 8000fae:	42b8      	cmp	r0, r7
 8000fb0:	d00c      	beq.n	8000fcc <HAL_GPIO_Init+0xf4>
 8000fb2:	4f1e      	ldr	r7, [pc, #120]	; (800102c <HAL_GPIO_Init+0x154>)
 8000fb4:	3201      	adds	r2, #1
 8000fb6:	42b8      	cmp	r0, r7
 8000fb8:	d008      	beq.n	8000fcc <HAL_GPIO_Init+0xf4>
 8000fba:	4f1d      	ldr	r7, [pc, #116]	; (8001030 <HAL_GPIO_Init+0x158>)
 8000fbc:	3201      	adds	r2, #1
 8000fbe:	42b8      	cmp	r0, r7
 8000fc0:	d004      	beq.n	8000fcc <HAL_GPIO_Init+0xf4>
 8000fc2:	4f1c      	ldr	r7, [pc, #112]	; (8001034 <HAL_GPIO_Init+0x15c>)
 8000fc4:	3201      	adds	r2, #1
 8000fc6:	42b8      	cmp	r0, r7
 8000fc8:	d000      	beq.n	8000fcc <HAL_GPIO_Init+0xf4>
 8000fca:	3202      	adds	r2, #2
 8000fcc:	40aa      	lsls	r2, r5
 8000fce:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fd0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000fd2:	4a19      	ldr	r2, [pc, #100]	; (8001038 <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fd4:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8000fd6:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 8000fd8:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fda:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fdc:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 8000fde:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe0:	03ff      	lsls	r7, r7, #15
 8000fe2:	d401      	bmi.n	8000fe8 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fe4:	0035      	movs	r5, r6
 8000fe6:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000fe8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000fea:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8000fec:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fee:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000ff0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff2:	03bf      	lsls	r7, r7, #14
 8000ff4:	d401      	bmi.n	8000ffa <HAL_GPIO_Init+0x122>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000ff6:	0035      	movs	r5, r6
 8000ff8:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8000ffa:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000ffc:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 8000ffe:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001000:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8001002:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001004:	02ff      	lsls	r7, r7, #11
 8001006:	d401      	bmi.n	800100c <HAL_GPIO_Init+0x134>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001008:	0035      	movs	r5, r6
 800100a:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 800100c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800100e:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 8001010:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001012:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8001014:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001016:	02bf      	lsls	r7, r7, #10
 8001018:	d401      	bmi.n	800101e <HAL_GPIO_Init+0x146>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800101a:	4025      	ands	r5, r4
 800101c:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800101e:	60d6      	str	r6, [r2, #12]
    position++;
 8001020:	3301      	adds	r3, #1
 8001022:	e75c      	b.n	8000ede <HAL_GPIO_Init+0x6>
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	48000400 	.word	0x48000400
 8001030:	48000800 	.word	0x48000800
 8001034:	48000c00 	.word	0x48000c00
 8001038:	40010400 	.word	0x40010400

0800103c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800103c:	2a00      	cmp	r2, #0
 800103e:	d001      	beq.n	8001044 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001040:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}										  
 8001042:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001044:	6281      	str	r1, [r0, #40]	; 0x28
}										  
 8001046:	e7fc      	b.n	8001042 <HAL_GPIO_WritePin+0x6>

08001048 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	0004      	movs	r4, r0
 800104c:	000d      	movs	r5, r1
 800104e:	0017      	movs	r7, r2
 8001050:	001e      	movs	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001052:	6822      	ldr	r2, [r4, #0]
 8001054:	69d3      	ldr	r3, [r2, #28]
 8001056:	402b      	ands	r3, r5
 8001058:	1b5b      	subs	r3, r3, r5
 800105a:	4259      	negs	r1, r3
 800105c:	414b      	adcs	r3, r1
 800105e:	42bb      	cmp	r3, r7
 8001060:	d001      	beq.n	8001066 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001062:	2000      	movs	r0, #0
 8001064:	e018      	b.n	8001098 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001066:	9b06      	ldr	r3, [sp, #24]
 8001068:	3301      	adds	r3, #1
 800106a:	d0f3      	beq.n	8001054 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800106c:	9b06      	ldr	r3, [sp, #24]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d113      	bne.n	800109a <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <UART_WaitOnFlagUntilTimeout+0x60>)
 8001076:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001078:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800107a:	400a      	ands	r2, r1
 800107c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	31a3      	adds	r1, #163	; 0xa3
 8001082:	31ff      	adds	r1, #255	; 0xff
 8001084:	438a      	bics	r2, r1
 8001086:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001088:	0022      	movs	r2, r4
 800108a:	2320      	movs	r3, #32
 800108c:	3269      	adds	r2, #105	; 0x69
 800108e:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8001090:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8001092:	2300      	movs	r3, #0
 8001094:	3468      	adds	r4, #104	; 0x68
 8001096:	7023      	strb	r3, [r4, #0]
}
 8001098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800109a:	f7ff fca9 	bl	80009f0 <HAL_GetTick>
 800109e:	9b06      	ldr	r3, [sp, #24]
 80010a0:	1b80      	subs	r0, r0, r6
 80010a2:	4298      	cmp	r0, r3
 80010a4:	d9d5      	bls.n	8001052 <UART_WaitOnFlagUntilTimeout+0xa>
 80010a6:	e7e4      	b.n	8001072 <UART_WaitOnFlagUntilTimeout+0x2a>
 80010a8:	fffffe5f 	.word	0xfffffe5f

080010ac <UART_SetConfig>:

  return HAL_OK;
}

HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80010ac:	0003      	movs	r3, r0
 80010ae:	b570      	push	{r4, r5, r6, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	691d      	ldr	r5, [r3, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010b4:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80010b6:	432a      	orrs	r2, r5
 80010b8:	695d      	ldr	r5, [r3, #20]
 80010ba:	69c1      	ldr	r1, [r0, #28]
 80010bc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010be:	6820      	ldr	r0, [r4, #0]
 80010c0:	4d33      	ldr	r5, [pc, #204]	; (8001190 <UART_SetConfig+0xe4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80010c2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010c4:	4028      	ands	r0, r5
 80010c6:	4302      	orrs	r2, r0
 80010c8:	6022      	str	r2, [r4, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010ca:	6862      	ldr	r2, [r4, #4]
 80010cc:	4831      	ldr	r0, [pc, #196]	; (8001194 <UART_SetConfig+0xe8>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010ce:	6a1d      	ldr	r5, [r3, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010d0:	4002      	ands	r2, r0
 80010d2:	68d8      	ldr	r0, [r3, #12]
 80010d4:	4302      	orrs	r2, r0
 80010d6:	6062      	str	r2, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010d8:	699a      	ldr	r2, [r3, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010da:	68a0      	ldr	r0, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010dc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010de:	4d2e      	ldr	r5, [pc, #184]	; (8001198 <UART_SetConfig+0xec>)
 80010e0:	4028      	ands	r0, r5
 80010e2:	4302      	orrs	r2, r0

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010e4:	2003      	movs	r0, #3
 80010e6:	2580      	movs	r5, #128	; 0x80
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010e8:	60a2      	str	r2, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010ea:	4a2c      	ldr	r2, [pc, #176]	; (800119c <UART_SetConfig+0xf0>)
 80010ec:	022d      	lsls	r5, r5, #8
 80010ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010f0:	4002      	ands	r2, r0
 80010f2:	3a01      	subs	r2, #1
 80010f4:	2a02      	cmp	r2, #2
 80010f6:	d843      	bhi.n	8001180 <UART_SetConfig+0xd4>
 80010f8:	4829      	ldr	r0, [pc, #164]	; (80011a0 <UART_SetConfig+0xf4>)
 80010fa:	5c80      	ldrb	r0, [r0, r2]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010fc:	42a9      	cmp	r1, r5
 80010fe:	d120      	bne.n	8001142 <UART_SetConfig+0x96>
  {
    switch (clocksource)
 8001100:	2808      	cmp	r0, #8
 8001102:	d81b      	bhi.n	800113c <UART_SetConfig+0x90>
 8001104:	f7ff f864 	bl	80001d0 <__gnu_thumb1_case_uqi>
 8001108:	1a051a3e 	.word	0x1a051a3e
 800110c:	1a1a1a3e 	.word	0x1a1a1a3e
 8001110:	15          	.byte	0x15
 8001111:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001112:	6859      	ldr	r1, [r3, #4]
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <UART_SetConfig+0xf8>)
 8001116:	0848      	lsrs	r0, r1, #1
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001118:	18c0      	adds	r0, r0, r3
 800111a:	f7ff f863 	bl	80001e4 <__udivsi3>
 800111e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001120:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001122:	0019      	movs	r1, r3
 8001124:	220f      	movs	r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001126:	071b      	lsls	r3, r3, #28
    brrtemp = usartdiv & 0xFFF0U;
 8001128:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800112a:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 800112c:	430b      	orrs	r3, r1
 800112e:	60e3      	str	r3, [r4, #12]
    }
  }

  return ret;

}
 8001130:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001132:	6859      	ldr	r1, [r3, #4]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	0848      	lsrs	r0, r1, #1
 8001138:	025b      	lsls	r3, r3, #9
 800113a:	e7ed      	b.n	8001118 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800113c:	2001      	movs	r0, #1
 800113e:	2300      	movs	r3, #0
 8001140:	e7ef      	b.n	8001122 <UART_SetConfig+0x76>
    switch (clocksource)
 8001142:	2808      	cmp	r0, #8
 8001144:	d81a      	bhi.n	800117c <UART_SetConfig+0xd0>
 8001146:	f7ff f843 	bl	80001d0 <__gnu_thumb1_case_uqi>
 800114a:	190f      	.short	0x190f
 800114c:	190f1905 	.word	0x190f1905
 8001150:	1919      	.short	0x1919
 8001152:	14          	.byte	0x14
 8001153:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001154:	6859      	ldr	r1, [r3, #4]
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <UART_SetConfig+0xfc>)
 8001158:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800115a:	18c0      	adds	r0, r0, r3
 800115c:	f7ff f842 	bl	80001e4 <__udivsi3>
 8001160:	b280      	uxth	r0, r0
 8001162:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001164:	2000      	movs	r0, #0
        break;
 8001166:	e7e3      	b.n	8001130 <UART_SetConfig+0x84>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001168:	6859      	ldr	r1, [r3, #4]
 800116a:	23e1      	movs	r3, #225	; 0xe1
 800116c:	0848      	lsrs	r0, r1, #1
 800116e:	03db      	lsls	r3, r3, #15
 8001170:	e7f3      	b.n	800115a <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	0848      	lsrs	r0, r1, #1
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	e7ee      	b.n	800115a <UART_SetConfig+0xae>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800117c:	2001      	movs	r0, #1
  return ret;
 800117e:	e7d7      	b.n	8001130 <UART_SetConfig+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001180:	42a9      	cmp	r1, r5
 8001182:	d1f1      	bne.n	8001168 <UART_SetConfig+0xbc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001184:	6859      	ldr	r1, [r3, #4]
 8001186:	23e1      	movs	r3, #225	; 0xe1
 8001188:	0848      	lsrs	r0, r1, #1
 800118a:	041b      	lsls	r3, r3, #16
 800118c:	e7c4      	b.n	8001118 <UART_SetConfig+0x6c>
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	ffff69f3 	.word	0xffff69f3
 8001194:	ffffcfff 	.word	0xffffcfff
 8001198:	fffff4ff 	.word	0xfffff4ff
 800119c:	40021000 	.word	0x40021000
 80011a0:	0800283c 	.word	0x0800283c
 80011a4:	01e84800 	.word	0x01e84800
 80011a8:	00f42400 	.word	0x00f42400

080011ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80011ac:	b570      	push	{r4, r5, r6, lr}
 80011ae:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 80011b0:	d101      	bne.n	80011b6 <HAL_UART_Init+0xa>
  {
    return HAL_ERROR;
 80011b2:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 80011b6:	0005      	movs	r5, r0
 80011b8:	3569      	adds	r5, #105	; 0x69
 80011ba:	782b      	ldrb	r3, [r5, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 80011c2:	0003      	movs	r3, r0
 80011c4:	3368      	adds	r3, #104	; 0x68
 80011c6:	701a      	strb	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80011c8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80011ca:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80011cc:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80011ce:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80011d0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	43b3      	bics	r3, r6
 80011d6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80011d8:	f7ff ff68 	bl	80010ac <UART_SetConfig>
 80011dc:	42b0      	cmp	r0, r6
 80011de:	d0e8      	beq.n	80011b2 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	490a      	ldr	r1, [pc, #40]	; (800120c <HAL_UART_Init+0x60>)
 80011e4:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011e6:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80011e8:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80011ea:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80011ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	438a      	bics	r2, r1
 80011f2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4316      	orrs	r6, r2
  huart->RxState = HAL_UART_STATE_READY;
 80011f8:	0022      	movs	r2, r4
  __HAL_UART_ENABLE(huart);
 80011fa:	601e      	str	r6, [r3, #0]
  huart->gState  = HAL_UART_STATE_READY;
 80011fc:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011fe:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8001200:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8001202:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001204:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001206:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8001208:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 800120a:	e7d3      	b.n	80011b4 <HAL_UART_Init+0x8>
 800120c:	fffff7ff 	.word	0xfffff7ff

08001210 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	b085      	sub	sp, #20
 8001214:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001216:	0003      	movs	r3, r0
 8001218:	336a      	adds	r3, #106	; 0x6a
{
 800121a:	0017      	movs	r7, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800121c:	781a      	ldrb	r2, [r3, #0]
{
 800121e:	0004      	movs	r4, r0
 8001220:	000d      	movs	r5, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001222:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001224:	2a20      	cmp	r2, #32
 8001226:	d139      	bne.n	800129c <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 8001228:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800122a:	2900      	cmp	r1, #0
 800122c:	d036      	beq.n	800129c <HAL_UART_Receive+0x8c>
 800122e:	2f00      	cmp	r7, #0
 8001230:	d034      	beq.n	800129c <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	68a1      	ldr	r1, [r4, #8]
 8001236:	0152      	lsls	r2, r2, #5
 8001238:	4291      	cmp	r1, r2
 800123a:	d104      	bne.n	8001246 <HAL_UART_Receive+0x36>
 800123c:	6922      	ldr	r2, [r4, #16]
 800123e:	2a00      	cmp	r2, #0
 8001240:	d101      	bne.n	8001246 <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8001242:	4205      	tst	r5, r0
 8001244:	d12a      	bne.n	800129c <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 8001246:	0022      	movs	r2, r4
 8001248:	3268      	adds	r2, #104	; 0x68
 800124a:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 800124c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800124e:	2901      	cmp	r1, #1
 8001250:	d024      	beq.n	800129c <HAL_UART_Receive+0x8c>
 8001252:	2101      	movs	r1, #1
 8001254:	7011      	strb	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001256:	2200      	movs	r2, #0
 8001258:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800125a:	3222      	adds	r2, #34	; 0x22
 800125c:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800125e:	f7ff fbc7 	bl	80009f0 <HAL_GetTick>
    huart->RxXferSize = Size;
 8001262:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 8001268:	3358      	adds	r3, #88	; 0x58
 800126a:	801f      	strh	r7, [r3, #0]
    huart->RxXferCount = Size;
 800126c:	805f      	strh	r7, [r3, #2]
    tickstart = HAL_GetTick();
 800126e:	0006      	movs	r6, r0
    UART_MASK_COMPUTATION(huart);
 8001270:	0149      	lsls	r1, r1, #5
 8001272:	3304      	adds	r3, #4
 8001274:	428a      	cmp	r2, r1
 8001276:	d115      	bne.n	80012a4 <HAL_UART_Receive+0x94>
 8001278:	6922      	ldr	r2, [r4, #16]
 800127a:	2a00      	cmp	r2, #0
 800127c:	d110      	bne.n	80012a0 <HAL_UART_Receive+0x90>
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <HAL_UART_Receive+0xec>)
 8001280:	801a      	strh	r2, [r3, #0]
    uhMask = huart->Mask;
 8001282:	881f      	ldrh	r7, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001284:	0022      	movs	r2, r4
 8001286:	325a      	adds	r2, #90	; 0x5a
 8001288:	8813      	ldrh	r3, [r2, #0]
 800128a:	b298      	uxth	r0, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d110      	bne.n	80012b2 <HAL_UART_Receive+0xa2>
    huart->RxState = HAL_UART_STATE_READY;
 8001290:	0023      	movs	r3, r4
 8001292:	2220      	movs	r2, #32
 8001294:	336a      	adds	r3, #106	; 0x6a
    __HAL_UNLOCK(huart);
 8001296:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8001298:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800129a:	7020      	strb	r0, [r4, #0]
  }
}
 800129c:	b005      	add	sp, #20
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 80012a0:	22ff      	movs	r2, #255	; 0xff
 80012a2:	e7ed      	b.n	8001280 <HAL_UART_Receive+0x70>
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	d1ec      	bne.n	8001282 <HAL_UART_Receive+0x72>
 80012a8:	6922      	ldr	r2, [r4, #16]
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d0f8      	beq.n	80012a0 <HAL_UART_Receive+0x90>
 80012ae:	227f      	movs	r2, #127	; 0x7f
 80012b0:	e7e6      	b.n	8001280 <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 80012b2:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80012b4:	2120      	movs	r1, #32
      huart->RxXferCount--;
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80012bc:	9b03      	ldr	r3, [sp, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	0020      	movs	r0, r4
 80012c4:	0033      	movs	r3, r6
 80012c6:	f7ff febf 	bl	8001048 <UART_WaitOnFlagUntilTimeout>
 80012ca:	2800      	cmp	r0, #0
 80012cc:	d113      	bne.n	80012f6 <HAL_UART_Receive+0xe6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012ce:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80012d0:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012d2:	0011      	movs	r1, r2
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	0152      	lsls	r2, r2, #5
 80012d8:	4291      	cmp	r1, r2
 80012da:	d107      	bne.n	80012ec <HAL_UART_Receive+0xdc>
 80012dc:	6922      	ldr	r2, [r4, #16]
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d104      	bne.n	80012ec <HAL_UART_Receive+0xdc>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80012e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012e4:	403b      	ands	r3, r7
 80012e6:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 80012e8:	3502      	adds	r5, #2
 80012ea:	e7cb      	b.n	8001284 <HAL_UART_Receive+0x74>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80012ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012ee:	403b      	ands	r3, r7
 80012f0:	702b      	strb	r3, [r5, #0]
 80012f2:	3501      	adds	r5, #1
 80012f4:	e7c6      	b.n	8001284 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80012f6:	2003      	movs	r0, #3
 80012f8:	e7d0      	b.n	800129c <HAL_UART_Receive+0x8c>
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	000001ff 	.word	0x000001ff

08001300 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	b085      	sub	sp, #20
 8001304:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001306:	0003      	movs	r3, r0
 8001308:	3369      	adds	r3, #105	; 0x69
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	781b      	ldrb	r3, [r3, #0]
{
 800130e:	0004      	movs	r4, r0
 8001310:	000d      	movs	r5, r1
 8001312:	0016      	movs	r6, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001314:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001316:	2b20      	cmp	r3, #32
 8001318:	d148      	bne.n	80013ac <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 800131a:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800131c:	2900      	cmp	r1, #0
 800131e:	d045      	beq.n	80013ac <HAL_UART_Transmit+0xac>
 8001320:	2a00      	cmp	r2, #0
 8001322:	d043      	beq.n	80013ac <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	68a2      	ldr	r2, [r4, #8]
 8001328:	015b      	lsls	r3, r3, #5
 800132a:	429a      	cmp	r2, r3
 800132c:	d104      	bne.n	8001338 <HAL_UART_Transmit+0x38>
 800132e:	6923      	ldr	r3, [r4, #16]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_UART_Transmit+0x38>
      if((((uint32_t)pData)&1U) != 0U)
 8001334:	4201      	tst	r1, r0
 8001336:	d139      	bne.n	80013ac <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001338:	0023      	movs	r3, r4
 800133a:	3368      	adds	r3, #104	; 0x68
 800133c:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800133e:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001340:	2a01      	cmp	r2, #1
 8001342:	d033      	beq.n	80013ac <HAL_UART_Transmit+0xac>
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001348:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800134a:	9a02      	ldr	r2, [sp, #8]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800134c:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800134e:	3321      	adds	r3, #33	; 0x21
 8001350:	7013      	strb	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001352:	f7ff fb4d 	bl	80009f0 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001356:	0023      	movs	r3, r4
 8001358:	3350      	adds	r3, #80	; 0x50
 800135a:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 800135c:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800135e:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8001360:	0007      	movs	r7, r0
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001362:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8001364:	0021      	movs	r1, r4
 8001366:	3152      	adds	r1, #82	; 0x52
 8001368:	880b      	ldrh	r3, [r1, #0]
 800136a:	b29a      	uxth	r2, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10e      	bne.n	800138e <HAL_UART_Transmit+0x8e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001370:	9b03      	ldr	r3, [sp, #12]
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	0020      	movs	r0, r4
 8001378:	003b      	movs	r3, r7
 800137a:	f7ff fe65 	bl	8001048 <UART_WaitOnFlagUntilTimeout>
 800137e:	2800      	cmp	r0, #0
 8001380:	d113      	bne.n	80013aa <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 8001382:	2320      	movs	r3, #32
 8001384:	9a02      	ldr	r2, [sp, #8]
    __HAL_UNLOCK(huart);
 8001386:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8001388:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 800138a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800138c:	e00e      	b.n	80013ac <HAL_UART_Transmit+0xac>
      huart->TxXferCount--;
 800138e:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001390:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8001392:	3b01      	subs	r3, #1
 8001394:	b29b      	uxth	r3, r3
 8001396:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001398:	9b03      	ldr	r3, [sp, #12]
 800139a:	2180      	movs	r1, #128	; 0x80
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	0020      	movs	r0, r4
 80013a0:	003b      	movs	r3, r7
 80013a2:	f7ff fe51 	bl	8001048 <UART_WaitOnFlagUntilTimeout>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d002      	beq.n	80013b0 <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 80013aa:	2003      	movs	r0, #3
  }
}
 80013ac:	b005      	add	sp, #20
 80013ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013b0:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80013b2:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013b4:	42b3      	cmp	r3, r6
 80013b6:	d108      	bne.n	80013ca <HAL_UART_Transmit+0xca>
 80013b8:	6923      	ldr	r3, [r4, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d105      	bne.n	80013ca <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80013be:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80013c0:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80013c2:	05db      	lsls	r3, r3, #23
 80013c4:	0ddb      	lsrs	r3, r3, #23
 80013c6:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80013c8:	e7cc      	b.n	8001364 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80013ca:	782b      	ldrb	r3, [r5, #0]
 80013cc:	3501      	adds	r5, #1
 80013ce:	8513      	strh	r3, [r2, #40]	; 0x28
 80013d0:	e7c8      	b.n	8001364 <HAL_UART_Transmit+0x64>
 80013d2:	0000      	movs	r0, r0

080013d4 <Reset_Handler>:
 80013d4:	2100      	movs	r1, #0
 80013d6:	e003      	b.n	80013e0 <LoopCopyDataInit>

080013d8 <CopyDataInit>:
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <LoopForever+0x2>)
 80013da:	585b      	ldr	r3, [r3, r1]
 80013dc:	5043      	str	r3, [r0, r1]
 80013de:	3104      	adds	r1, #4

080013e0 <LoopCopyDataInit>:
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <LoopForever+0x6>)
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <LoopForever+0xa>)
 80013e4:	1842      	adds	r2, r0, r1
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d3f6      	bcc.n	80013d8 <CopyDataInit>
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopForever+0xe>)
 80013ec:	e002      	b.n	80013f4 <LoopFillZerobss>

080013ee <FillZerobss>:
 80013ee:	2300      	movs	r3, #0
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	3204      	adds	r2, #4

080013f4 <LoopFillZerobss>:
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <LoopForever+0x12>)
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d3f9      	bcc.n	80013ee <FillZerobss>
 80013fa:	e000      	b.n	80013fe <LoopFillZerobss+0xa>
 80013fc:	bf00      	nop
 80013fe:	f000 f80f 	bl	8001420 <__libc_init_array>
 8001402:	f7ff f8c9 	bl	8000598 <main>

08001406 <LoopForever>:
 8001406:	e7fe      	b.n	8001406 <LoopForever>
 8001408:	080029b0 	.word	0x080029b0
 800140c:	20000000 	.word	0x20000000
 8001410:	20000068 	.word	0x20000068
 8001414:	20000068 	.word	0x20000068
 8001418:	200001e0 	.word	0x200001e0

0800141c <BusFault_Handler>:
 800141c:	e7fe      	b.n	800141c <BusFault_Handler>
 800141e:	0000      	movs	r0, r0

08001420 <__libc_init_array>:
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	2600      	movs	r6, #0
 8001424:	4d0c      	ldr	r5, [pc, #48]	; (8001458 <__libc_init_array+0x38>)
 8001426:	4c0d      	ldr	r4, [pc, #52]	; (800145c <__libc_init_array+0x3c>)
 8001428:	1b64      	subs	r4, r4, r5
 800142a:	10a4      	asrs	r4, r4, #2
 800142c:	42a6      	cmp	r6, r4
 800142e:	d109      	bne.n	8001444 <__libc_init_array+0x24>
 8001430:	2600      	movs	r6, #0
 8001432:	f001 f8f7 	bl	8002624 <_init>
 8001436:	4d0a      	ldr	r5, [pc, #40]	; (8001460 <__libc_init_array+0x40>)
 8001438:	4c0a      	ldr	r4, [pc, #40]	; (8001464 <__libc_init_array+0x44>)
 800143a:	1b64      	subs	r4, r4, r5
 800143c:	10a4      	asrs	r4, r4, #2
 800143e:	42a6      	cmp	r6, r4
 8001440:	d105      	bne.n	800144e <__libc_init_array+0x2e>
 8001442:	bd70      	pop	{r4, r5, r6, pc}
 8001444:	00b3      	lsls	r3, r6, #2
 8001446:	58eb      	ldr	r3, [r5, r3]
 8001448:	4798      	blx	r3
 800144a:	3601      	adds	r6, #1
 800144c:	e7ee      	b.n	800142c <__libc_init_array+0xc>
 800144e:	00b3      	lsls	r3, r6, #2
 8001450:	58eb      	ldr	r3, [r5, r3]
 8001452:	4798      	blx	r3
 8001454:	3601      	adds	r6, #1
 8001456:	e7f2      	b.n	800143e <__libc_init_array+0x1e>
 8001458:	080029a8 	.word	0x080029a8
 800145c:	080029a8 	.word	0x080029a8
 8001460:	080029a8 	.word	0x080029a8
 8001464:	080029ac 	.word	0x080029ac

08001468 <memcpy>:
 8001468:	2300      	movs	r3, #0
 800146a:	b510      	push	{r4, lr}
 800146c:	429a      	cmp	r2, r3
 800146e:	d100      	bne.n	8001472 <memcpy+0xa>
 8001470:	bd10      	pop	{r4, pc}
 8001472:	5ccc      	ldrb	r4, [r1, r3]
 8001474:	54c4      	strb	r4, [r0, r3]
 8001476:	3301      	adds	r3, #1
 8001478:	e7f8      	b.n	800146c <memcpy+0x4>

0800147a <memset>:
 800147a:	0003      	movs	r3, r0
 800147c:	1882      	adds	r2, r0, r2
 800147e:	4293      	cmp	r3, r2
 8001480:	d100      	bne.n	8001484 <memset+0xa>
 8001482:	4770      	bx	lr
 8001484:	7019      	strb	r1, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	e7f9      	b.n	800147e <memset+0x4>
 800148a:	0000      	movs	r0, r0

0800148c <srand>:
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <srand+0x48>)
 800148e:	b570      	push	{r4, r5, r6, lr}
 8001490:	681d      	ldr	r5, [r3, #0]
 8001492:	0004      	movs	r4, r0
 8001494:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001496:	2b00      	cmp	r3, #0
 8001498:	d116      	bne.n	80014c8 <srand+0x3c>
 800149a:	2018      	movs	r0, #24
 800149c:	f000 f892 	bl	80015c4 <malloc>
 80014a0:	1e02      	subs	r2, r0, #0
 80014a2:	63a8      	str	r0, [r5, #56]	; 0x38
 80014a4:	d104      	bne.n	80014b0 <srand+0x24>
 80014a6:	2142      	movs	r1, #66	; 0x42
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <srand+0x4c>)
 80014aa:	480c      	ldr	r0, [pc, #48]	; (80014dc <srand+0x50>)
 80014ac:	f000 f85c 	bl	8001568 <__assert_func>
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <srand+0x54>)
 80014b2:	2100      	movs	r1, #0
 80014b4:	6003      	str	r3, [r0, #0]
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <srand+0x58>)
 80014b8:	6043      	str	r3, [r0, #4]
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <srand+0x5c>)
 80014bc:	6083      	str	r3, [r0, #8]
 80014be:	230b      	movs	r3, #11
 80014c0:	8183      	strh	r3, [r0, #12]
 80014c2:	2001      	movs	r0, #1
 80014c4:	6110      	str	r0, [r2, #16]
 80014c6:	6151      	str	r1, [r2, #20]
 80014c8:	2200      	movs	r2, #0
 80014ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80014cc:	611c      	str	r4, [r3, #16]
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	bd70      	pop	{r4, r5, r6, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	20000004 	.word	0x20000004
 80014d8:	08002844 	.word	0x08002844
 80014dc:	0800285b 	.word	0x0800285b
 80014e0:	abcd330e 	.word	0xabcd330e
 80014e4:	e66d1234 	.word	0xe66d1234
 80014e8:	0005deec 	.word	0x0005deec

080014ec <rand>:
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <rand+0x5c>)
 80014ee:	b510      	push	{r4, lr}
 80014f0:	681c      	ldr	r4, [r3, #0]
 80014f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d116      	bne.n	8001526 <rand+0x3a>
 80014f8:	2018      	movs	r0, #24
 80014fa:	f000 f863 	bl	80015c4 <malloc>
 80014fe:	1e02      	subs	r2, r0, #0
 8001500:	63a0      	str	r0, [r4, #56]	; 0x38
 8001502:	d104      	bne.n	800150e <rand+0x22>
 8001504:	214e      	movs	r1, #78	; 0x4e
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <rand+0x60>)
 8001508:	4811      	ldr	r0, [pc, #68]	; (8001550 <rand+0x64>)
 800150a:	f000 f82d 	bl	8001568 <__assert_func>
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <rand+0x68>)
 8001510:	2100      	movs	r1, #0
 8001512:	6003      	str	r3, [r0, #0]
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <rand+0x6c>)
 8001516:	6043      	str	r3, [r0, #4]
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <rand+0x70>)
 800151a:	6083      	str	r3, [r0, #8]
 800151c:	230b      	movs	r3, #11
 800151e:	8183      	strh	r3, [r0, #12]
 8001520:	2001      	movs	r0, #1
 8001522:	6110      	str	r0, [r2, #16]
 8001524:	6151      	str	r1, [r2, #20]
 8001526:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <rand+0x74>)
 800152a:	6920      	ldr	r0, [r4, #16]
 800152c:	6961      	ldr	r1, [r4, #20]
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <rand+0x78>)
 8001530:	f7fe feee 	bl	8000310 <__aeabi_lmul>
 8001534:	2201      	movs	r2, #1
 8001536:	2300      	movs	r3, #0
 8001538:	1880      	adds	r0, r0, r2
 800153a:	4159      	adcs	r1, r3
 800153c:	6120      	str	r0, [r4, #16]
 800153e:	6161      	str	r1, [r4, #20]
 8001540:	0048      	lsls	r0, r1, #1
 8001542:	0840      	lsrs	r0, r0, #1
 8001544:	bd10      	pop	{r4, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	20000004 	.word	0x20000004
 800154c:	08002844 	.word	0x08002844
 8001550:	0800285b 	.word	0x0800285b
 8001554:	abcd330e 	.word	0xabcd330e
 8001558:	e66d1234 	.word	0xe66d1234
 800155c:	0005deec 	.word	0x0005deec
 8001560:	4c957f2d 	.word	0x4c957f2d
 8001564:	5851f42d 	.word	0x5851f42d

08001568 <__assert_func>:
 8001568:	b530      	push	{r4, r5, lr}
 800156a:	0014      	movs	r4, r2
 800156c:	001a      	movs	r2, r3
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <__assert_func+0x2c>)
 8001570:	0005      	movs	r5, r0
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	b085      	sub	sp, #20
 8001576:	68d8      	ldr	r0, [r3, #12]
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <__assert_func+0x30>)
 800157a:	2c00      	cmp	r4, #0
 800157c:	d101      	bne.n	8001582 <__assert_func+0x1a>
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <__assert_func+0x34>)
 8001580:	001c      	movs	r4, r3
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	9100      	str	r1, [sp, #0]
 8001586:	002b      	movs	r3, r5
 8001588:	4905      	ldr	r1, [pc, #20]	; (80015a0 <__assert_func+0x38>)
 800158a:	9402      	str	r4, [sp, #8]
 800158c:	f000 f80a 	bl	80015a4 <fiprintf>
 8001590:	f000 fc8e 	bl	8001eb0 <abort>
 8001594:	20000004 	.word	0x20000004
 8001598:	080028d8 	.word	0x080028d8
 800159c:	08002913 	.word	0x08002913
 80015a0:	080028e5 	.word	0x080028e5

080015a4 <fiprintf>:
 80015a4:	b40e      	push	{r1, r2, r3}
 80015a6:	b503      	push	{r0, r1, lr}
 80015a8:	0001      	movs	r1, r0
 80015aa:	ab03      	add	r3, sp, #12
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <fiprintf+0x1c>)
 80015ae:	cb04      	ldmia	r3!, {r2}
 80015b0:	6800      	ldr	r0, [r0, #0]
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	f000 f8e0 	bl	8001778 <_vfiprintf_r>
 80015b8:	b002      	add	sp, #8
 80015ba:	bc08      	pop	{r3}
 80015bc:	b003      	add	sp, #12
 80015be:	4718      	bx	r3
 80015c0:	20000004 	.word	0x20000004

080015c4 <malloc>:
 80015c4:	b510      	push	{r4, lr}
 80015c6:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <malloc+0x10>)
 80015c8:	0001      	movs	r1, r0
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	f000 f84e 	bl	800166c <_malloc_r>
 80015d0:	bd10      	pop	{r4, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	20000004 	.word	0x20000004

080015d8 <_free_r>:
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	0005      	movs	r5, r0
 80015dc:	2900      	cmp	r1, #0
 80015de:	d010      	beq.n	8001602 <_free_r+0x2a>
 80015e0:	1f0c      	subs	r4, r1, #4
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da00      	bge.n	80015ea <_free_r+0x12>
 80015e8:	18e4      	adds	r4, r4, r3
 80015ea:	0028      	movs	r0, r5
 80015ec:	f000 feb2 	bl	8002354 <__malloc_lock>
 80015f0:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <_free_r+0x90>)
 80015f2:	6813      	ldr	r3, [r2, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <_free_r+0x2c>
 80015f8:	6063      	str	r3, [r4, #4]
 80015fa:	6014      	str	r4, [r2, #0]
 80015fc:	0028      	movs	r0, r5
 80015fe:	f000 feb1 	bl	8002364 <__malloc_unlock>
 8001602:	bd70      	pop	{r4, r5, r6, pc}
 8001604:	42a3      	cmp	r3, r4
 8001606:	d908      	bls.n	800161a <_free_r+0x42>
 8001608:	6821      	ldr	r1, [r4, #0]
 800160a:	1860      	adds	r0, r4, r1
 800160c:	4283      	cmp	r3, r0
 800160e:	d1f3      	bne.n	80015f8 <_free_r+0x20>
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	1841      	adds	r1, r0, r1
 8001616:	6021      	str	r1, [r4, #0]
 8001618:	e7ee      	b.n	80015f8 <_free_r+0x20>
 800161a:	001a      	movs	r2, r3
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <_free_r+0x4e>
 8001622:	42a3      	cmp	r3, r4
 8001624:	d9f9      	bls.n	800161a <_free_r+0x42>
 8001626:	6811      	ldr	r1, [r2, #0]
 8001628:	1850      	adds	r0, r2, r1
 800162a:	42a0      	cmp	r0, r4
 800162c:	d10b      	bne.n	8001646 <_free_r+0x6e>
 800162e:	6820      	ldr	r0, [r4, #0]
 8001630:	1809      	adds	r1, r1, r0
 8001632:	1850      	adds	r0, r2, r1
 8001634:	6011      	str	r1, [r2, #0]
 8001636:	4283      	cmp	r3, r0
 8001638:	d1e0      	bne.n	80015fc <_free_r+0x24>
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	1841      	adds	r1, r0, r1
 8001640:	6011      	str	r1, [r2, #0]
 8001642:	6053      	str	r3, [r2, #4]
 8001644:	e7da      	b.n	80015fc <_free_r+0x24>
 8001646:	42a0      	cmp	r0, r4
 8001648:	d902      	bls.n	8001650 <_free_r+0x78>
 800164a:	230c      	movs	r3, #12
 800164c:	602b      	str	r3, [r5, #0]
 800164e:	e7d5      	b.n	80015fc <_free_r+0x24>
 8001650:	6821      	ldr	r1, [r4, #0]
 8001652:	1860      	adds	r0, r4, r1
 8001654:	4283      	cmp	r3, r0
 8001656:	d103      	bne.n	8001660 <_free_r+0x88>
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	1841      	adds	r1, r0, r1
 800165e:	6021      	str	r1, [r4, #0]
 8001660:	6063      	str	r3, [r4, #4]
 8001662:	6054      	str	r4, [r2, #4]
 8001664:	e7ca      	b.n	80015fc <_free_r+0x24>
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	200001cc 	.word	0x200001cc

0800166c <_malloc_r>:
 800166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166e:	2303      	movs	r3, #3
 8001670:	1ccd      	adds	r5, r1, #3
 8001672:	439d      	bics	r5, r3
 8001674:	3508      	adds	r5, #8
 8001676:	0006      	movs	r6, r0
 8001678:	2d0c      	cmp	r5, #12
 800167a:	d21f      	bcs.n	80016bc <_malloc_r+0x50>
 800167c:	250c      	movs	r5, #12
 800167e:	42a9      	cmp	r1, r5
 8001680:	d81e      	bhi.n	80016c0 <_malloc_r+0x54>
 8001682:	0030      	movs	r0, r6
 8001684:	f000 fe66 	bl	8002354 <__malloc_lock>
 8001688:	4925      	ldr	r1, [pc, #148]	; (8001720 <_malloc_r+0xb4>)
 800168a:	680a      	ldr	r2, [r1, #0]
 800168c:	0014      	movs	r4, r2
 800168e:	2c00      	cmp	r4, #0
 8001690:	d11a      	bne.n	80016c8 <_malloc_r+0x5c>
 8001692:	4f24      	ldr	r7, [pc, #144]	; (8001724 <_malloc_r+0xb8>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d104      	bne.n	80016a4 <_malloc_r+0x38>
 800169a:	0021      	movs	r1, r4
 800169c:	0030      	movs	r0, r6
 800169e:	f000 fb27 	bl	8001cf0 <_sbrk_r>
 80016a2:	6038      	str	r0, [r7, #0]
 80016a4:	0029      	movs	r1, r5
 80016a6:	0030      	movs	r0, r6
 80016a8:	f000 fb22 	bl	8001cf0 <_sbrk_r>
 80016ac:	1c43      	adds	r3, r0, #1
 80016ae:	d12b      	bne.n	8001708 <_malloc_r+0x9c>
 80016b0:	230c      	movs	r3, #12
 80016b2:	0030      	movs	r0, r6
 80016b4:	6033      	str	r3, [r6, #0]
 80016b6:	f000 fe55 	bl	8002364 <__malloc_unlock>
 80016ba:	e003      	b.n	80016c4 <_malloc_r+0x58>
 80016bc:	2d00      	cmp	r5, #0
 80016be:	dade      	bge.n	800167e <_malloc_r+0x12>
 80016c0:	230c      	movs	r3, #12
 80016c2:	6033      	str	r3, [r6, #0]
 80016c4:	2000      	movs	r0, #0
 80016c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	1b5b      	subs	r3, r3, r5
 80016cc:	d419      	bmi.n	8001702 <_malloc_r+0x96>
 80016ce:	2b0b      	cmp	r3, #11
 80016d0:	d903      	bls.n	80016da <_malloc_r+0x6e>
 80016d2:	6023      	str	r3, [r4, #0]
 80016d4:	18e4      	adds	r4, r4, r3
 80016d6:	6025      	str	r5, [r4, #0]
 80016d8:	e003      	b.n	80016e2 <_malloc_r+0x76>
 80016da:	6863      	ldr	r3, [r4, #4]
 80016dc:	42a2      	cmp	r2, r4
 80016de:	d10e      	bne.n	80016fe <_malloc_r+0x92>
 80016e0:	600b      	str	r3, [r1, #0]
 80016e2:	0030      	movs	r0, r6
 80016e4:	f000 fe3e 	bl	8002364 <__malloc_unlock>
 80016e8:	0020      	movs	r0, r4
 80016ea:	2207      	movs	r2, #7
 80016ec:	300b      	adds	r0, #11
 80016ee:	1d23      	adds	r3, r4, #4
 80016f0:	4390      	bics	r0, r2
 80016f2:	1ac2      	subs	r2, r0, r3
 80016f4:	4298      	cmp	r0, r3
 80016f6:	d0e6      	beq.n	80016c6 <_malloc_r+0x5a>
 80016f8:	1a1b      	subs	r3, r3, r0
 80016fa:	50a3      	str	r3, [r4, r2]
 80016fc:	e7e3      	b.n	80016c6 <_malloc_r+0x5a>
 80016fe:	6053      	str	r3, [r2, #4]
 8001700:	e7ef      	b.n	80016e2 <_malloc_r+0x76>
 8001702:	0022      	movs	r2, r4
 8001704:	6864      	ldr	r4, [r4, #4]
 8001706:	e7c2      	b.n	800168e <_malloc_r+0x22>
 8001708:	2303      	movs	r3, #3
 800170a:	1cc4      	adds	r4, r0, #3
 800170c:	439c      	bics	r4, r3
 800170e:	42a0      	cmp	r0, r4
 8001710:	d0e1      	beq.n	80016d6 <_malloc_r+0x6a>
 8001712:	1a21      	subs	r1, r4, r0
 8001714:	0030      	movs	r0, r6
 8001716:	f000 faeb 	bl	8001cf0 <_sbrk_r>
 800171a:	1c43      	adds	r3, r0, #1
 800171c:	d1db      	bne.n	80016d6 <_malloc_r+0x6a>
 800171e:	e7c7      	b.n	80016b0 <_malloc_r+0x44>
 8001720:	200001cc 	.word	0x200001cc
 8001724:	200001d0 	.word	0x200001d0

08001728 <__sfputc_r>:
 8001728:	6893      	ldr	r3, [r2, #8]
 800172a:	b510      	push	{r4, lr}
 800172c:	3b01      	subs	r3, #1
 800172e:	6093      	str	r3, [r2, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	da04      	bge.n	800173e <__sfputc_r+0x16>
 8001734:	6994      	ldr	r4, [r2, #24]
 8001736:	42a3      	cmp	r3, r4
 8001738:	db07      	blt.n	800174a <__sfputc_r+0x22>
 800173a:	290a      	cmp	r1, #10
 800173c:	d005      	beq.n	800174a <__sfputc_r+0x22>
 800173e:	6813      	ldr	r3, [r2, #0]
 8001740:	1c58      	adds	r0, r3, #1
 8001742:	6010      	str	r0, [r2, #0]
 8001744:	7019      	strb	r1, [r3, #0]
 8001746:	0008      	movs	r0, r1
 8001748:	bd10      	pop	{r4, pc}
 800174a:	f000 fae3 	bl	8001d14 <__swbuf_r>
 800174e:	0001      	movs	r1, r0
 8001750:	e7f9      	b.n	8001746 <__sfputc_r+0x1e>

08001752 <__sfputs_r>:
 8001752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001754:	0006      	movs	r6, r0
 8001756:	000f      	movs	r7, r1
 8001758:	0014      	movs	r4, r2
 800175a:	18d5      	adds	r5, r2, r3
 800175c:	42ac      	cmp	r4, r5
 800175e:	d101      	bne.n	8001764 <__sfputs_r+0x12>
 8001760:	2000      	movs	r0, #0
 8001762:	e007      	b.n	8001774 <__sfputs_r+0x22>
 8001764:	7821      	ldrb	r1, [r4, #0]
 8001766:	003a      	movs	r2, r7
 8001768:	0030      	movs	r0, r6
 800176a:	f7ff ffdd 	bl	8001728 <__sfputc_r>
 800176e:	3401      	adds	r4, #1
 8001770:	1c43      	adds	r3, r0, #1
 8001772:	d1f3      	bne.n	800175c <__sfputs_r+0xa>
 8001774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001776:	0000      	movs	r0, r0

08001778 <_vfiprintf_r>:
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	b0a1      	sub	sp, #132	; 0x84
 800177c:	0006      	movs	r6, r0
 800177e:	000c      	movs	r4, r1
 8001780:	001f      	movs	r7, r3
 8001782:	9203      	str	r2, [sp, #12]
 8001784:	2800      	cmp	r0, #0
 8001786:	d004      	beq.n	8001792 <_vfiprintf_r+0x1a>
 8001788:	6983      	ldr	r3, [r0, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <_vfiprintf_r+0x1a>
 800178e:	f000 fcc5 	bl	800211c <__sinit>
 8001792:	4b8e      	ldr	r3, [pc, #568]	; (80019cc <_vfiprintf_r+0x254>)
 8001794:	429c      	cmp	r4, r3
 8001796:	d11c      	bne.n	80017d2 <_vfiprintf_r+0x5a>
 8001798:	6874      	ldr	r4, [r6, #4]
 800179a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800179c:	07db      	lsls	r3, r3, #31
 800179e:	d405      	bmi.n	80017ac <_vfiprintf_r+0x34>
 80017a0:	89a3      	ldrh	r3, [r4, #12]
 80017a2:	059b      	lsls	r3, r3, #22
 80017a4:	d402      	bmi.n	80017ac <_vfiprintf_r+0x34>
 80017a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017a8:	f000 fd59 	bl	800225e <__retarget_lock_acquire_recursive>
 80017ac:	89a3      	ldrh	r3, [r4, #12]
 80017ae:	071b      	lsls	r3, r3, #28
 80017b0:	d502      	bpl.n	80017b8 <_vfiprintf_r+0x40>
 80017b2:	6923      	ldr	r3, [r4, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d11d      	bne.n	80017f4 <_vfiprintf_r+0x7c>
 80017b8:	0021      	movs	r1, r4
 80017ba:	0030      	movs	r0, r6
 80017bc:	f000 fb00 	bl	8001dc0 <__swsetup_r>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d017      	beq.n	80017f4 <_vfiprintf_r+0x7c>
 80017c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017c6:	07db      	lsls	r3, r3, #31
 80017c8:	d50d      	bpl.n	80017e6 <_vfiprintf_r+0x6e>
 80017ca:	2001      	movs	r0, #1
 80017cc:	4240      	negs	r0, r0
 80017ce:	b021      	add	sp, #132	; 0x84
 80017d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <_vfiprintf_r+0x258>)
 80017d4:	429c      	cmp	r4, r3
 80017d6:	d101      	bne.n	80017dc <_vfiprintf_r+0x64>
 80017d8:	68b4      	ldr	r4, [r6, #8]
 80017da:	e7de      	b.n	800179a <_vfiprintf_r+0x22>
 80017dc:	4b7d      	ldr	r3, [pc, #500]	; (80019d4 <_vfiprintf_r+0x25c>)
 80017de:	429c      	cmp	r4, r3
 80017e0:	d1db      	bne.n	800179a <_vfiprintf_r+0x22>
 80017e2:	68f4      	ldr	r4, [r6, #12]
 80017e4:	e7d9      	b.n	800179a <_vfiprintf_r+0x22>
 80017e6:	89a3      	ldrh	r3, [r4, #12]
 80017e8:	059b      	lsls	r3, r3, #22
 80017ea:	d4ee      	bmi.n	80017ca <_vfiprintf_r+0x52>
 80017ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017ee:	f000 fd37 	bl	8002260 <__retarget_lock_release_recursive>
 80017f2:	e7ea      	b.n	80017ca <_vfiprintf_r+0x52>
 80017f4:	2300      	movs	r3, #0
 80017f6:	ad08      	add	r5, sp, #32
 80017f8:	616b      	str	r3, [r5, #20]
 80017fa:	3320      	adds	r3, #32
 80017fc:	766b      	strb	r3, [r5, #25]
 80017fe:	3310      	adds	r3, #16
 8001800:	76ab      	strb	r3, [r5, #26]
 8001802:	9707      	str	r7, [sp, #28]
 8001804:	9f03      	ldr	r7, [sp, #12]
 8001806:	783b      	ldrb	r3, [r7, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <_vfiprintf_r+0x98>
 800180c:	2b25      	cmp	r3, #37	; 0x25
 800180e:	d14e      	bne.n	80018ae <_vfiprintf_r+0x136>
 8001810:	9b03      	ldr	r3, [sp, #12]
 8001812:	1afb      	subs	r3, r7, r3
 8001814:	9305      	str	r3, [sp, #20]
 8001816:	9b03      	ldr	r3, [sp, #12]
 8001818:	429f      	cmp	r7, r3
 800181a:	d00d      	beq.n	8001838 <_vfiprintf_r+0xc0>
 800181c:	9b05      	ldr	r3, [sp, #20]
 800181e:	0021      	movs	r1, r4
 8001820:	0030      	movs	r0, r6
 8001822:	9a03      	ldr	r2, [sp, #12]
 8001824:	f7ff ff95 	bl	8001752 <__sfputs_r>
 8001828:	1c43      	adds	r3, r0, #1
 800182a:	d100      	bne.n	800182e <_vfiprintf_r+0xb6>
 800182c:	e0b5      	b.n	800199a <_vfiprintf_r+0x222>
 800182e:	696a      	ldr	r2, [r5, #20]
 8001830:	9b05      	ldr	r3, [sp, #20]
 8001832:	4694      	mov	ip, r2
 8001834:	4463      	add	r3, ip
 8001836:	616b      	str	r3, [r5, #20]
 8001838:	783b      	ldrb	r3, [r7, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <_vfiprintf_r+0xc8>
 800183e:	e0ac      	b.n	800199a <_vfiprintf_r+0x222>
 8001840:	2201      	movs	r2, #1
 8001842:	1c7b      	adds	r3, r7, #1
 8001844:	9303      	str	r3, [sp, #12]
 8001846:	2300      	movs	r3, #0
 8001848:	4252      	negs	r2, r2
 800184a:	606a      	str	r2, [r5, #4]
 800184c:	a904      	add	r1, sp, #16
 800184e:	3254      	adds	r2, #84	; 0x54
 8001850:	1852      	adds	r2, r2, r1
 8001852:	602b      	str	r3, [r5, #0]
 8001854:	60eb      	str	r3, [r5, #12]
 8001856:	60ab      	str	r3, [r5, #8]
 8001858:	7013      	strb	r3, [r2, #0]
 800185a:	65ab      	str	r3, [r5, #88]	; 0x58
 800185c:	9b03      	ldr	r3, [sp, #12]
 800185e:	2205      	movs	r2, #5
 8001860:	7819      	ldrb	r1, [r3, #0]
 8001862:	485d      	ldr	r0, [pc, #372]	; (80019d8 <_vfiprintf_r+0x260>)
 8001864:	f000 fd6a 	bl	800233c <memchr>
 8001868:	9b03      	ldr	r3, [sp, #12]
 800186a:	1c5f      	adds	r7, r3, #1
 800186c:	2800      	cmp	r0, #0
 800186e:	d120      	bne.n	80018b2 <_vfiprintf_r+0x13a>
 8001870:	682a      	ldr	r2, [r5, #0]
 8001872:	06d3      	lsls	r3, r2, #27
 8001874:	d504      	bpl.n	8001880 <_vfiprintf_r+0x108>
 8001876:	2353      	movs	r3, #83	; 0x53
 8001878:	a904      	add	r1, sp, #16
 800187a:	185b      	adds	r3, r3, r1
 800187c:	2120      	movs	r1, #32
 800187e:	7019      	strb	r1, [r3, #0]
 8001880:	0713      	lsls	r3, r2, #28
 8001882:	d504      	bpl.n	800188e <_vfiprintf_r+0x116>
 8001884:	2353      	movs	r3, #83	; 0x53
 8001886:	a904      	add	r1, sp, #16
 8001888:	185b      	adds	r3, r3, r1
 800188a:	212b      	movs	r1, #43	; 0x2b
 800188c:	7019      	strb	r1, [r3, #0]
 800188e:	9b03      	ldr	r3, [sp, #12]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b2a      	cmp	r3, #42	; 0x2a
 8001894:	d016      	beq.n	80018c4 <_vfiprintf_r+0x14c>
 8001896:	2100      	movs	r1, #0
 8001898:	68eb      	ldr	r3, [r5, #12]
 800189a:	9f03      	ldr	r7, [sp, #12]
 800189c:	783a      	ldrb	r2, [r7, #0]
 800189e:	1c78      	adds	r0, r7, #1
 80018a0:	3a30      	subs	r2, #48	; 0x30
 80018a2:	4684      	mov	ip, r0
 80018a4:	2a09      	cmp	r2, #9
 80018a6:	d94f      	bls.n	8001948 <_vfiprintf_r+0x1d0>
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d111      	bne.n	80018d0 <_vfiprintf_r+0x158>
 80018ac:	e017      	b.n	80018de <_vfiprintf_r+0x166>
 80018ae:	3701      	adds	r7, #1
 80018b0:	e7a9      	b.n	8001806 <_vfiprintf_r+0x8e>
 80018b2:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <_vfiprintf_r+0x260>)
 80018b4:	682a      	ldr	r2, [r5, #0]
 80018b6:	1ac0      	subs	r0, r0, r3
 80018b8:	2301      	movs	r3, #1
 80018ba:	4083      	lsls	r3, r0
 80018bc:	4313      	orrs	r3, r2
 80018be:	602b      	str	r3, [r5, #0]
 80018c0:	9703      	str	r7, [sp, #12]
 80018c2:	e7cb      	b.n	800185c <_vfiprintf_r+0xe4>
 80018c4:	9b07      	ldr	r3, [sp, #28]
 80018c6:	1d19      	adds	r1, r3, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	9107      	str	r1, [sp, #28]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db01      	blt.n	80018d4 <_vfiprintf_r+0x15c>
 80018d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80018d2:	e004      	b.n	80018de <_vfiprintf_r+0x166>
 80018d4:	425b      	negs	r3, r3
 80018d6:	60eb      	str	r3, [r5, #12]
 80018d8:	2302      	movs	r3, #2
 80018da:	4313      	orrs	r3, r2
 80018dc:	602b      	str	r3, [r5, #0]
 80018de:	783b      	ldrb	r3, [r7, #0]
 80018e0:	2b2e      	cmp	r3, #46	; 0x2e
 80018e2:	d10a      	bne.n	80018fa <_vfiprintf_r+0x182>
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	2b2a      	cmp	r3, #42	; 0x2a
 80018e8:	d137      	bne.n	800195a <_vfiprintf_r+0x1e2>
 80018ea:	9b07      	ldr	r3, [sp, #28]
 80018ec:	3702      	adds	r7, #2
 80018ee:	1d1a      	adds	r2, r3, #4
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	9207      	str	r2, [sp, #28]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db2d      	blt.n	8001954 <_vfiprintf_r+0x1dc>
 80018f8:	9309      	str	r3, [sp, #36]	; 0x24
 80018fa:	2203      	movs	r2, #3
 80018fc:	7839      	ldrb	r1, [r7, #0]
 80018fe:	4837      	ldr	r0, [pc, #220]	; (80019dc <_vfiprintf_r+0x264>)
 8001900:	f000 fd1c 	bl	800233c <memchr>
 8001904:	2800      	cmp	r0, #0
 8001906:	d007      	beq.n	8001918 <_vfiprintf_r+0x1a0>
 8001908:	4b34      	ldr	r3, [pc, #208]	; (80019dc <_vfiprintf_r+0x264>)
 800190a:	682a      	ldr	r2, [r5, #0]
 800190c:	1ac0      	subs	r0, r0, r3
 800190e:	2340      	movs	r3, #64	; 0x40
 8001910:	4083      	lsls	r3, r0
 8001912:	4313      	orrs	r3, r2
 8001914:	3701      	adds	r7, #1
 8001916:	602b      	str	r3, [r5, #0]
 8001918:	7839      	ldrb	r1, [r7, #0]
 800191a:	1c7b      	adds	r3, r7, #1
 800191c:	2206      	movs	r2, #6
 800191e:	4830      	ldr	r0, [pc, #192]	; (80019e0 <_vfiprintf_r+0x268>)
 8001920:	9303      	str	r3, [sp, #12]
 8001922:	7629      	strb	r1, [r5, #24]
 8001924:	f000 fd0a 	bl	800233c <memchr>
 8001928:	2800      	cmp	r0, #0
 800192a:	d045      	beq.n	80019b8 <_vfiprintf_r+0x240>
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <_vfiprintf_r+0x26c>)
 800192e:	2b00      	cmp	r3, #0
 8001930:	d127      	bne.n	8001982 <_vfiprintf_r+0x20a>
 8001932:	2207      	movs	r2, #7
 8001934:	9b07      	ldr	r3, [sp, #28]
 8001936:	3307      	adds	r3, #7
 8001938:	4393      	bics	r3, r2
 800193a:	3308      	adds	r3, #8
 800193c:	9307      	str	r3, [sp, #28]
 800193e:	696b      	ldr	r3, [r5, #20]
 8001940:	9a04      	ldr	r2, [sp, #16]
 8001942:	189b      	adds	r3, r3, r2
 8001944:	616b      	str	r3, [r5, #20]
 8001946:	e75d      	b.n	8001804 <_vfiprintf_r+0x8c>
 8001948:	210a      	movs	r1, #10
 800194a:	434b      	muls	r3, r1
 800194c:	4667      	mov	r7, ip
 800194e:	189b      	adds	r3, r3, r2
 8001950:	3909      	subs	r1, #9
 8001952:	e7a3      	b.n	800189c <_vfiprintf_r+0x124>
 8001954:	2301      	movs	r3, #1
 8001956:	425b      	negs	r3, r3
 8001958:	e7ce      	b.n	80018f8 <_vfiprintf_r+0x180>
 800195a:	2300      	movs	r3, #0
 800195c:	001a      	movs	r2, r3
 800195e:	3701      	adds	r7, #1
 8001960:	606b      	str	r3, [r5, #4]
 8001962:	7839      	ldrb	r1, [r7, #0]
 8001964:	1c78      	adds	r0, r7, #1
 8001966:	3930      	subs	r1, #48	; 0x30
 8001968:	4684      	mov	ip, r0
 800196a:	2909      	cmp	r1, #9
 800196c:	d903      	bls.n	8001976 <_vfiprintf_r+0x1fe>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0c3      	beq.n	80018fa <_vfiprintf_r+0x182>
 8001972:	9209      	str	r2, [sp, #36]	; 0x24
 8001974:	e7c1      	b.n	80018fa <_vfiprintf_r+0x182>
 8001976:	230a      	movs	r3, #10
 8001978:	435a      	muls	r2, r3
 800197a:	4667      	mov	r7, ip
 800197c:	1852      	adds	r2, r2, r1
 800197e:	3b09      	subs	r3, #9
 8001980:	e7ef      	b.n	8001962 <_vfiprintf_r+0x1ea>
 8001982:	ab07      	add	r3, sp, #28
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	0022      	movs	r2, r4
 8001988:	0029      	movs	r1, r5
 800198a:	0030      	movs	r0, r6
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <_vfiprintf_r+0x270>)
 800198e:	e000      	b.n	8001992 <_vfiprintf_r+0x21a>
 8001990:	bf00      	nop
 8001992:	9004      	str	r0, [sp, #16]
 8001994:	9b04      	ldr	r3, [sp, #16]
 8001996:	3301      	adds	r3, #1
 8001998:	d1d1      	bne.n	800193e <_vfiprintf_r+0x1c6>
 800199a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800199c:	07db      	lsls	r3, r3, #31
 800199e:	d405      	bmi.n	80019ac <_vfiprintf_r+0x234>
 80019a0:	89a3      	ldrh	r3, [r4, #12]
 80019a2:	059b      	lsls	r3, r3, #22
 80019a4:	d402      	bmi.n	80019ac <_vfiprintf_r+0x234>
 80019a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019a8:	f000 fc5a 	bl	8002260 <__retarget_lock_release_recursive>
 80019ac:	89a3      	ldrh	r3, [r4, #12]
 80019ae:	065b      	lsls	r3, r3, #25
 80019b0:	d500      	bpl.n	80019b4 <_vfiprintf_r+0x23c>
 80019b2:	e70a      	b.n	80017ca <_vfiprintf_r+0x52>
 80019b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80019b6:	e70a      	b.n	80017ce <_vfiprintf_r+0x56>
 80019b8:	ab07      	add	r3, sp, #28
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	0022      	movs	r2, r4
 80019be:	0029      	movs	r1, r5
 80019c0:	0030      	movs	r0, r6
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <_vfiprintf_r+0x270>)
 80019c4:	f000 f882 	bl	8001acc <_printf_i>
 80019c8:	e7e3      	b.n	8001992 <_vfiprintf_r+0x21a>
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	08002968 	.word	0x08002968
 80019d0:	08002988 	.word	0x08002988
 80019d4:	08002948 	.word	0x08002948
 80019d8:	08002914 	.word	0x08002914
 80019dc:	0800291a 	.word	0x0800291a
 80019e0:	0800291e 	.word	0x0800291e
 80019e4:	00000000 	.word	0x00000000
 80019e8:	08001753 	.word	0x08001753

080019ec <_printf_common>:
 80019ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019ee:	0015      	movs	r5, r2
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	688a      	ldr	r2, [r1, #8]
 80019f4:	690b      	ldr	r3, [r1, #16]
 80019f6:	000c      	movs	r4, r1
 80019f8:	9000      	str	r0, [sp, #0]
 80019fa:	4293      	cmp	r3, r2
 80019fc:	da00      	bge.n	8001a00 <_printf_common+0x14>
 80019fe:	0013      	movs	r3, r2
 8001a00:	0022      	movs	r2, r4
 8001a02:	602b      	str	r3, [r5, #0]
 8001a04:	3243      	adds	r2, #67	; 0x43
 8001a06:	7812      	ldrb	r2, [r2, #0]
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	d001      	beq.n	8001a10 <_printf_common+0x24>
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	602b      	str	r3, [r5, #0]
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	069b      	lsls	r3, r3, #26
 8001a14:	d502      	bpl.n	8001a1c <_printf_common+0x30>
 8001a16:	682b      	ldr	r3, [r5, #0]
 8001a18:	3302      	adds	r3, #2
 8001a1a:	602b      	str	r3, [r5, #0]
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	2306      	movs	r3, #6
 8001a20:	0017      	movs	r7, r2
 8001a22:	401f      	ands	r7, r3
 8001a24:	421a      	tst	r2, r3
 8001a26:	d027      	beq.n	8001a78 <_printf_common+0x8c>
 8001a28:	0023      	movs	r3, r4
 8001a2a:	3343      	adds	r3, #67	; 0x43
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	1e5a      	subs	r2, r3, #1
 8001a30:	4193      	sbcs	r3, r2
 8001a32:	6822      	ldr	r2, [r4, #0]
 8001a34:	0692      	lsls	r2, r2, #26
 8001a36:	d430      	bmi.n	8001a9a <_printf_common+0xae>
 8001a38:	0022      	movs	r2, r4
 8001a3a:	9901      	ldr	r1, [sp, #4]
 8001a3c:	9800      	ldr	r0, [sp, #0]
 8001a3e:	9e08      	ldr	r6, [sp, #32]
 8001a40:	3243      	adds	r2, #67	; 0x43
 8001a42:	47b0      	blx	r6
 8001a44:	1c43      	adds	r3, r0, #1
 8001a46:	d025      	beq.n	8001a94 <_printf_common+0xa8>
 8001a48:	2306      	movs	r3, #6
 8001a4a:	6820      	ldr	r0, [r4, #0]
 8001a4c:	682a      	ldr	r2, [r5, #0]
 8001a4e:	68e1      	ldr	r1, [r4, #12]
 8001a50:	2500      	movs	r5, #0
 8001a52:	4003      	ands	r3, r0
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d103      	bne.n	8001a60 <_printf_common+0x74>
 8001a58:	1a8d      	subs	r5, r1, r2
 8001a5a:	43eb      	mvns	r3, r5
 8001a5c:	17db      	asrs	r3, r3, #31
 8001a5e:	401d      	ands	r5, r3
 8001a60:	68a3      	ldr	r3, [r4, #8]
 8001a62:	6922      	ldr	r2, [r4, #16]
 8001a64:	4293      	cmp	r3, r2
 8001a66:	dd01      	ble.n	8001a6c <_printf_common+0x80>
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	18ed      	adds	r5, r5, r3
 8001a6c:	2700      	movs	r7, #0
 8001a6e:	42bd      	cmp	r5, r7
 8001a70:	d120      	bne.n	8001ab4 <_printf_common+0xc8>
 8001a72:	2000      	movs	r0, #0
 8001a74:	e010      	b.n	8001a98 <_printf_common+0xac>
 8001a76:	3701      	adds	r7, #1
 8001a78:	68e3      	ldr	r3, [r4, #12]
 8001a7a:	682a      	ldr	r2, [r5, #0]
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	42bb      	cmp	r3, r7
 8001a80:	ddd2      	ble.n	8001a28 <_printf_common+0x3c>
 8001a82:	0022      	movs	r2, r4
 8001a84:	2301      	movs	r3, #1
 8001a86:	9901      	ldr	r1, [sp, #4]
 8001a88:	9800      	ldr	r0, [sp, #0]
 8001a8a:	9e08      	ldr	r6, [sp, #32]
 8001a8c:	3219      	adds	r2, #25
 8001a8e:	47b0      	blx	r6
 8001a90:	1c43      	adds	r3, r0, #1
 8001a92:	d1f0      	bne.n	8001a76 <_printf_common+0x8a>
 8001a94:	2001      	movs	r0, #1
 8001a96:	4240      	negs	r0, r0
 8001a98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001a9a:	2030      	movs	r0, #48	; 0x30
 8001a9c:	18e1      	adds	r1, r4, r3
 8001a9e:	3143      	adds	r1, #67	; 0x43
 8001aa0:	7008      	strb	r0, [r1, #0]
 8001aa2:	0021      	movs	r1, r4
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	3145      	adds	r1, #69	; 0x45
 8001aa8:	7809      	ldrb	r1, [r1, #0]
 8001aaa:	18a2      	adds	r2, r4, r2
 8001aac:	3243      	adds	r2, #67	; 0x43
 8001aae:	3302      	adds	r3, #2
 8001ab0:	7011      	strb	r1, [r2, #0]
 8001ab2:	e7c1      	b.n	8001a38 <_printf_common+0x4c>
 8001ab4:	0022      	movs	r2, r4
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	9901      	ldr	r1, [sp, #4]
 8001aba:	9800      	ldr	r0, [sp, #0]
 8001abc:	9e08      	ldr	r6, [sp, #32]
 8001abe:	321a      	adds	r2, #26
 8001ac0:	47b0      	blx	r6
 8001ac2:	1c43      	adds	r3, r0, #1
 8001ac4:	d0e6      	beq.n	8001a94 <_printf_common+0xa8>
 8001ac6:	3701      	adds	r7, #1
 8001ac8:	e7d1      	b.n	8001a6e <_printf_common+0x82>
 8001aca:	0000      	movs	r0, r0

08001acc <_printf_i>:
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ace:	b08b      	sub	sp, #44	; 0x2c
 8001ad0:	9206      	str	r2, [sp, #24]
 8001ad2:	000a      	movs	r2, r1
 8001ad4:	3243      	adds	r2, #67	; 0x43
 8001ad6:	9307      	str	r3, [sp, #28]
 8001ad8:	9005      	str	r0, [sp, #20]
 8001ada:	9204      	str	r2, [sp, #16]
 8001adc:	7e0a      	ldrb	r2, [r1, #24]
 8001ade:	000c      	movs	r4, r1
 8001ae0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001ae2:	2a78      	cmp	r2, #120	; 0x78
 8001ae4:	d807      	bhi.n	8001af6 <_printf_i+0x2a>
 8001ae6:	2a62      	cmp	r2, #98	; 0x62
 8001ae8:	d809      	bhi.n	8001afe <_printf_i+0x32>
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	d100      	bne.n	8001af0 <_printf_i+0x24>
 8001aee:	e0c1      	b.n	8001c74 <_printf_i+0x1a8>
 8001af0:	2a58      	cmp	r2, #88	; 0x58
 8001af2:	d100      	bne.n	8001af6 <_printf_i+0x2a>
 8001af4:	e08c      	b.n	8001c10 <_printf_i+0x144>
 8001af6:	0026      	movs	r6, r4
 8001af8:	3642      	adds	r6, #66	; 0x42
 8001afa:	7032      	strb	r2, [r6, #0]
 8001afc:	e022      	b.n	8001b44 <_printf_i+0x78>
 8001afe:	0010      	movs	r0, r2
 8001b00:	3863      	subs	r0, #99	; 0x63
 8001b02:	2815      	cmp	r0, #21
 8001b04:	d8f7      	bhi.n	8001af6 <_printf_i+0x2a>
 8001b06:	f7fe fbf9 	bl	80002fc <__gnu_thumb1_case_shi>
 8001b0a:	0016      	.short	0x0016
 8001b0c:	fff6001f 	.word	0xfff6001f
 8001b10:	fff6fff6 	.word	0xfff6fff6
 8001b14:	001ffff6 	.word	0x001ffff6
 8001b18:	fff6fff6 	.word	0xfff6fff6
 8001b1c:	fff6fff6 	.word	0xfff6fff6
 8001b20:	003600a8 	.word	0x003600a8
 8001b24:	fff6009a 	.word	0xfff6009a
 8001b28:	00b9fff6 	.word	0x00b9fff6
 8001b2c:	0036fff6 	.word	0x0036fff6
 8001b30:	fff6fff6 	.word	0xfff6fff6
 8001b34:	009e      	.short	0x009e
 8001b36:	0026      	movs	r6, r4
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	3642      	adds	r6, #66	; 0x42
 8001b3c:	1d11      	adds	r1, r2, #4
 8001b3e:	6019      	str	r1, [r3, #0]
 8001b40:	6813      	ldr	r3, [r2, #0]
 8001b42:	7033      	strb	r3, [r6, #0]
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0a7      	b.n	8001c98 <_printf_i+0x1cc>
 8001b48:	6808      	ldr	r0, [r1, #0]
 8001b4a:	6819      	ldr	r1, [r3, #0]
 8001b4c:	1d0a      	adds	r2, r1, #4
 8001b4e:	0605      	lsls	r5, r0, #24
 8001b50:	d50b      	bpl.n	8001b6a <_printf_i+0x9e>
 8001b52:	680d      	ldr	r5, [r1, #0]
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	2d00      	cmp	r5, #0
 8001b58:	da03      	bge.n	8001b62 <_printf_i+0x96>
 8001b5a:	232d      	movs	r3, #45	; 0x2d
 8001b5c:	9a04      	ldr	r2, [sp, #16]
 8001b5e:	426d      	negs	r5, r5
 8001b60:	7013      	strb	r3, [r2, #0]
 8001b62:	4b61      	ldr	r3, [pc, #388]	; (8001ce8 <_printf_i+0x21c>)
 8001b64:	270a      	movs	r7, #10
 8001b66:	9303      	str	r3, [sp, #12]
 8001b68:	e01b      	b.n	8001ba2 <_printf_i+0xd6>
 8001b6a:	680d      	ldr	r5, [r1, #0]
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	0641      	lsls	r1, r0, #25
 8001b70:	d5f1      	bpl.n	8001b56 <_printf_i+0x8a>
 8001b72:	b22d      	sxth	r5, r5
 8001b74:	e7ef      	b.n	8001b56 <_printf_i+0x8a>
 8001b76:	680d      	ldr	r5, [r1, #0]
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	1d08      	adds	r0, r1, #4
 8001b7c:	6018      	str	r0, [r3, #0]
 8001b7e:	062e      	lsls	r6, r5, #24
 8001b80:	d501      	bpl.n	8001b86 <_printf_i+0xba>
 8001b82:	680d      	ldr	r5, [r1, #0]
 8001b84:	e003      	b.n	8001b8e <_printf_i+0xc2>
 8001b86:	066d      	lsls	r5, r5, #25
 8001b88:	d5fb      	bpl.n	8001b82 <_printf_i+0xb6>
 8001b8a:	680d      	ldr	r5, [r1, #0]
 8001b8c:	b2ad      	uxth	r5, r5
 8001b8e:	4b56      	ldr	r3, [pc, #344]	; (8001ce8 <_printf_i+0x21c>)
 8001b90:	2708      	movs	r7, #8
 8001b92:	9303      	str	r3, [sp, #12]
 8001b94:	2a6f      	cmp	r2, #111	; 0x6f
 8001b96:	d000      	beq.n	8001b9a <_printf_i+0xce>
 8001b98:	3702      	adds	r7, #2
 8001b9a:	0023      	movs	r3, r4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	3343      	adds	r3, #67	; 0x43
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	6863      	ldr	r3, [r4, #4]
 8001ba4:	60a3      	str	r3, [r4, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db03      	blt.n	8001bb2 <_printf_i+0xe6>
 8001baa:	2204      	movs	r2, #4
 8001bac:	6821      	ldr	r1, [r4, #0]
 8001bae:	4391      	bics	r1, r2
 8001bb0:	6021      	str	r1, [r4, #0]
 8001bb2:	2d00      	cmp	r5, #0
 8001bb4:	d102      	bne.n	8001bbc <_printf_i+0xf0>
 8001bb6:	9e04      	ldr	r6, [sp, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00c      	beq.n	8001bd6 <_printf_i+0x10a>
 8001bbc:	9e04      	ldr	r6, [sp, #16]
 8001bbe:	0028      	movs	r0, r5
 8001bc0:	0039      	movs	r1, r7
 8001bc2:	f7fe fb95 	bl	80002f0 <__aeabi_uidivmod>
 8001bc6:	9b03      	ldr	r3, [sp, #12]
 8001bc8:	3e01      	subs	r6, #1
 8001bca:	5c5b      	ldrb	r3, [r3, r1]
 8001bcc:	7033      	strb	r3, [r6, #0]
 8001bce:	002b      	movs	r3, r5
 8001bd0:	0005      	movs	r5, r0
 8001bd2:	429f      	cmp	r7, r3
 8001bd4:	d9f3      	bls.n	8001bbe <_printf_i+0xf2>
 8001bd6:	2f08      	cmp	r7, #8
 8001bd8:	d109      	bne.n	8001bee <_printf_i+0x122>
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	07db      	lsls	r3, r3, #31
 8001bde:	d506      	bpl.n	8001bee <_printf_i+0x122>
 8001be0:	6863      	ldr	r3, [r4, #4]
 8001be2:	6922      	ldr	r2, [r4, #16]
 8001be4:	4293      	cmp	r3, r2
 8001be6:	dc02      	bgt.n	8001bee <_printf_i+0x122>
 8001be8:	2330      	movs	r3, #48	; 0x30
 8001bea:	3e01      	subs	r6, #1
 8001bec:	7033      	strb	r3, [r6, #0]
 8001bee:	9b04      	ldr	r3, [sp, #16]
 8001bf0:	1b9b      	subs	r3, r3, r6
 8001bf2:	6123      	str	r3, [r4, #16]
 8001bf4:	9b07      	ldr	r3, [sp, #28]
 8001bf6:	0021      	movs	r1, r4
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	9805      	ldr	r0, [sp, #20]
 8001bfc:	9b06      	ldr	r3, [sp, #24]
 8001bfe:	aa09      	add	r2, sp, #36	; 0x24
 8001c00:	f7ff fef4 	bl	80019ec <_printf_common>
 8001c04:	1c43      	adds	r3, r0, #1
 8001c06:	d14c      	bne.n	8001ca2 <_printf_i+0x1d6>
 8001c08:	2001      	movs	r0, #1
 8001c0a:	4240      	negs	r0, r0
 8001c0c:	b00b      	add	sp, #44	; 0x2c
 8001c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c10:	3145      	adds	r1, #69	; 0x45
 8001c12:	700a      	strb	r2, [r1, #0]
 8001c14:	4a34      	ldr	r2, [pc, #208]	; (8001ce8 <_printf_i+0x21c>)
 8001c16:	9203      	str	r2, [sp, #12]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	6821      	ldr	r1, [r4, #0]
 8001c1c:	ca20      	ldmia	r2!, {r5}
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	0608      	lsls	r0, r1, #24
 8001c22:	d516      	bpl.n	8001c52 <_printf_i+0x186>
 8001c24:	07cb      	lsls	r3, r1, #31
 8001c26:	d502      	bpl.n	8001c2e <_printf_i+0x162>
 8001c28:	2320      	movs	r3, #32
 8001c2a:	4319      	orrs	r1, r3
 8001c2c:	6021      	str	r1, [r4, #0]
 8001c2e:	2710      	movs	r7, #16
 8001c30:	2d00      	cmp	r5, #0
 8001c32:	d1b2      	bne.n	8001b9a <_printf_i+0xce>
 8001c34:	2320      	movs	r3, #32
 8001c36:	6822      	ldr	r2, [r4, #0]
 8001c38:	439a      	bics	r2, r3
 8001c3a:	6022      	str	r2, [r4, #0]
 8001c3c:	e7ad      	b.n	8001b9a <_printf_i+0xce>
 8001c3e:	2220      	movs	r2, #32
 8001c40:	6809      	ldr	r1, [r1, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	6022      	str	r2, [r4, #0]
 8001c46:	0022      	movs	r2, r4
 8001c48:	2178      	movs	r1, #120	; 0x78
 8001c4a:	3245      	adds	r2, #69	; 0x45
 8001c4c:	7011      	strb	r1, [r2, #0]
 8001c4e:	4a27      	ldr	r2, [pc, #156]	; (8001cec <_printf_i+0x220>)
 8001c50:	e7e1      	b.n	8001c16 <_printf_i+0x14a>
 8001c52:	0648      	lsls	r0, r1, #25
 8001c54:	d5e6      	bpl.n	8001c24 <_printf_i+0x158>
 8001c56:	b2ad      	uxth	r5, r5
 8001c58:	e7e4      	b.n	8001c24 <_printf_i+0x158>
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	680d      	ldr	r5, [r1, #0]
 8001c5e:	1d10      	adds	r0, r2, #4
 8001c60:	6949      	ldr	r1, [r1, #20]
 8001c62:	6018      	str	r0, [r3, #0]
 8001c64:	6813      	ldr	r3, [r2, #0]
 8001c66:	062e      	lsls	r6, r5, #24
 8001c68:	d501      	bpl.n	8001c6e <_printf_i+0x1a2>
 8001c6a:	6019      	str	r1, [r3, #0]
 8001c6c:	e002      	b.n	8001c74 <_printf_i+0x1a8>
 8001c6e:	066d      	lsls	r5, r5, #25
 8001c70:	d5fb      	bpl.n	8001c6a <_printf_i+0x19e>
 8001c72:	8019      	strh	r1, [r3, #0]
 8001c74:	2300      	movs	r3, #0
 8001c76:	9e04      	ldr	r6, [sp, #16]
 8001c78:	6123      	str	r3, [r4, #16]
 8001c7a:	e7bb      	b.n	8001bf4 <_printf_i+0x128>
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	1d11      	adds	r1, r2, #4
 8001c80:	6019      	str	r1, [r3, #0]
 8001c82:	6816      	ldr	r6, [r2, #0]
 8001c84:	2100      	movs	r1, #0
 8001c86:	0030      	movs	r0, r6
 8001c88:	6862      	ldr	r2, [r4, #4]
 8001c8a:	f000 fb57 	bl	800233c <memchr>
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d001      	beq.n	8001c96 <_printf_i+0x1ca>
 8001c92:	1b80      	subs	r0, r0, r6
 8001c94:	6060      	str	r0, [r4, #4]
 8001c96:	6863      	ldr	r3, [r4, #4]
 8001c98:	6123      	str	r3, [r4, #16]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9a04      	ldr	r2, [sp, #16]
 8001c9e:	7013      	strb	r3, [r2, #0]
 8001ca0:	e7a8      	b.n	8001bf4 <_printf_i+0x128>
 8001ca2:	6923      	ldr	r3, [r4, #16]
 8001ca4:	0032      	movs	r2, r6
 8001ca6:	9906      	ldr	r1, [sp, #24]
 8001ca8:	9805      	ldr	r0, [sp, #20]
 8001caa:	9d07      	ldr	r5, [sp, #28]
 8001cac:	47a8      	blx	r5
 8001cae:	1c43      	adds	r3, r0, #1
 8001cb0:	d0aa      	beq.n	8001c08 <_printf_i+0x13c>
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	079b      	lsls	r3, r3, #30
 8001cb6:	d415      	bmi.n	8001ce4 <_printf_i+0x218>
 8001cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cba:	68e0      	ldr	r0, [r4, #12]
 8001cbc:	4298      	cmp	r0, r3
 8001cbe:	daa5      	bge.n	8001c0c <_printf_i+0x140>
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	e7a3      	b.n	8001c0c <_printf_i+0x140>
 8001cc4:	0022      	movs	r2, r4
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	9906      	ldr	r1, [sp, #24]
 8001cca:	9805      	ldr	r0, [sp, #20]
 8001ccc:	9e07      	ldr	r6, [sp, #28]
 8001cce:	3219      	adds	r2, #25
 8001cd0:	47b0      	blx	r6
 8001cd2:	1c43      	adds	r3, r0, #1
 8001cd4:	d098      	beq.n	8001c08 <_printf_i+0x13c>
 8001cd6:	3501      	adds	r5, #1
 8001cd8:	68e3      	ldr	r3, [r4, #12]
 8001cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	42ab      	cmp	r3, r5
 8001ce0:	dcf0      	bgt.n	8001cc4 <_printf_i+0x1f8>
 8001ce2:	e7e9      	b.n	8001cb8 <_printf_i+0x1ec>
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	e7f7      	b.n	8001cd8 <_printf_i+0x20c>
 8001ce8:	08002925 	.word	0x08002925
 8001cec:	08002936 	.word	0x08002936

08001cf0 <_sbrk_r>:
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	b570      	push	{r4, r5, r6, lr}
 8001cf4:	4d06      	ldr	r5, [pc, #24]	; (8001d10 <_sbrk_r+0x20>)
 8001cf6:	0004      	movs	r4, r0
 8001cf8:	0008      	movs	r0, r1
 8001cfa:	602b      	str	r3, [r5, #0]
 8001cfc:	f000 fc7a 	bl	80025f4 <_sbrk>
 8001d00:	1c43      	adds	r3, r0, #1
 8001d02:	d103      	bne.n	8001d0c <_sbrk_r+0x1c>
 8001d04:	682b      	ldr	r3, [r5, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d000      	beq.n	8001d0c <_sbrk_r+0x1c>
 8001d0a:	6023      	str	r3, [r4, #0]
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	200001d8 	.word	0x200001d8

08001d14 <__swbuf_r>:
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	0005      	movs	r5, r0
 8001d18:	000e      	movs	r6, r1
 8001d1a:	0014      	movs	r4, r2
 8001d1c:	2800      	cmp	r0, #0
 8001d1e:	d004      	beq.n	8001d2a <__swbuf_r+0x16>
 8001d20:	6983      	ldr	r3, [r0, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <__swbuf_r+0x16>
 8001d26:	f000 f9f9 	bl	800211c <__sinit>
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <__swbuf_r+0xa0>)
 8001d2c:	429c      	cmp	r4, r3
 8001d2e:	d12e      	bne.n	8001d8e <__swbuf_r+0x7a>
 8001d30:	686c      	ldr	r4, [r5, #4]
 8001d32:	69a3      	ldr	r3, [r4, #24]
 8001d34:	60a3      	str	r3, [r4, #8]
 8001d36:	89a3      	ldrh	r3, [r4, #12]
 8001d38:	071b      	lsls	r3, r3, #28
 8001d3a:	d532      	bpl.n	8001da2 <__swbuf_r+0x8e>
 8001d3c:	6923      	ldr	r3, [r4, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d02f      	beq.n	8001da2 <__swbuf_r+0x8e>
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	6922      	ldr	r2, [r4, #16]
 8001d46:	b2f7      	uxtb	r7, r6
 8001d48:	1a98      	subs	r0, r3, r2
 8001d4a:	6963      	ldr	r3, [r4, #20]
 8001d4c:	b2f6      	uxtb	r6, r6
 8001d4e:	4283      	cmp	r3, r0
 8001d50:	dc05      	bgt.n	8001d5e <__swbuf_r+0x4a>
 8001d52:	0021      	movs	r1, r4
 8001d54:	0028      	movs	r0, r5
 8001d56:	f000 f93f 	bl	8001fd8 <_fflush_r>
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	d127      	bne.n	8001dae <__swbuf_r+0x9a>
 8001d5e:	68a3      	ldr	r3, [r4, #8]
 8001d60:	3001      	adds	r0, #1
 8001d62:	3b01      	subs	r3, #1
 8001d64:	60a3      	str	r3, [r4, #8]
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	6022      	str	r2, [r4, #0]
 8001d6c:	701f      	strb	r7, [r3, #0]
 8001d6e:	6963      	ldr	r3, [r4, #20]
 8001d70:	4283      	cmp	r3, r0
 8001d72:	d004      	beq.n	8001d7e <__swbuf_r+0x6a>
 8001d74:	89a3      	ldrh	r3, [r4, #12]
 8001d76:	07db      	lsls	r3, r3, #31
 8001d78:	d507      	bpl.n	8001d8a <__swbuf_r+0x76>
 8001d7a:	2e0a      	cmp	r6, #10
 8001d7c:	d105      	bne.n	8001d8a <__swbuf_r+0x76>
 8001d7e:	0021      	movs	r1, r4
 8001d80:	0028      	movs	r0, r5
 8001d82:	f000 f929 	bl	8001fd8 <_fflush_r>
 8001d86:	2800      	cmp	r0, #0
 8001d88:	d111      	bne.n	8001dae <__swbuf_r+0x9a>
 8001d8a:	0030      	movs	r0, r6
 8001d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <__swbuf_r+0xa4>)
 8001d90:	429c      	cmp	r4, r3
 8001d92:	d101      	bne.n	8001d98 <__swbuf_r+0x84>
 8001d94:	68ac      	ldr	r4, [r5, #8]
 8001d96:	e7cc      	b.n	8001d32 <__swbuf_r+0x1e>
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <__swbuf_r+0xa8>)
 8001d9a:	429c      	cmp	r4, r3
 8001d9c:	d1c9      	bne.n	8001d32 <__swbuf_r+0x1e>
 8001d9e:	68ec      	ldr	r4, [r5, #12]
 8001da0:	e7c7      	b.n	8001d32 <__swbuf_r+0x1e>
 8001da2:	0021      	movs	r1, r4
 8001da4:	0028      	movs	r0, r5
 8001da6:	f000 f80b 	bl	8001dc0 <__swsetup_r>
 8001daa:	2800      	cmp	r0, #0
 8001dac:	d0c9      	beq.n	8001d42 <__swbuf_r+0x2e>
 8001dae:	2601      	movs	r6, #1
 8001db0:	4276      	negs	r6, r6
 8001db2:	e7ea      	b.n	8001d8a <__swbuf_r+0x76>
 8001db4:	08002968 	.word	0x08002968
 8001db8:	08002988 	.word	0x08002988
 8001dbc:	08002948 	.word	0x08002948

08001dc0 <__swsetup_r>:
 8001dc0:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <__swsetup_r+0xe0>)
 8001dc2:	b570      	push	{r4, r5, r6, lr}
 8001dc4:	681d      	ldr	r5, [r3, #0]
 8001dc6:	0006      	movs	r6, r0
 8001dc8:	000c      	movs	r4, r1
 8001dca:	2d00      	cmp	r5, #0
 8001dcc:	d005      	beq.n	8001dda <__swsetup_r+0x1a>
 8001dce:	69ab      	ldr	r3, [r5, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <__swsetup_r+0x1a>
 8001dd4:	0028      	movs	r0, r5
 8001dd6:	f000 f9a1 	bl	800211c <__sinit>
 8001dda:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <__swsetup_r+0xe4>)
 8001ddc:	429c      	cmp	r4, r3
 8001dde:	d10f      	bne.n	8001e00 <__swsetup_r+0x40>
 8001de0:	686c      	ldr	r4, [r5, #4]
 8001de2:	230c      	movs	r3, #12
 8001de4:	5ee2      	ldrsh	r2, [r4, r3]
 8001de6:	b293      	uxth	r3, r2
 8001de8:	0711      	lsls	r1, r2, #28
 8001dea:	d42d      	bmi.n	8001e48 <__swsetup_r+0x88>
 8001dec:	06d9      	lsls	r1, r3, #27
 8001dee:	d411      	bmi.n	8001e14 <__swsetup_r+0x54>
 8001df0:	2309      	movs	r3, #9
 8001df2:	2001      	movs	r0, #1
 8001df4:	6033      	str	r3, [r6, #0]
 8001df6:	3337      	adds	r3, #55	; 0x37
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	81a3      	strh	r3, [r4, #12]
 8001dfc:	4240      	negs	r0, r0
 8001dfe:	bd70      	pop	{r4, r5, r6, pc}
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <__swsetup_r+0xe8>)
 8001e02:	429c      	cmp	r4, r3
 8001e04:	d101      	bne.n	8001e0a <__swsetup_r+0x4a>
 8001e06:	68ac      	ldr	r4, [r5, #8]
 8001e08:	e7eb      	b.n	8001de2 <__swsetup_r+0x22>
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <__swsetup_r+0xec>)
 8001e0c:	429c      	cmp	r4, r3
 8001e0e:	d1e8      	bne.n	8001de2 <__swsetup_r+0x22>
 8001e10:	68ec      	ldr	r4, [r5, #12]
 8001e12:	e7e6      	b.n	8001de2 <__swsetup_r+0x22>
 8001e14:	075b      	lsls	r3, r3, #29
 8001e16:	d513      	bpl.n	8001e40 <__swsetup_r+0x80>
 8001e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e1a:	2900      	cmp	r1, #0
 8001e1c:	d008      	beq.n	8001e30 <__swsetup_r+0x70>
 8001e1e:	0023      	movs	r3, r4
 8001e20:	3344      	adds	r3, #68	; 0x44
 8001e22:	4299      	cmp	r1, r3
 8001e24:	d002      	beq.n	8001e2c <__swsetup_r+0x6c>
 8001e26:	0030      	movs	r0, r6
 8001e28:	f7ff fbd6 	bl	80015d8 <_free_r>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	6363      	str	r3, [r4, #52]	; 0x34
 8001e30:	2224      	movs	r2, #36	; 0x24
 8001e32:	89a3      	ldrh	r3, [r4, #12]
 8001e34:	4393      	bics	r3, r2
 8001e36:	81a3      	strh	r3, [r4, #12]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	6063      	str	r3, [r4, #4]
 8001e3c:	6923      	ldr	r3, [r4, #16]
 8001e3e:	6023      	str	r3, [r4, #0]
 8001e40:	2308      	movs	r3, #8
 8001e42:	89a2      	ldrh	r2, [r4, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	81a3      	strh	r3, [r4, #12]
 8001e48:	6923      	ldr	r3, [r4, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10b      	bne.n	8001e66 <__swsetup_r+0xa6>
 8001e4e:	21a0      	movs	r1, #160	; 0xa0
 8001e50:	2280      	movs	r2, #128	; 0x80
 8001e52:	89a3      	ldrh	r3, [r4, #12]
 8001e54:	0089      	lsls	r1, r1, #2
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	400b      	ands	r3, r1
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d003      	beq.n	8001e66 <__swsetup_r+0xa6>
 8001e5e:	0021      	movs	r1, r4
 8001e60:	0030      	movs	r0, r6
 8001e62:	f000 fa27 	bl	80022b4 <__smakebuf_r>
 8001e66:	220c      	movs	r2, #12
 8001e68:	5ea3      	ldrsh	r3, [r4, r2]
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	b299      	uxth	r1, r3
 8001e70:	4002      	ands	r2, r0
 8001e72:	4203      	tst	r3, r0
 8001e74:	d00f      	beq.n	8001e96 <__swsetup_r+0xd6>
 8001e76:	2200      	movs	r2, #0
 8001e78:	60a2      	str	r2, [r4, #8]
 8001e7a:	6962      	ldr	r2, [r4, #20]
 8001e7c:	4252      	negs	r2, r2
 8001e7e:	61a2      	str	r2, [r4, #24]
 8001e80:	2000      	movs	r0, #0
 8001e82:	6922      	ldr	r2, [r4, #16]
 8001e84:	4282      	cmp	r2, r0
 8001e86:	d1ba      	bne.n	8001dfe <__swsetup_r+0x3e>
 8001e88:	060a      	lsls	r2, r1, #24
 8001e8a:	d5b8      	bpl.n	8001dfe <__swsetup_r+0x3e>
 8001e8c:	2240      	movs	r2, #64	; 0x40
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	81a3      	strh	r3, [r4, #12]
 8001e92:	3801      	subs	r0, #1
 8001e94:	e7b3      	b.n	8001dfe <__swsetup_r+0x3e>
 8001e96:	0788      	lsls	r0, r1, #30
 8001e98:	d400      	bmi.n	8001e9c <__swsetup_r+0xdc>
 8001e9a:	6962      	ldr	r2, [r4, #20]
 8001e9c:	60a2      	str	r2, [r4, #8]
 8001e9e:	e7ef      	b.n	8001e80 <__swsetup_r+0xc0>
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	08002968 	.word	0x08002968
 8001ea8:	08002988 	.word	0x08002988
 8001eac:	08002948 	.word	0x08002948

08001eb0 <abort>:
 8001eb0:	2006      	movs	r0, #6
 8001eb2:	b510      	push	{r4, lr}
 8001eb4:	f000 fa88 	bl	80023c8 <raise>
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f000 fbb1 	bl	8002620 <_exit>
 8001ebe:	0000      	movs	r0, r0

08001ec0 <__sflush_r>:
 8001ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ec2:	898b      	ldrh	r3, [r1, #12]
 8001ec4:	0005      	movs	r5, r0
 8001ec6:	000c      	movs	r4, r1
 8001ec8:	071a      	lsls	r2, r3, #28
 8001eca:	d45f      	bmi.n	8001f8c <__sflush_r+0xcc>
 8001ecc:	684a      	ldr	r2, [r1, #4]
 8001ece:	2a00      	cmp	r2, #0
 8001ed0:	dc04      	bgt.n	8001edc <__sflush_r+0x1c>
 8001ed2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	dc01      	bgt.n	8001edc <__sflush_r+0x1c>
 8001ed8:	2000      	movs	r0, #0
 8001eda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001edc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001ede:	2f00      	cmp	r7, #0
 8001ee0:	d0fa      	beq.n	8001ed8 <__sflush_r+0x18>
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	682e      	ldr	r6, [r5, #0]
 8001ee8:	602a      	str	r2, [r5, #0]
 8001eea:	001a      	movs	r2, r3
 8001eec:	0149      	lsls	r1, r1, #5
 8001eee:	400a      	ands	r2, r1
 8001ef0:	420b      	tst	r3, r1
 8001ef2:	d034      	beq.n	8001f5e <__sflush_r+0x9e>
 8001ef4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ef6:	89a3      	ldrh	r3, [r4, #12]
 8001ef8:	075b      	lsls	r3, r3, #29
 8001efa:	d506      	bpl.n	8001f0a <__sflush_r+0x4a>
 8001efc:	6863      	ldr	r3, [r4, #4]
 8001efe:	1ac0      	subs	r0, r0, r3
 8001f00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <__sflush_r+0x4a>
 8001f06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f08:	1ac0      	subs	r0, r0, r3
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	6a21      	ldr	r1, [r4, #32]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	0028      	movs	r0, r5
 8001f12:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001f14:	47b8      	blx	r7
 8001f16:	89a1      	ldrh	r1, [r4, #12]
 8001f18:	1c43      	adds	r3, r0, #1
 8001f1a:	d106      	bne.n	8001f2a <__sflush_r+0x6a>
 8001f1c:	682b      	ldr	r3, [r5, #0]
 8001f1e:	2b1d      	cmp	r3, #29
 8001f20:	d831      	bhi.n	8001f86 <__sflush_r+0xc6>
 8001f22:	4a2c      	ldr	r2, [pc, #176]	; (8001fd4 <__sflush_r+0x114>)
 8001f24:	40da      	lsrs	r2, r3
 8001f26:	07d3      	lsls	r3, r2, #31
 8001f28:	d52d      	bpl.n	8001f86 <__sflush_r+0xc6>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	6063      	str	r3, [r4, #4]
 8001f2e:	6923      	ldr	r3, [r4, #16]
 8001f30:	6023      	str	r3, [r4, #0]
 8001f32:	04cb      	lsls	r3, r1, #19
 8001f34:	d505      	bpl.n	8001f42 <__sflush_r+0x82>
 8001f36:	1c43      	adds	r3, r0, #1
 8001f38:	d102      	bne.n	8001f40 <__sflush_r+0x80>
 8001f3a:	682b      	ldr	r3, [r5, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d100      	bne.n	8001f42 <__sflush_r+0x82>
 8001f40:	6560      	str	r0, [r4, #84]	; 0x54
 8001f42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f44:	602e      	str	r6, [r5, #0]
 8001f46:	2900      	cmp	r1, #0
 8001f48:	d0c6      	beq.n	8001ed8 <__sflush_r+0x18>
 8001f4a:	0023      	movs	r3, r4
 8001f4c:	3344      	adds	r3, #68	; 0x44
 8001f4e:	4299      	cmp	r1, r3
 8001f50:	d002      	beq.n	8001f58 <__sflush_r+0x98>
 8001f52:	0028      	movs	r0, r5
 8001f54:	f7ff fb40 	bl	80015d8 <_free_r>
 8001f58:	2000      	movs	r0, #0
 8001f5a:	6360      	str	r0, [r4, #52]	; 0x34
 8001f5c:	e7bd      	b.n	8001eda <__sflush_r+0x1a>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	0028      	movs	r0, r5
 8001f62:	6a21      	ldr	r1, [r4, #32]
 8001f64:	47b8      	blx	r7
 8001f66:	1c43      	adds	r3, r0, #1
 8001f68:	d1c5      	bne.n	8001ef6 <__sflush_r+0x36>
 8001f6a:	682b      	ldr	r3, [r5, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0c2      	beq.n	8001ef6 <__sflush_r+0x36>
 8001f70:	2b1d      	cmp	r3, #29
 8001f72:	d001      	beq.n	8001f78 <__sflush_r+0xb8>
 8001f74:	2b16      	cmp	r3, #22
 8001f76:	d101      	bne.n	8001f7c <__sflush_r+0xbc>
 8001f78:	602e      	str	r6, [r5, #0]
 8001f7a:	e7ad      	b.n	8001ed8 <__sflush_r+0x18>
 8001f7c:	2340      	movs	r3, #64	; 0x40
 8001f7e:	89a2      	ldrh	r2, [r4, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	81a3      	strh	r3, [r4, #12]
 8001f84:	e7a9      	b.n	8001eda <__sflush_r+0x1a>
 8001f86:	2340      	movs	r3, #64	; 0x40
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	e7fa      	b.n	8001f82 <__sflush_r+0xc2>
 8001f8c:	690f      	ldr	r7, [r1, #16]
 8001f8e:	2f00      	cmp	r7, #0
 8001f90:	d0a2      	beq.n	8001ed8 <__sflush_r+0x18>
 8001f92:	680a      	ldr	r2, [r1, #0]
 8001f94:	600f      	str	r7, [r1, #0]
 8001f96:	1bd2      	subs	r2, r2, r7
 8001f98:	9201      	str	r2, [sp, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	079b      	lsls	r3, r3, #30
 8001f9e:	d100      	bne.n	8001fa2 <__sflush_r+0xe2>
 8001fa0:	694a      	ldr	r2, [r1, #20]
 8001fa2:	60a2      	str	r2, [r4, #8]
 8001fa4:	9b01      	ldr	r3, [sp, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	dc00      	bgt.n	8001fac <__sflush_r+0xec>
 8001faa:	e795      	b.n	8001ed8 <__sflush_r+0x18>
 8001fac:	003a      	movs	r2, r7
 8001fae:	0028      	movs	r0, r5
 8001fb0:	9b01      	ldr	r3, [sp, #4]
 8001fb2:	6a21      	ldr	r1, [r4, #32]
 8001fb4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001fb6:	47b0      	blx	r6
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	dc06      	bgt.n	8001fca <__sflush_r+0x10a>
 8001fbc:	2340      	movs	r3, #64	; 0x40
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	89a2      	ldrh	r2, [r4, #12]
 8001fc2:	4240      	negs	r0, r0
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	81a3      	strh	r3, [r4, #12]
 8001fc8:	e787      	b.n	8001eda <__sflush_r+0x1a>
 8001fca:	9b01      	ldr	r3, [sp, #4]
 8001fcc:	183f      	adds	r7, r7, r0
 8001fce:	1a1b      	subs	r3, r3, r0
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	e7e7      	b.n	8001fa4 <__sflush_r+0xe4>
 8001fd4:	20400001 	.word	0x20400001

08001fd8 <_fflush_r>:
 8001fd8:	690b      	ldr	r3, [r1, #16]
 8001fda:	b570      	push	{r4, r5, r6, lr}
 8001fdc:	0005      	movs	r5, r0
 8001fde:	000c      	movs	r4, r1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_fflush_r+0x12>
 8001fe4:	2500      	movs	r5, #0
 8001fe6:	0028      	movs	r0, r5
 8001fe8:	bd70      	pop	{r4, r5, r6, pc}
 8001fea:	2800      	cmp	r0, #0
 8001fec:	d004      	beq.n	8001ff8 <_fflush_r+0x20>
 8001fee:	6983      	ldr	r3, [r0, #24]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <_fflush_r+0x20>
 8001ff4:	f000 f892 	bl	800211c <__sinit>
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <_fflush_r+0x74>)
 8001ffa:	429c      	cmp	r4, r3
 8001ffc:	d11b      	bne.n	8002036 <_fflush_r+0x5e>
 8001ffe:	686c      	ldr	r4, [r5, #4]
 8002000:	220c      	movs	r2, #12
 8002002:	5ea3      	ldrsh	r3, [r4, r2]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ed      	beq.n	8001fe4 <_fflush_r+0xc>
 8002008:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800200a:	07d2      	lsls	r2, r2, #31
 800200c:	d404      	bmi.n	8002018 <_fflush_r+0x40>
 800200e:	059b      	lsls	r3, r3, #22
 8002010:	d402      	bmi.n	8002018 <_fflush_r+0x40>
 8002012:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002014:	f000 f923 	bl	800225e <__retarget_lock_acquire_recursive>
 8002018:	0028      	movs	r0, r5
 800201a:	0021      	movs	r1, r4
 800201c:	f7ff ff50 	bl	8001ec0 <__sflush_r>
 8002020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002022:	0005      	movs	r5, r0
 8002024:	07db      	lsls	r3, r3, #31
 8002026:	d4de      	bmi.n	8001fe6 <_fflush_r+0xe>
 8002028:	89a3      	ldrh	r3, [r4, #12]
 800202a:	059b      	lsls	r3, r3, #22
 800202c:	d4db      	bmi.n	8001fe6 <_fflush_r+0xe>
 800202e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002030:	f000 f916 	bl	8002260 <__retarget_lock_release_recursive>
 8002034:	e7d7      	b.n	8001fe6 <_fflush_r+0xe>
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <_fflush_r+0x78>)
 8002038:	429c      	cmp	r4, r3
 800203a:	d101      	bne.n	8002040 <_fflush_r+0x68>
 800203c:	68ac      	ldr	r4, [r5, #8]
 800203e:	e7df      	b.n	8002000 <_fflush_r+0x28>
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <_fflush_r+0x7c>)
 8002042:	429c      	cmp	r4, r3
 8002044:	d1dc      	bne.n	8002000 <_fflush_r+0x28>
 8002046:	68ec      	ldr	r4, [r5, #12]
 8002048:	e7da      	b.n	8002000 <_fflush_r+0x28>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	08002968 	.word	0x08002968
 8002050:	08002988 	.word	0x08002988
 8002054:	08002948 	.word	0x08002948

08002058 <std>:
 8002058:	2300      	movs	r3, #0
 800205a:	b510      	push	{r4, lr}
 800205c:	0004      	movs	r4, r0
 800205e:	6003      	str	r3, [r0, #0]
 8002060:	6043      	str	r3, [r0, #4]
 8002062:	6083      	str	r3, [r0, #8]
 8002064:	8181      	strh	r1, [r0, #12]
 8002066:	6643      	str	r3, [r0, #100]	; 0x64
 8002068:	0019      	movs	r1, r3
 800206a:	81c2      	strh	r2, [r0, #14]
 800206c:	6103      	str	r3, [r0, #16]
 800206e:	6143      	str	r3, [r0, #20]
 8002070:	6183      	str	r3, [r0, #24]
 8002072:	2208      	movs	r2, #8
 8002074:	305c      	adds	r0, #92	; 0x5c
 8002076:	f7ff fa00 	bl	800147a <memset>
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <std+0x38>)
 800207c:	6224      	str	r4, [r4, #32]
 800207e:	6263      	str	r3, [r4, #36]	; 0x24
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <std+0x3c>)
 8002082:	62a3      	str	r3, [r4, #40]	; 0x28
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <std+0x40>)
 8002086:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <std+0x44>)
 800208a:	6323      	str	r3, [r4, #48]	; 0x30
 800208c:	bd10      	pop	{r4, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	08002409 	.word	0x08002409
 8002094:	08002431 	.word	0x08002431
 8002098:	08002469 	.word	0x08002469
 800209c:	08002495 	.word	0x08002495

080020a0 <_cleanup_r>:
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4902      	ldr	r1, [pc, #8]	; (80020ac <_cleanup_r+0xc>)
 80020a4:	f000 f8ba 	bl	800221c <_fwalk_reent>
 80020a8:	bd10      	pop	{r4, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	08001fd9 	.word	0x08001fd9

080020b0 <__sfmoreglue>:
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	2568      	movs	r5, #104	; 0x68
 80020b4:	1e4a      	subs	r2, r1, #1
 80020b6:	4355      	muls	r5, r2
 80020b8:	000e      	movs	r6, r1
 80020ba:	0029      	movs	r1, r5
 80020bc:	3174      	adds	r1, #116	; 0x74
 80020be:	f7ff fad5 	bl	800166c <_malloc_r>
 80020c2:	1e04      	subs	r4, r0, #0
 80020c4:	d008      	beq.n	80020d8 <__sfmoreglue+0x28>
 80020c6:	2100      	movs	r1, #0
 80020c8:	002a      	movs	r2, r5
 80020ca:	6001      	str	r1, [r0, #0]
 80020cc:	6046      	str	r6, [r0, #4]
 80020ce:	300c      	adds	r0, #12
 80020d0:	60a0      	str	r0, [r4, #8]
 80020d2:	3268      	adds	r2, #104	; 0x68
 80020d4:	f7ff f9d1 	bl	800147a <memset>
 80020d8:	0020      	movs	r0, r4
 80020da:	bd70      	pop	{r4, r5, r6, pc}

080020dc <__sfp_lock_acquire>:
 80020dc:	b510      	push	{r4, lr}
 80020de:	4802      	ldr	r0, [pc, #8]	; (80020e8 <__sfp_lock_acquire+0xc>)
 80020e0:	f000 f8bd 	bl	800225e <__retarget_lock_acquire_recursive>
 80020e4:	bd10      	pop	{r4, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	200001d5 	.word	0x200001d5

080020ec <__sfp_lock_release>:
 80020ec:	b510      	push	{r4, lr}
 80020ee:	4802      	ldr	r0, [pc, #8]	; (80020f8 <__sfp_lock_release+0xc>)
 80020f0:	f000 f8b6 	bl	8002260 <__retarget_lock_release_recursive>
 80020f4:	bd10      	pop	{r4, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	200001d5 	.word	0x200001d5

080020fc <__sinit_lock_acquire>:
 80020fc:	b510      	push	{r4, lr}
 80020fe:	4802      	ldr	r0, [pc, #8]	; (8002108 <__sinit_lock_acquire+0xc>)
 8002100:	f000 f8ad 	bl	800225e <__retarget_lock_acquire_recursive>
 8002104:	bd10      	pop	{r4, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	200001d6 	.word	0x200001d6

0800210c <__sinit_lock_release>:
 800210c:	b510      	push	{r4, lr}
 800210e:	4802      	ldr	r0, [pc, #8]	; (8002118 <__sinit_lock_release+0xc>)
 8002110:	f000 f8a6 	bl	8002260 <__retarget_lock_release_recursive>
 8002114:	bd10      	pop	{r4, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	200001d6 	.word	0x200001d6

0800211c <__sinit>:
 800211c:	b513      	push	{r0, r1, r4, lr}
 800211e:	0004      	movs	r4, r0
 8002120:	f7ff ffec 	bl	80020fc <__sinit_lock_acquire>
 8002124:	69a3      	ldr	r3, [r4, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <__sinit+0x14>
 800212a:	f7ff ffef 	bl	800210c <__sinit_lock_release>
 800212e:	bd13      	pop	{r0, r1, r4, pc}
 8002130:	64a3      	str	r3, [r4, #72]	; 0x48
 8002132:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002134:	6523      	str	r3, [r4, #80]	; 0x50
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <__sinit+0x68>)
 8002138:	4a13      	ldr	r2, [pc, #76]	; (8002188 <__sinit+0x6c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	62a2      	str	r2, [r4, #40]	; 0x28
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	42a3      	cmp	r3, r4
 8002142:	d101      	bne.n	8002148 <__sinit+0x2c>
 8002144:	2301      	movs	r3, #1
 8002146:	61a3      	str	r3, [r4, #24]
 8002148:	0020      	movs	r0, r4
 800214a:	f000 f81f 	bl	800218c <__sfp>
 800214e:	6060      	str	r0, [r4, #4]
 8002150:	0020      	movs	r0, r4
 8002152:	f000 f81b 	bl	800218c <__sfp>
 8002156:	60a0      	str	r0, [r4, #8]
 8002158:	0020      	movs	r0, r4
 800215a:	f000 f817 	bl	800218c <__sfp>
 800215e:	2200      	movs	r2, #0
 8002160:	2104      	movs	r1, #4
 8002162:	60e0      	str	r0, [r4, #12]
 8002164:	6860      	ldr	r0, [r4, #4]
 8002166:	f7ff ff77 	bl	8002058 <std>
 800216a:	2201      	movs	r2, #1
 800216c:	2109      	movs	r1, #9
 800216e:	68a0      	ldr	r0, [r4, #8]
 8002170:	f7ff ff72 	bl	8002058 <std>
 8002174:	2202      	movs	r2, #2
 8002176:	2112      	movs	r1, #18
 8002178:	68e0      	ldr	r0, [r4, #12]
 800217a:	f7ff ff6d 	bl	8002058 <std>
 800217e:	2301      	movs	r3, #1
 8002180:	61a3      	str	r3, [r4, #24]
 8002182:	e7d2      	b.n	800212a <__sinit+0xe>
 8002184:	08002840 	.word	0x08002840
 8002188:	080020a1 	.word	0x080020a1

0800218c <__sfp>:
 800218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218e:	0007      	movs	r7, r0
 8002190:	f7ff ffa4 	bl	80020dc <__sfp_lock_acquire>
 8002194:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <__sfp+0x88>)
 8002196:	681e      	ldr	r6, [r3, #0]
 8002198:	69b3      	ldr	r3, [r6, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <__sfp+0x18>
 800219e:	0030      	movs	r0, r6
 80021a0:	f7ff ffbc 	bl	800211c <__sinit>
 80021a4:	3648      	adds	r6, #72	; 0x48
 80021a6:	68b4      	ldr	r4, [r6, #8]
 80021a8:	6873      	ldr	r3, [r6, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	d504      	bpl.n	80021b8 <__sfp+0x2c>
 80021ae:	6833      	ldr	r3, [r6, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d022      	beq.n	80021fa <__sfp+0x6e>
 80021b4:	6836      	ldr	r6, [r6, #0]
 80021b6:	e7f6      	b.n	80021a6 <__sfp+0x1a>
 80021b8:	220c      	movs	r2, #12
 80021ba:	5ea5      	ldrsh	r5, [r4, r2]
 80021bc:	2d00      	cmp	r5, #0
 80021be:	d11a      	bne.n	80021f6 <__sfp+0x6a>
 80021c0:	0020      	movs	r0, r4
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <__sfp+0x8c>)
 80021c4:	3058      	adds	r0, #88	; 0x58
 80021c6:	60e3      	str	r3, [r4, #12]
 80021c8:	6665      	str	r5, [r4, #100]	; 0x64
 80021ca:	f000 f847 	bl	800225c <__retarget_lock_init_recursive>
 80021ce:	f7ff ff8d 	bl	80020ec <__sfp_lock_release>
 80021d2:	0020      	movs	r0, r4
 80021d4:	2208      	movs	r2, #8
 80021d6:	0029      	movs	r1, r5
 80021d8:	6025      	str	r5, [r4, #0]
 80021da:	60a5      	str	r5, [r4, #8]
 80021dc:	6065      	str	r5, [r4, #4]
 80021de:	6125      	str	r5, [r4, #16]
 80021e0:	6165      	str	r5, [r4, #20]
 80021e2:	61a5      	str	r5, [r4, #24]
 80021e4:	305c      	adds	r0, #92	; 0x5c
 80021e6:	f7ff f948 	bl	800147a <memset>
 80021ea:	6365      	str	r5, [r4, #52]	; 0x34
 80021ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80021ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80021f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80021f2:	0020      	movs	r0, r4
 80021f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021f6:	3468      	adds	r4, #104	; 0x68
 80021f8:	e7d7      	b.n	80021aa <__sfp+0x1e>
 80021fa:	2104      	movs	r1, #4
 80021fc:	0038      	movs	r0, r7
 80021fe:	f7ff ff57 	bl	80020b0 <__sfmoreglue>
 8002202:	1e04      	subs	r4, r0, #0
 8002204:	6030      	str	r0, [r6, #0]
 8002206:	d1d5      	bne.n	80021b4 <__sfp+0x28>
 8002208:	f7ff ff70 	bl	80020ec <__sfp_lock_release>
 800220c:	230c      	movs	r3, #12
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	e7ef      	b.n	80021f2 <__sfp+0x66>
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	08002840 	.word	0x08002840
 8002218:	ffff0001 	.word	0xffff0001

0800221c <_fwalk_reent>:
 800221c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800221e:	0004      	movs	r4, r0
 8002220:	0006      	movs	r6, r0
 8002222:	2700      	movs	r7, #0
 8002224:	9101      	str	r1, [sp, #4]
 8002226:	3448      	adds	r4, #72	; 0x48
 8002228:	6863      	ldr	r3, [r4, #4]
 800222a:	68a5      	ldr	r5, [r4, #8]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	9b00      	ldr	r3, [sp, #0]
 8002230:	3b01      	subs	r3, #1
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	d504      	bpl.n	8002240 <_fwalk_reent+0x24>
 8002236:	6824      	ldr	r4, [r4, #0]
 8002238:	2c00      	cmp	r4, #0
 800223a:	d1f5      	bne.n	8002228 <_fwalk_reent+0xc>
 800223c:	0038      	movs	r0, r7
 800223e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002240:	89ab      	ldrh	r3, [r5, #12]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d908      	bls.n	8002258 <_fwalk_reent+0x3c>
 8002246:	220e      	movs	r2, #14
 8002248:	5eab      	ldrsh	r3, [r5, r2]
 800224a:	3301      	adds	r3, #1
 800224c:	d004      	beq.n	8002258 <_fwalk_reent+0x3c>
 800224e:	0029      	movs	r1, r5
 8002250:	0030      	movs	r0, r6
 8002252:	9b01      	ldr	r3, [sp, #4]
 8002254:	4798      	blx	r3
 8002256:	4307      	orrs	r7, r0
 8002258:	3568      	adds	r5, #104	; 0x68
 800225a:	e7e8      	b.n	800222e <_fwalk_reent+0x12>

0800225c <__retarget_lock_init_recursive>:
 800225c:	4770      	bx	lr

0800225e <__retarget_lock_acquire_recursive>:
 800225e:	4770      	bx	lr

08002260 <__retarget_lock_release_recursive>:
 8002260:	4770      	bx	lr
 8002262:	0000      	movs	r0, r0

08002264 <__swhatbuf_r>:
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	000e      	movs	r6, r1
 8002268:	001d      	movs	r5, r3
 800226a:	230e      	movs	r3, #14
 800226c:	5ec9      	ldrsh	r1, [r1, r3]
 800226e:	0014      	movs	r4, r2
 8002270:	b096      	sub	sp, #88	; 0x58
 8002272:	2900      	cmp	r1, #0
 8002274:	da08      	bge.n	8002288 <__swhatbuf_r+0x24>
 8002276:	220c      	movs	r2, #12
 8002278:	5eb3      	ldrsh	r3, [r6, r2]
 800227a:	2200      	movs	r2, #0
 800227c:	602a      	str	r2, [r5, #0]
 800227e:	061b      	lsls	r3, r3, #24
 8002280:	d411      	bmi.n	80022a6 <__swhatbuf_r+0x42>
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	e00f      	b.n	80022a8 <__swhatbuf_r+0x44>
 8002288:	466a      	mov	r2, sp
 800228a:	f000 f92f 	bl	80024ec <_fstat_r>
 800228e:	2800      	cmp	r0, #0
 8002290:	dbf1      	blt.n	8002276 <__swhatbuf_r+0x12>
 8002292:	23f0      	movs	r3, #240	; 0xf0
 8002294:	9901      	ldr	r1, [sp, #4]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	4019      	ands	r1, r3
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <__swhatbuf_r+0x4c>)
 800229c:	18c9      	adds	r1, r1, r3
 800229e:	424b      	negs	r3, r1
 80022a0:	4159      	adcs	r1, r3
 80022a2:	6029      	str	r1, [r5, #0]
 80022a4:	e7ed      	b.n	8002282 <__swhatbuf_r+0x1e>
 80022a6:	2340      	movs	r3, #64	; 0x40
 80022a8:	2000      	movs	r0, #0
 80022aa:	6023      	str	r3, [r4, #0]
 80022ac:	b016      	add	sp, #88	; 0x58
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	ffffe000 	.word	0xffffe000

080022b4 <__smakebuf_r>:
 80022b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022b6:	2602      	movs	r6, #2
 80022b8:	898b      	ldrh	r3, [r1, #12]
 80022ba:	0005      	movs	r5, r0
 80022bc:	000c      	movs	r4, r1
 80022be:	4233      	tst	r3, r6
 80022c0:	d006      	beq.n	80022d0 <__smakebuf_r+0x1c>
 80022c2:	0023      	movs	r3, r4
 80022c4:	3347      	adds	r3, #71	; 0x47
 80022c6:	6023      	str	r3, [r4, #0]
 80022c8:	6123      	str	r3, [r4, #16]
 80022ca:	2301      	movs	r3, #1
 80022cc:	6163      	str	r3, [r4, #20]
 80022ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80022d0:	466a      	mov	r2, sp
 80022d2:	ab01      	add	r3, sp, #4
 80022d4:	f7ff ffc6 	bl	8002264 <__swhatbuf_r>
 80022d8:	9900      	ldr	r1, [sp, #0]
 80022da:	0007      	movs	r7, r0
 80022dc:	0028      	movs	r0, r5
 80022de:	f7ff f9c5 	bl	800166c <_malloc_r>
 80022e2:	2800      	cmp	r0, #0
 80022e4:	d108      	bne.n	80022f8 <__smakebuf_r+0x44>
 80022e6:	220c      	movs	r2, #12
 80022e8:	5ea3      	ldrsh	r3, [r4, r2]
 80022ea:	059a      	lsls	r2, r3, #22
 80022ec:	d4ef      	bmi.n	80022ce <__smakebuf_r+0x1a>
 80022ee:	2203      	movs	r2, #3
 80022f0:	4393      	bics	r3, r2
 80022f2:	431e      	orrs	r6, r3
 80022f4:	81a6      	strh	r6, [r4, #12]
 80022f6:	e7e4      	b.n	80022c2 <__smakebuf_r+0xe>
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <__smakebuf_r+0x84>)
 80022fa:	62ab      	str	r3, [r5, #40]	; 0x28
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	89a2      	ldrh	r2, [r4, #12]
 8002300:	6020      	str	r0, [r4, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	81a3      	strh	r3, [r4, #12]
 8002306:	9b00      	ldr	r3, [sp, #0]
 8002308:	6120      	str	r0, [r4, #16]
 800230a:	6163      	str	r3, [r4, #20]
 800230c:	9b01      	ldr	r3, [sp, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00d      	beq.n	800232e <__smakebuf_r+0x7a>
 8002312:	0028      	movs	r0, r5
 8002314:	230e      	movs	r3, #14
 8002316:	5ee1      	ldrsh	r1, [r4, r3]
 8002318:	f000 f8fa 	bl	8002510 <_isatty_r>
 800231c:	2800      	cmp	r0, #0
 800231e:	d006      	beq.n	800232e <__smakebuf_r+0x7a>
 8002320:	2203      	movs	r2, #3
 8002322:	89a3      	ldrh	r3, [r4, #12]
 8002324:	4393      	bics	r3, r2
 8002326:	001a      	movs	r2, r3
 8002328:	2301      	movs	r3, #1
 800232a:	4313      	orrs	r3, r2
 800232c:	81a3      	strh	r3, [r4, #12]
 800232e:	89a0      	ldrh	r0, [r4, #12]
 8002330:	4307      	orrs	r7, r0
 8002332:	81a7      	strh	r7, [r4, #12]
 8002334:	e7cb      	b.n	80022ce <__smakebuf_r+0x1a>
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	080020a1 	.word	0x080020a1

0800233c <memchr>:
 800233c:	b2c9      	uxtb	r1, r1
 800233e:	1882      	adds	r2, r0, r2
 8002340:	4290      	cmp	r0, r2
 8002342:	d101      	bne.n	8002348 <memchr+0xc>
 8002344:	2000      	movs	r0, #0
 8002346:	4770      	bx	lr
 8002348:	7803      	ldrb	r3, [r0, #0]
 800234a:	428b      	cmp	r3, r1
 800234c:	d0fb      	beq.n	8002346 <memchr+0xa>
 800234e:	3001      	adds	r0, #1
 8002350:	e7f6      	b.n	8002340 <memchr+0x4>
 8002352:	0000      	movs	r0, r0

08002354 <__malloc_lock>:
 8002354:	b510      	push	{r4, lr}
 8002356:	4802      	ldr	r0, [pc, #8]	; (8002360 <__malloc_lock+0xc>)
 8002358:	f7ff ff81 	bl	800225e <__retarget_lock_acquire_recursive>
 800235c:	bd10      	pop	{r4, pc}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	200001d4 	.word	0x200001d4

08002364 <__malloc_unlock>:
 8002364:	b510      	push	{r4, lr}
 8002366:	4802      	ldr	r0, [pc, #8]	; (8002370 <__malloc_unlock+0xc>)
 8002368:	f7ff ff7a 	bl	8002260 <__retarget_lock_release_recursive>
 800236c:	bd10      	pop	{r4, pc}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	200001d4 	.word	0x200001d4

08002374 <_raise_r>:
 8002374:	b570      	push	{r4, r5, r6, lr}
 8002376:	0004      	movs	r4, r0
 8002378:	000d      	movs	r5, r1
 800237a:	291f      	cmp	r1, #31
 800237c:	d904      	bls.n	8002388 <_raise_r+0x14>
 800237e:	2316      	movs	r3, #22
 8002380:	6003      	str	r3, [r0, #0]
 8002382:	2001      	movs	r0, #1
 8002384:	4240      	negs	r0, r0
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <_raise_r+0x24>
 800238e:	008a      	lsls	r2, r1, #2
 8002390:	189b      	adds	r3, r3, r2
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2a00      	cmp	r2, #0
 8002396:	d108      	bne.n	80023aa <_raise_r+0x36>
 8002398:	0020      	movs	r0, r4
 800239a:	f000 f831 	bl	8002400 <_getpid_r>
 800239e:	002a      	movs	r2, r5
 80023a0:	0001      	movs	r1, r0
 80023a2:	0020      	movs	r0, r4
 80023a4:	f000 f81a 	bl	80023dc <_kill_r>
 80023a8:	e7ed      	b.n	8002386 <_raise_r+0x12>
 80023aa:	2000      	movs	r0, #0
 80023ac:	2a01      	cmp	r2, #1
 80023ae:	d0ea      	beq.n	8002386 <_raise_r+0x12>
 80023b0:	1c51      	adds	r1, r2, #1
 80023b2:	d103      	bne.n	80023bc <_raise_r+0x48>
 80023b4:	2316      	movs	r3, #22
 80023b6:	3001      	adds	r0, #1
 80023b8:	6023      	str	r3, [r4, #0]
 80023ba:	e7e4      	b.n	8002386 <_raise_r+0x12>
 80023bc:	2400      	movs	r4, #0
 80023be:	0028      	movs	r0, r5
 80023c0:	601c      	str	r4, [r3, #0]
 80023c2:	4790      	blx	r2
 80023c4:	0020      	movs	r0, r4
 80023c6:	e7de      	b.n	8002386 <_raise_r+0x12>

080023c8 <raise>:
 80023c8:	b510      	push	{r4, lr}
 80023ca:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <raise+0x10>)
 80023cc:	0001      	movs	r1, r0
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	f7ff ffd0 	bl	8002374 <_raise_r>
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	20000004 	.word	0x20000004

080023dc <_kill_r>:
 80023dc:	2300      	movs	r3, #0
 80023de:	b570      	push	{r4, r5, r6, lr}
 80023e0:	4d06      	ldr	r5, [pc, #24]	; (80023fc <_kill_r+0x20>)
 80023e2:	0004      	movs	r4, r0
 80023e4:	0008      	movs	r0, r1
 80023e6:	0011      	movs	r1, r2
 80023e8:	602b      	str	r3, [r5, #0]
 80023ea:	f000 f8eb 	bl	80025c4 <_kill>
 80023ee:	1c43      	adds	r3, r0, #1
 80023f0:	d103      	bne.n	80023fa <_kill_r+0x1e>
 80023f2:	682b      	ldr	r3, [r5, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d000      	beq.n	80023fa <_kill_r+0x1e>
 80023f8:	6023      	str	r3, [r4, #0]
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
 80023fc:	200001d8 	.word	0x200001d8

08002400 <_getpid_r>:
 8002400:	b510      	push	{r4, lr}
 8002402:	f000 f8cf 	bl	80025a4 <_getpid>
 8002406:	bd10      	pop	{r4, pc}

08002408 <__sread>:
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	000c      	movs	r4, r1
 800240c:	250e      	movs	r5, #14
 800240e:	5f49      	ldrsh	r1, [r1, r5]
 8002410:	f000 f8a4 	bl	800255c <_read_r>
 8002414:	2800      	cmp	r0, #0
 8002416:	db03      	blt.n	8002420 <__sread+0x18>
 8002418:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800241a:	181b      	adds	r3, r3, r0
 800241c:	6563      	str	r3, [r4, #84]	; 0x54
 800241e:	bd70      	pop	{r4, r5, r6, pc}
 8002420:	89a3      	ldrh	r3, [r4, #12]
 8002422:	4a02      	ldr	r2, [pc, #8]	; (800242c <__sread+0x24>)
 8002424:	4013      	ands	r3, r2
 8002426:	81a3      	strh	r3, [r4, #12]
 8002428:	e7f9      	b.n	800241e <__sread+0x16>
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	ffffefff 	.word	0xffffefff

08002430 <__swrite>:
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	001f      	movs	r7, r3
 8002434:	898b      	ldrh	r3, [r1, #12]
 8002436:	0005      	movs	r5, r0
 8002438:	000c      	movs	r4, r1
 800243a:	0016      	movs	r6, r2
 800243c:	05db      	lsls	r3, r3, #23
 800243e:	d505      	bpl.n	800244c <__swrite+0x1c>
 8002440:	230e      	movs	r3, #14
 8002442:	5ec9      	ldrsh	r1, [r1, r3]
 8002444:	2200      	movs	r2, #0
 8002446:	2302      	movs	r3, #2
 8002448:	f000 f874 	bl	8002534 <_lseek_r>
 800244c:	89a3      	ldrh	r3, [r4, #12]
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <__swrite+0x34>)
 8002450:	0028      	movs	r0, r5
 8002452:	4013      	ands	r3, r2
 8002454:	81a3      	strh	r3, [r4, #12]
 8002456:	0032      	movs	r2, r6
 8002458:	230e      	movs	r3, #14
 800245a:	5ee1      	ldrsh	r1, [r4, r3]
 800245c:	003b      	movs	r3, r7
 800245e:	f000 f81f 	bl	80024a0 <_write_r>
 8002462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002464:	ffffefff 	.word	0xffffefff

08002468 <__sseek>:
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	000c      	movs	r4, r1
 800246c:	250e      	movs	r5, #14
 800246e:	5f49      	ldrsh	r1, [r1, r5]
 8002470:	f000 f860 	bl	8002534 <_lseek_r>
 8002474:	89a3      	ldrh	r3, [r4, #12]
 8002476:	1c42      	adds	r2, r0, #1
 8002478:	d103      	bne.n	8002482 <__sseek+0x1a>
 800247a:	4a05      	ldr	r2, [pc, #20]	; (8002490 <__sseek+0x28>)
 800247c:	4013      	ands	r3, r2
 800247e:	81a3      	strh	r3, [r4, #12]
 8002480:	bd70      	pop	{r4, r5, r6, pc}
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	0152      	lsls	r2, r2, #5
 8002486:	4313      	orrs	r3, r2
 8002488:	81a3      	strh	r3, [r4, #12]
 800248a:	6560      	str	r0, [r4, #84]	; 0x54
 800248c:	e7f8      	b.n	8002480 <__sseek+0x18>
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	ffffefff 	.word	0xffffefff

08002494 <__sclose>:
 8002494:	b510      	push	{r4, lr}
 8002496:	230e      	movs	r3, #14
 8002498:	5ec9      	ldrsh	r1, [r1, r3]
 800249a:	f000 f815 	bl	80024c8 <_close_r>
 800249e:	bd10      	pop	{r4, pc}

080024a0 <_write_r>:
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	0004      	movs	r4, r0
 80024a4:	0008      	movs	r0, r1
 80024a6:	0011      	movs	r1, r2
 80024a8:	001a      	movs	r2, r3
 80024aa:	2300      	movs	r3, #0
 80024ac:	4d05      	ldr	r5, [pc, #20]	; (80024c4 <_write_r+0x24>)
 80024ae:	602b      	str	r3, [r5, #0]
 80024b0:	f000 f8ae 	bl	8002610 <_write>
 80024b4:	1c43      	adds	r3, r0, #1
 80024b6:	d103      	bne.n	80024c0 <_write_r+0x20>
 80024b8:	682b      	ldr	r3, [r5, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d000      	beq.n	80024c0 <_write_r+0x20>
 80024be:	6023      	str	r3, [r4, #0]
 80024c0:	bd70      	pop	{r4, r5, r6, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	200001d8 	.word	0x200001d8

080024c8 <_close_r>:
 80024c8:	2300      	movs	r3, #0
 80024ca:	b570      	push	{r4, r5, r6, lr}
 80024cc:	4d06      	ldr	r5, [pc, #24]	; (80024e8 <_close_r+0x20>)
 80024ce:	0004      	movs	r4, r0
 80024d0:	0008      	movs	r0, r1
 80024d2:	602b      	str	r3, [r5, #0]
 80024d4:	f000 f856 	bl	8002584 <_close>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	d103      	bne.n	80024e4 <_close_r+0x1c>
 80024dc:	682b      	ldr	r3, [r5, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d000      	beq.n	80024e4 <_close_r+0x1c>
 80024e2:	6023      	str	r3, [r4, #0]
 80024e4:	bd70      	pop	{r4, r5, r6, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	200001d8 	.word	0x200001d8

080024ec <_fstat_r>:
 80024ec:	2300      	movs	r3, #0
 80024ee:	b570      	push	{r4, r5, r6, lr}
 80024f0:	4d06      	ldr	r5, [pc, #24]	; (800250c <_fstat_r+0x20>)
 80024f2:	0004      	movs	r4, r0
 80024f4:	0008      	movs	r0, r1
 80024f6:	0011      	movs	r1, r2
 80024f8:	602b      	str	r3, [r5, #0]
 80024fa:	f000 f84b 	bl	8002594 <_fstat>
 80024fe:	1c43      	adds	r3, r0, #1
 8002500:	d103      	bne.n	800250a <_fstat_r+0x1e>
 8002502:	682b      	ldr	r3, [r5, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d000      	beq.n	800250a <_fstat_r+0x1e>
 8002508:	6023      	str	r3, [r4, #0]
 800250a:	bd70      	pop	{r4, r5, r6, pc}
 800250c:	200001d8 	.word	0x200001d8

08002510 <_isatty_r>:
 8002510:	2300      	movs	r3, #0
 8002512:	b570      	push	{r4, r5, r6, lr}
 8002514:	4d06      	ldr	r5, [pc, #24]	; (8002530 <_isatty_r+0x20>)
 8002516:	0004      	movs	r4, r0
 8002518:	0008      	movs	r0, r1
 800251a:	602b      	str	r3, [r5, #0]
 800251c:	f000 f84a 	bl	80025b4 <_isatty>
 8002520:	1c43      	adds	r3, r0, #1
 8002522:	d103      	bne.n	800252c <_isatty_r+0x1c>
 8002524:	682b      	ldr	r3, [r5, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d000      	beq.n	800252c <_isatty_r+0x1c>
 800252a:	6023      	str	r3, [r4, #0]
 800252c:	bd70      	pop	{r4, r5, r6, pc}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	200001d8 	.word	0x200001d8

08002534 <_lseek_r>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	0004      	movs	r4, r0
 8002538:	0008      	movs	r0, r1
 800253a:	0011      	movs	r1, r2
 800253c:	001a      	movs	r2, r3
 800253e:	2300      	movs	r3, #0
 8002540:	4d05      	ldr	r5, [pc, #20]	; (8002558 <_lseek_r+0x24>)
 8002542:	602b      	str	r3, [r5, #0]
 8002544:	f000 f846 	bl	80025d4 <_lseek>
 8002548:	1c43      	adds	r3, r0, #1
 800254a:	d103      	bne.n	8002554 <_lseek_r+0x20>
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d000      	beq.n	8002554 <_lseek_r+0x20>
 8002552:	6023      	str	r3, [r4, #0]
 8002554:	bd70      	pop	{r4, r5, r6, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	200001d8 	.word	0x200001d8

0800255c <_read_r>:
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	0004      	movs	r4, r0
 8002560:	0008      	movs	r0, r1
 8002562:	0011      	movs	r1, r2
 8002564:	001a      	movs	r2, r3
 8002566:	2300      	movs	r3, #0
 8002568:	4d05      	ldr	r5, [pc, #20]	; (8002580 <_read_r+0x24>)
 800256a:	602b      	str	r3, [r5, #0]
 800256c:	f000 f83a 	bl	80025e4 <_read>
 8002570:	1c43      	adds	r3, r0, #1
 8002572:	d103      	bne.n	800257c <_read_r+0x20>
 8002574:	682b      	ldr	r3, [r5, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d000      	beq.n	800257c <_read_r+0x20>
 800257a:	6023      	str	r3, [r4, #0]
 800257c:	bd70      	pop	{r4, r5, r6, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	200001d8 	.word	0x200001d8

08002584 <_close>:
 8002584:	2258      	movs	r2, #88	; 0x58
 8002586:	2001      	movs	r0, #1
 8002588:	4b01      	ldr	r3, [pc, #4]	; (8002590 <_close+0xc>)
 800258a:	4240      	negs	r0, r0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	4770      	bx	lr
 8002590:	200001d8 	.word	0x200001d8

08002594 <_fstat>:
 8002594:	2258      	movs	r2, #88	; 0x58
 8002596:	2001      	movs	r0, #1
 8002598:	4b01      	ldr	r3, [pc, #4]	; (80025a0 <_fstat+0xc>)
 800259a:	4240      	negs	r0, r0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	4770      	bx	lr
 80025a0:	200001d8 	.word	0x200001d8

080025a4 <_getpid>:
 80025a4:	2258      	movs	r2, #88	; 0x58
 80025a6:	2001      	movs	r0, #1
 80025a8:	4b01      	ldr	r3, [pc, #4]	; (80025b0 <_getpid+0xc>)
 80025aa:	4240      	negs	r0, r0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	4770      	bx	lr
 80025b0:	200001d8 	.word	0x200001d8

080025b4 <_isatty>:
 80025b4:	2258      	movs	r2, #88	; 0x58
 80025b6:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <_isatty+0xc>)
 80025b8:	2000      	movs	r0, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	4770      	bx	lr
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	200001d8 	.word	0x200001d8

080025c4 <_kill>:
 80025c4:	2258      	movs	r2, #88	; 0x58
 80025c6:	2001      	movs	r0, #1
 80025c8:	4b01      	ldr	r3, [pc, #4]	; (80025d0 <_kill+0xc>)
 80025ca:	4240      	negs	r0, r0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	4770      	bx	lr
 80025d0:	200001d8 	.word	0x200001d8

080025d4 <_lseek>:
 80025d4:	2258      	movs	r2, #88	; 0x58
 80025d6:	2001      	movs	r0, #1
 80025d8:	4b01      	ldr	r3, [pc, #4]	; (80025e0 <_lseek+0xc>)
 80025da:	4240      	negs	r0, r0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	4770      	bx	lr
 80025e0:	200001d8 	.word	0x200001d8

080025e4 <_read>:
 80025e4:	2258      	movs	r2, #88	; 0x58
 80025e6:	2001      	movs	r0, #1
 80025e8:	4b01      	ldr	r3, [pc, #4]	; (80025f0 <_read+0xc>)
 80025ea:	4240      	negs	r0, r0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	4770      	bx	lr
 80025f0:	200001d8 	.word	0x200001d8

080025f4 <_sbrk>:
 80025f4:	4a04      	ldr	r2, [pc, #16]	; (8002608 <_sbrk+0x14>)
 80025f6:	0003      	movs	r3, r0
 80025f8:	6810      	ldr	r0, [r2, #0]
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d002      	beq.n	8002604 <_sbrk+0x10>
 80025fe:	18c3      	adds	r3, r0, r3
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4770      	bx	lr
 8002604:	4801      	ldr	r0, [pc, #4]	; (800260c <_sbrk+0x18>)
 8002606:	e7fa      	b.n	80025fe <_sbrk+0xa>
 8002608:	200001dc 	.word	0x200001dc
 800260c:	200001e0 	.word	0x200001e0

08002610 <_write>:
 8002610:	2258      	movs	r2, #88	; 0x58
 8002612:	2001      	movs	r0, #1
 8002614:	4b01      	ldr	r3, [pc, #4]	; (800261c <_write+0xc>)
 8002616:	4240      	negs	r0, r0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	4770      	bx	lr
 800261c:	200001d8 	.word	0x200001d8

08002620 <_exit>:
 8002620:	e7fe      	b.n	8002620 <_exit>
 8002622:	46c0      	nop			; (mov r8, r8)

08002624 <_init>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262a:	bc08      	pop	{r3}
 800262c:	469e      	mov	lr, r3
 800262e:	4770      	bx	lr

08002630 <_fini>:
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002636:	bc08      	pop	{r3}
 8002638:	469e      	mov	lr, r3
 800263a:	4770      	bx	lr
